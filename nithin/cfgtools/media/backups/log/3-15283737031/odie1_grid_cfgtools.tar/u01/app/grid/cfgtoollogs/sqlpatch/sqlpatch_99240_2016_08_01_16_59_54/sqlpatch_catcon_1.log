
SQL*Plus: Release 12.1.0.2.0 Production on Mon Aug 1 16:59:55 2016

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

SQL> Connected.
SQL>   2  
Session altered.

SQL>   2  
Session altered.

SQL>   2  
Session altered.

SQL>   2  
Session altered.

SQL> SQL> 
SQL>   2  
Session altered.

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2  
Session altered.

SQL> 
NOW_CONNECTED_TO
--------------------------------------------------------------------------------
==== Current Container = ODIE_C Id = 3 ====

SQL> 
NOW_CONNECTED_TO
--------------------------------------------------------------------------------
==== Current Container = ODIE_C Id = 3 ====

SQL>   2  
CATCONSECTION
-----------------------------------
==== CATCON EXEC IN CONTAINERS ====

SQL> 
BEGIN_RUNNING
--------------------------------------------------------------------------------
==== @/u01/app/12.1.0.2/grid/sqlpatch/sqlpatch_bootstrap.sql #/u01/app/grid/cfgt
oollogs/sqlpatch/sqlpatch_99240_2016_08_01_16_59_54# #FALSE# Container:ODIE_C Id
:3 16-08-01 05:00:06 Proc:1 ====


SQL> 
BEGIN_RUNNING
--------------------------------------------------------------------------------
==== @/u01/app/12.1.0.2/grid/sqlpatch/sqlpatch_bootstrap.sql #/u01/app/grid/cfgt
oollogs/sqlpatch/sqlpatch_99240_2016_08_01_16_59_54# #FALSE# Container:ODIE_C Id
:3 16-08-01 05:00:06 Proc:1 ====


SQL>   2  
Session altered.

SQL>   2  
Session altered.

SQL> 
Session altered.

old   1: SELECT '&logfiledir' || '/bootstrap_' ||
new   1: SELECT '/u01/app/grid/cfgtoollogs/sqlpatch/sqlpatch_99240_2016_08_01_16_59_54' || '/bootstrap_' ||

BOOTSTRAP_LOGFILE
--------------------------------------------------------------------------------
/u01/app/grid/cfgtoollogs/sqlpatch/sqlpatch_99240_2016_08_01_16_59_54/bootstrap_
_MGMTDB_ODIE_C.log


Starting bootstrap on 01-AUG-16 05.00.08.916274 PM +00:00


PL/SQL procedure successfully completed.

old  25:   IF &full_bootstrap THEN
new  25:   IF FALSE THEN
changing bundle_data to CLOB
recreating constraint
recreating view

PL/SQL procedure successfully completed.


SSS
--------------------------------------------------------------------------------
?/rdbms/admin/nothing.sql

(Re)creating dbms_qopatch package

PL/SQL procedure successfully completed.


Session altered.


Package created.


Session altered.


Session altered.


Package body created.

No errors.

Session altered.

(Re)creating dbms_sqlpatch package

PL/SQL procedure successfully completed.


Session altered.


Package created.

No errors.

Synonym created.


Grant succeeded.


Session altered.


Session altered.


Package body created.

No errors.

Session altered.


Session altered.

Finished bootstrap on 01-AUG-16 05.00.13.959928 PM +00:00

SQL> 
END_RUNNING
--------------------------------------------------------------------------------
==== @/u01/app/12.1.0.2/grid/sqlpatch/sqlpatch_bootstrap.sql #/u01/app/grid/cfgt
oollogs/sqlpatch/sqlpatch_99240_2016_08_01_16_59_54# #FALSE# Container:ODIE_C Id
:3 16-08-01 05:00:13 Proc:1 ====


SQL> 
END_RUNNING
--------------------------------------------------------------------------------
==== @/u01/app/12.1.0.2/grid/sqlpatch/sqlpatch_bootstrap.sql #/u01/app/grid/cfgt
oollogs/sqlpatch/sqlpatch_99240_2016_08_01_16_59_54# #FALSE# Container:ODIE_C Id
:3 16-08-01 05:00:13 Proc:1 ====


SQL> SQL> 
SQL>   2  
Session altered.

SQL> SQL> 
SQL>   2  
Session altered.

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2  
Session altered.

SQL> 
NOW_CONNECTED_TO
--------------------------------------------------------------------------------
==== Current Container = ODIE_C Id = 3 ====

SQL> 
NOW_CONNECTED_TO
--------------------------------------------------------------------------------
==== Current Container = ODIE_C Id = 3 ====

SQL>   2  
CATCONSECTION
-----------------------------------
==== CATCON EXEC IN CONTAINERS ====

SQL> 
BEGIN_RUNNING
--------------------------------------------------------------------------------
==== BEGIN dbms_sqlpatch.session_initialize(#/u01/app/12.1.0.2/grid#, FALSE, FAL
SE) ; END; Container:ODIE_C Id:3 16-08-01 05:01:19 Proc:1 ====


SQL> 
BEGIN_RUNNING
--------------------------------------------------------------------------------
==== BEGIN dbms_sqlpatch.session_initialize(#/u01/app/12.1.0.2/grid#, FALSE, FAL
SE) ; END; Container:ODIE_C Id:3 16-08-01 05:01:19 Proc:1 ====


SQL>   2  
Session altered.

SQL>   2  
Session altered.

SQL>   2  
PL/SQL procedure successfully completed.

SQL> 
END_RUNNING
--------------------------------------------------------------------------------
==== BEGIN dbms_sqlpatch.session_initialize(#/u01/app/12.1.0.2/grid#, FALSE, FAL
SE) ; END; Container:ODIE_C Id:3 16-08-01 05:01:19 Proc:1 ====


SQL> 
END_RUNNING
--------------------------------------------------------------------------------
==== BEGIN dbms_sqlpatch.session_initialize(#/u01/app/12.1.0.2/grid#, FALSE, FAL
SE) ; END; Container:ODIE_C Id:3 16-08-01 05:01:19 Proc:1 ====


SQL>   2  
CATCONSECTION
-----------------------------------
==== CATCON EXEC IN CONTAINERS ====

SQL> 
BEGIN_RUNNING
--------------------------------------------------------------------------------
==== @/u01/app/12.1.0.2/grid/sqlpatch/21359755/19194568/21359755_apply.sql ##Dat
abase Patch Set Update : 12.1.0.2.5 (21359755)## #/u01/app/grid/cfgtoollogs/sqlp
atch/21359755/19194568/# #NB# #PSU# Container:ODIE_C Id:3 16-08-01 05:01:19 Proc
:1 ====


SQL> 
BEGIN_RUNNING
--------------------------------------------------------------------------------
==== @/u01/app/12.1.0.2/grid/sqlpatch/21359755/19194568/21359755_apply.sql ##Dat
abase Patch Set Update : 12.1.0.2.5 (21359755)## #/u01/app/grid/cfgtoollogs/sqlp
atch/21359755/19194568/# #NB# #PSU# Container:ODIE_C Id:3 16-08-01 05:01:19 Proc
:1 ====


SQL>   2  
Session altered.

SQL>   2  
Session altered.

SQL> old   1: SELECT '&logfiledir' || '21359755_apply_' ||
new   1: SELECT '/u01/app/grid/cfgtoollogs/sqlpatch/21359755/19194568/' || '21359755_apply_' ||

SQLPATCH_LOGFILE
--------------------------------------------------------------------------------
/u01/app/grid/cfgtoollogs/sqlpatch/21359755/19194568/21359755_apply__MGMTDB_ODIE
_C_2016Aug01_17_01_19.log


Starting apply for patch 21359755/19194568 on 01-AUG-16 05.01.19.542390 PM +00:0
0


old   4:				    p_flags	    => '&flags',
new   4:				    p_flags	    => 'NB',
old   5:				    p_description   => '&description',
new   5:				    p_description   => 'Database Patch Set Update : 12.1.0.2.5 (21359755)',
old   7:				    p_logfile	    => '&full_logfile',
new   7:				    p_logfile	    => '/u01/app/grid/cfgtoollogs/sqlpatch/21359755/19194568/21359755_apply__MGMTDB_ODIE_C_2016Aug01_17_01_19.log',
old   8:				    p_bundle_series => '&bundle_series');
new   8:				    p_bundle_series => 'PSU');

PL/SQL procedure successfully completed.


Session altered.

Calling rdbms/admin/bug20876308_apply.sql on 01-AUG-16 05.01.20.640443 PM +00:00

IGNORABLE ERRORS: NONE

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/bug20876308_apply.sql

SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> 
SQL> create or replace view USER_AUDIT_POLICIES (OBJECT_NAME,
  2                          POLICY_NAME, POLICY_TEXT, POLICY_COLUMN, PF_SCHEMA,
  3                          PF_PACKAGE, PF_FUNCTION, ENABLED,
  4                          SEL, INS, UPD, DEL, AUDIT_TRAIL,
  5                          POLICY_COLUMN_OPTIONS)
  6  as
  7  SELECT OBJECT_NAME, POLICY_NAME, POLICY_TEXT,  POLICY_COLUMN,
  8         PF_SCHEMA, PF_PACKAGE, PF_FUNCTION, ENABLED,
  9         SEL, INS, UPD, DEL, AUDIT_TRAIL, POLICY_COLUMN_OPTIONS
 10  FROM DBA_AUDIT_POLICIES
 11  WHERE OBJECT_SCHEMA = SYS_CONTEXT('USERENV','CURRENT_USER')
 12  /

View created.

SQL> 
SQL> create or replace view USER_AUDIT_POLICY_COLUMNS(OBJECT_SCHEMA, OBJECT_NAME,
  2                          POLICY_NAME, POLICY_COLUMN)
  3  as
  4  select OBJECT_SCHEMA, OBJECT_NAME,
  5         POLICY_NAME, POLICY_COLUMN
  6  from DBA_AUDIT_POLICY_COLUMNS
  7  WHERE OBJECT_SCHEMA = SYS_CONTEXT('USERENV','CURRENT_USER')
  8  /

View created.

SQL> 
SQL> CREATE OR REPLACE VIEW user_scheduler_job_log
  2    ( LOG_ID, LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, JOB_CLASS, OPERATION, STATUS,
  3      USER_NAME, CLIENT_ID, GLOBAL_UID, CREDENTIAL_OWNER, CREDENTIAL_NAME,
  4      DESTINATION_OWNER, DESTINATION, ADDITIONAL_INFO)
  5    AS
  6    (SELECT
  7       LOG_ID, LOG_DATE, OWNER,
  8       DECODE(instr(e.NAME,'"'),0, e.NAME,substr(e.NAME,1,instr(e.NAME,'"')-1)),
  9       DECODE(instr(e.NAME,'"'),0,NULL,substr(e.NAME,instr(e.NAME,'"')+1)),
 10       co.NAME, OPERATION,e.STATUS, USER_NAME, CLIENT_ID, GUID,
 11       decode(e.credential, NULL, NULL,
 12          substr(e.credential, 1, instr(e.credential, '"')-1)),
 13       decode(e.credential, NULL, NULL,
 14          substr(e.credential, instr(e.credential, '"')+1,
 15             length(e.credential) - instr(e.credential, '"'))),
 16       decode(bitand(e.flags, 1), 0, NULL,
 17          substr(e.destination, 1, instr(e.destination, '"')-1)),
 18       decode(bitand(e.flags, 1), 0, e.destination,
 19          substr(e.destination, instr(e.destination, '"')+1,
 20             length(e.destination) - instr(e.destination, '"'))),
 21       ADDITIONAL_INFO
 22    FROM scheduler$_event_log e, obj$ co
 23    WHERE e.type# = 66 and e.dbid is null and e.class_id = co.obj#(+)
 24    AND owner = SYS_CONTEXT('USERENV','CURRENT_USER'))
 25  /

View created.

SQL> 
SQL> CREATE OR REPLACE VIEW user_scheduler_job_run_details
  2    ( LOG_ID, LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, STATUS, ERROR#, REQ_START_DATE,
  3      ACTUAL_START_DATE, RUN_DURATION, INSTANCE_ID, SESSION_ID, SLAVE_PID,
  4      CPU_USED, CREDENTIAL_OWNER, CREDENTIAL_NAME, DESTINATION_OWNER,
  5      DESTINATION, ADDITIONAL_INFO, ERRORS, OUTPUT, BINARY_ERRORS, BINARY_OUTPUT)
  6    AS
  7    (SELECT
  8       j.LOG_ID, j.LOG_DATE, e.OWNER,
  9       DECODE(instr(e.NAME,'"'),0, e.NAME,substr(e.NAME,1,instr(e.NAME,'"')-1)),
 10       DECODE(instr(e.NAME,'"'),0,NULL,substr(e.NAME,instr(e.NAME,'"')+1)),
 11       e.STATUS, j.ERROR#, j.REQ_START_DATE, j.START_DATE, j.RUN_DURATION,
 12       j.INSTANCE_ID, j.SESSION_ID, j.SLAVE_PID, j.CPU_USED,
 13       decode(e.credential, NULL, NULL,
 14          substr(e.credential, 1, instr(e.credential, '"')-1)),
 15       decode(e.credential, NULL, NULL,
 16          substr(e.credential, instr(e.credential, '"')+1,
 17             length(e.credential) - instr(e.credential, '"'))),
 18       decode(bitand(e.flags, 1), 0, NULL,
 19          substr(e.destination, 1, instr(e.destination, '"')-1)),
 20       decode(bitand(e.flags, 1), 0, e.destination,
 21          substr(e.destination, instr(e.destination, '"')+1,
 22             length(e.destination) - instr(e.destination, '"'))),
 23       j.ADDITIONAL_INFO,
 24       dbms_scheduler.get_varchar2_value(o.errors),
 25       dbms_scheduler.get_varchar2_value(o.output),
 26       o.ERRORS, o.OUTPUT
 27     FROM scheduler$_job_run_details j, scheduler$_event_log e,
 28       scheduler$_job_output o
 29     WHERE j.log_id = e.log_id AND j.log_id = o.log_id(+)
 30     AND e.dbid is null
 31     AND e.type# = 66
 32     AND e.owner = SYS_CONTEXT('USERENV','CURRENT_USER'))
 33  /

View created.

SQL> 
SQL> CREATE OR REPLACE VIEW all_scheduler_job_log
  2    ( LOG_ID, LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, JOB_CLASS, OPERATION, STATUS,
  3      USER_NAME, CLIENT_ID, GLOBAL_UID, CREDENTIAL_OWNER, CREDENTIAL_NAME,
  4      DESTINATION_OWNER, DESTINATION, ADDITIONAL_INFO)
  5    AS
  6    (SELECT
  7       e.LOG_ID, e.LOG_DATE, e.OWNER,
  8       DECODE(instr(e.NAME,'"'),0, e.NAME,substr(e.NAME,1,instr(e.NAME,'"')-1)),
  9       DECODE(instr(e.NAME,'"'),0,NULL,substr(e.NAME,instr(e.NAME,'"')+1)),
 10       co.NAME, OPERATION, e.STATUS, e.USER_NAME, e.CLIENT_ID, e.GUID,
 11       decode(e.credential, NULL, NULL,
 12          substr(e.credential, 1, instr(e.credential, '"')-1)),
 13       decode(e.credential, NULL, NULL,
 14          substr(e.credential, instr(e.credential, '"')+1,
 15             length(e.credential) - instr(e.credential, '"'))),
 16       decode(bitand(e.flags, 1), 0, NULL,
 17          substr(e.destination, 1, instr(e.destination, '"')-1)),
 18       decode(bitand(e.flags, 1), 0, e.destination,
 19          substr(e.destination, instr(e.destination, '"')+1,
 20             length(e.destination) - instr(e.destination, '"'))),
 21       e.ADDITIONAL_INFO
 22     FROM scheduler$_event_log e, obj$ co
 23     WHERE e.type# = 66 and e.dbid is null and e.class_id = co.obj#(+)
 24     AND ( e.owner = SYS_CONTEXT('USERENV','CURRENT_USER')
 25           or  /* user has object privileges */
 26              ( select jo.obj# from obj$ jo, user$ ju where
 27                DECODE(instr(e.NAME,'"'),0, e.NAME,substr(e.NAME,1,instr(e.NAME,'"')-1)) = jo.name
 28                  and e.owner = ju.name and jo.owner# = ju.user#
 29                  and jo.subname is null and jo.type# = 66
 30              ) in
 31              ( select oa.obj#
 32                  from sys.objauth$ oa
 33                  where grantee# in ( select kzsrorol from x$kzsro )
 34              )
 35           or /* user has system privileges */
 36              (exists ( select null from v$enabledprivs
 37                         where priv_number = -265 /* CREATE ANY JOB */
 38                     )
 39               and e.owner!='SYS')
 40          )
 41    )
 42  /

View created.

SQL> 
SQL> CREATE OR REPLACE VIEW all_scheduler_job_run_details
  2    ( LOG_ID, LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, STATUS, ERROR#, REQ_START_DATE,
  3      ACTUAL_START_DATE, RUN_DURATION, INSTANCE_ID, SESSION_ID, SLAVE_PID,
  4      CPU_USED, CREDENTIAL_OWNER, CREDENTIAL_NAME, DESTINATION_OWNER,
  5      DESTINATION, ADDITIONAL_INFO, ERRORS, OUTPUT, BINARY_ERRORS, BINARY_OUTPUT)
  6    AS
  7    (SELECT
  8       j.LOG_ID, j.LOG_DATE, e.OWNER,
  9       DECODE(instr(e.NAME,'"'),0, e.NAME,substr(e.NAME,1,instr(e.NAME,'"')-1)),
 10       DECODE(instr(e.NAME,'"'),0,NULL,substr(e.NAME,instr(e.NAME,'"')+1)),
 11       e.STATUS, j.ERROR#, j.REQ_START_DATE, j.START_DATE, j.RUN_DURATION,
 12       j.INSTANCE_ID, j.SESSION_ID, j.SLAVE_PID, j.CPU_USED,
 13       decode(e.credential, NULL, NULL,
 14          substr(e.credential, 1, instr(e.credential, '"')-1)),
 15       decode(e.credential, NULL, NULL,
 16          substr(e.credential, instr(e.credential, '"')+1,
 17             length(e.credential) - instr(e.credential, '"'))),
 18       decode(bitand(e.flags, 1), 0, NULL,
 19          substr(e.destination, 1, instr(e.destination, '"')-1)),
 20       decode(bitand(e.flags, 1), 0, e.destination,
 21          substr(e.destination, instr(e.destination, '"')+1,
 22             length(e.destination) - instr(e.destination, '"'))),
 23       j.ADDITIONAL_INFO,
 24       dbms_scheduler.get_varchar2_value(o.errors),
 25       dbms_scheduler.get_varchar2_value(o.output),
 26       o.ERRORS, o.OUTPUT
 27     FROM scheduler$_job_run_details j, scheduler$_event_log e,
 28       scheduler$_job_output o
 29     WHERE j.log_id = e.log_id AND j.log_id = o.log_id(+)
 30     AND e.type# = 66 and e.dbid is null
 31     AND ( e.owner = SYS_CONTEXT('USERENV','CURRENT_USER')
 32           or  /* user has object privileges */
 33              ( select jo.obj# from obj$ jo, user$ ju where
 34                  DECODE(instr(e.NAME,'"'),0, e.NAME,substr(e.NAME,1,instr(e.NAME,'"')-1)) = jo.name
 35                  and e.owner = ju.name and jo.owner# = ju.user#
 36                  and jo.subname is null and jo.type# = 66
 37              ) in
 38              ( select oa.obj#
 39                  from sys.objauth$ oa
 40                  where grantee# in ( select kzsrorol from x$kzsro )
 41              )
 42           or /* user has system privileges */
 43              (exists ( select null from v$enabledprivs
 44                         where priv_number = -265 /* CREATE ANY JOB */
 45                     )
 46               and e.owner!='SYS')
 47          )
 48    )
 49  /

View created.

SQL> 
SQL> alter view USER_AUDIT_POLICIES compile;

View altered.

SQL> alter view USER_AUDIT_POLICY_COLUMNS compile;

View altered.

SQL> alter view user_scheduler_job_log compile;

View altered.

SQL> alter view user_scheduler_job_run_details compile;

View altered.

SQL> alter view all_scheduler_job_log compile;

View altered.

SQL> alter view all_scheduler_job_run_details compile;

View altered.

SQL> 
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling olap/admin/xoqclnup.sql on ' || SYSTIMESTAMP FROM dual;
Calling olap/admin/xoqclnup.sql on 01-AUG-16 05.01.21.672257 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: ORA-01432 ORA-00942 ORA-02289
IGNORABLE ERRORS: ORA-01432 ORA-00942 ORA-02289
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('olap/admin/xoqclnup.sql') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/nothing.sql

1 row selected.

SQL> @@&sql_script
SQL> Rem $Header: rdbms/admin/nothing.sql /st_rdbms_12.1/1 2014/06/03 11:24:49 aketkar Exp $
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/nothing.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/nothing.sql
SQL> Rem SQL_PHASE: NOTHING
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: NONE
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling rdbms/admin/prvtpckl.plb on ' || SYSTIMESTAMP FROM dual;
Calling rdbms/admin/prvtpckl.plb on 01-AUG-16 05.01.21.679034 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: NONE
IGNORABLE ERRORS: NONE
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('rdbms/admin/prvtpckl.plb') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/prvtpckl.plb

1 row selected.

SQL> @@&sql_script
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace library SYS.DBMS_PICKLER_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  2b 61
 21  aAn+BI9qqDtarCwYQNuFQC2dGnQwg04I9Z7AdBjDuFKbskoopfUzM1KyGP4I9QnnvZ6yy1Iy
 22  zKV0K+fLUnQI9cmmpst5mfw=
 23  
 24  /

Library created.

SQL> create or replace package dbms_pickler wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  5dc 1e6
 21  OAAO6uy6F/g26TEJxQEJHBJ+ESYwg0NeAK5qfC8BuWRTLY3FOTzcH8HxVDKKfX7E/JH00Pv7
 22  06y1ljjGUBRjkw5ZVCtRThA0v66/pBhiPDb+xJa77oEIuSk67rIaTFZoa+9aT6n/UnDlrKV+
 23  soCWopnCDYhEow/StTq06UMNuCURTfoCl7hty6dc3t0wW1/4XHS/QSqOCe8srHdKJxhYpmqQ
 24  K/pQsmBvDNWrJ/OfhVE1vJNJh6sFs4RHckkjX1aduLFL72EmkSN1rGQHbiUzPwH1kAN3+tnF
 25  +0egpZmDHzhMFl5uOHquMNg6aKTsm0z0Sqz2tM5FoYSm2UoKPnK2So8JeD4GhTOK93nssw9p
 26  QbG8m/Js2vwuygPxnD0QdW8mO4TNFG8YyanYu+MSP8lk9LDM7yCuv/x6PIWZ1SO/k6Df9Ql+
 27  lAiBvjIchKriu3GL/nP5MVO17V1Cd7WcaBrZoffXPVufejDx
 28  
 29  /

Package created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_pickler FOR sys.dbms_pickler
  2  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_pickler TO PUBLIC
  2  /

Grant succeeded.

SQL> create or replace package body dbms_pickler wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  37ad d09
 21  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
 67  
 68  /

Package body created.

SQL> show errors;
No errors.
SQL> begin
  2    execute immediate 'revoke execute on dbms_java_test from PUBLIC';
  3  exception when others
  4    then null;
  5  end;
  6  /

PL/SQL procedure successfully completed.

SQL> create or replace package dbms_java_test wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  2e60 1a1
 21  B2Rm0P1PcoDMwbdCpBaTSvF2YfEwg83smMusZy/pO3MYPiprac/GJwKB9BG0PadwoH8tFc5z
 22  q5n9tu0Rz+5jZhN2cBe53p911SBROaM8CkyrILeE07t4KYdg6BYlD0ZBpNcVTvCe4T5CN2Vg
 23  p8WbQMXApFgn2m46nALCooPRUaXCUBBdPv+9RapY/LAPmeG5chBJ53ebnX8vTQPT6o2mNzkM
 24  /s8pZw76o6oOPMpQ4Mc/a63KUMl4xzEuL31Lc36qp9RcBAQ5iy3dDqKN8wvbGZR/ibiI8kCb
 25  EoT003qeC1/HlAuJj/pJ1rXBr4C9QfVelOXxzJSJjxHWwMzinNkC03bJzID8zgJ7UTbBnI51
 26  4cHmcImPR+yXXjokXBwyu4uqnnvSlbsuLnorDJS6eX7EuDZDbHKs
 27  
 28  /

Package created.

SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_java_test FOR sys.dbms_java_test
  2  /

Synonym created.

SQL> create or replace package body dbms_java_test wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  63c5 4f5
 21  BffvCpTdZTFoT3O1HqWf7nN37eUwg81xDK6GfARogp0VBjYJKDrx0mzcSCfyp8hR20NSGLSx
 22  OA+jvZ+qtUAl4Arx9gs4fQsjZy57tvE65NeiO5AMQZBO9HCMKc6nEDrSHrw6P/674kLOI7Xd
 23  m5KpLeuTWPrPo8JfH+leDNFO2DqFZDDHqF0x9UdKo1Dr1dUwTAPVhwEXNBjafvswGQh0XT0a
 24  +ugDCcLMh5v8YfoMPhtRCePsQd5+Vtw62MjYbpQCQOM749sYWjvj4pSzA2aSK9vdGASj844x
 25  qJ9c+tHVMTJsmEuR6qeKJfFMusJtDJ8yC9ZFxtjTwCuN/OtCseP9PuXxH80F8Q/nn87BTtBP
 26  mvn5IpGKe5wXVhNh7/lgYSwPm+VEoH3spGIz5aqYV5+ol6EM5YDeF77VlsZC1EOg7LtM3q+j
 27  K0KtKVZhdFDpv9EtbS4dVDKK5BR36PuaM7ub3c26thYrDrTn8o4Wf6wJRPLwDuLhMvAOQeGB
 28  Xw684YHwDjfhsl8Oa+Gy1+Bg7Oz3iOhtSCuQITH62NreFbeTQiUaSQMzGvSuyYGht09Hkrcr
 29  pmXqqaDTyL45GpQ3R1zjDcXb1VxXIhabzD1giP3Q0fyLZXL/mcwqzf+3HQCiLJqgrYNhkpLY
 30  IbSXWlmbwDr3qMhPy+164AfpxklZiQudTmmcnbljY4HVQVcAp4Yurhn3LwdTg84IJ1XccIH1
 31  37rvgObT5nfbD8OWK8ILY7gUGqgnnLwyzTRUKbzqaPdQsn+iRQV/ojRUTHTYH8tWgOaW21qK
 32  zZta0uCBfD+E0A+A5iTbqbsL3WQ8lW09gBN+cRNX0zmokiepvCOQvJvgslDwBZrwSkY44zOk
 33  URCaAxDtVIQhcxzf7fbuUcoPeYCl9M1OvZZv6UsftG3W7VNlFeQ8YHwa7X8UJKuvxo8LNc9H
 34  jfNdv78Y7s+4vIHvPdBvanw4df3gdeJfygO4FjeVFeDWVNgsYjeCaljEPFhMiDXJQ8yelgec
 35  IPGc+LN8ILbzS67zj5fnZa6cReeyRtTLRkAssl6+9yqF7DKThpfnZb9PfEIsKaDGKV2AapLL
 36  RqvmzTKE143zkekoOKEo4C9/ziUE0ow4MR8ltik6GSkpl+fCJdBLdyhCbTQQjDSBjDgAFuCr
 37  f+0Qf82X58I5dUvnBK9KcJqKcP6MOCZXuVu4JEso/h3i7R9dCKZ/HCip2udoNYpdpEYP6goH
 38  WqCqT0F/Iv4oPidCm+4kqc5WiA==
 39  
 40  /

Package body created.

SQL> declare
  2    cursor c is select d.obj# from obj$ p,obj$ d,dependency$
  3                  where p_obj#=p.obj# and d_obj#=d.obj# and d.status!=1 and
  4                  p.name in ('DBMS_PICKLER_LIB','DBMS_PICKLER','DBMS_JAVA_TEST');
  5    objn number;
  6  begin
  7    open c;
  8    loop
  9      fetch c into objn;
 10      exit when c%NOTFOUND;
 11      begin
 12        execute immediate 'begin dbms_utility.validate('||objn||');end;';
 13      exception when others
 14        then null;
 15      end;
 16    end loop;
 17    close c;
 18  end;
 19  /

PL/SQL procedure successfully completed.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling rdbms/admin/bug19532017_upgrade.sql on ' || SYSTIMESTAMP FROM dual;
Calling rdbms/admin/bug19532017_upgrade.sql on 01-AUG-16 05.01.22.123123 PM +00:
00


1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: ORA-00955
IGNORABLE ERRORS: ORA-00955
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('rdbms/admin/bug19532017_upgrade.sql') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/bug19532017_upgrade.sql

1 row selected.

SQL> @@&sql_script
SQL> Rem
SQL> Rem $Header: rdbms/admin/bug19532017_upgrade.sql /st_rdbms_12.1.0.2.0dbpsu/2 2015/02/03 20:59:50 sschodav Exp $
SQL> Rem
SQL> Rem bug19532017_upgrade.sql
SQL> Rem
SQL> Rem Copyright (c) 2014, 2015, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      bug19532017_upgrade.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/bug19532017_upgrade.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/bug19532017_upgrade.sql
SQL> Rem    SQL_PHASE: CATLMNR
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: ORA-00955
SQL> Rem    SQL_CALLING_FILE: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sschodav    02/03/15 - Backport
SQL> Rem                           sschodav_ci_backport_20425790_12.1.0.2.5dbbp from
SQL> Rem                           st_rdbms_12.1.0.2.0dbbp
SQL> Rem    sschodav    01/29/15 - Backport sschodav_bug-20425790 from
SQL> Rem                           st_rdbms_12.1.0.2.0dbbp
SQL> Rem    sschodav    01/29/15 - create index can cause ORA-00439 while creating
SQL> Rem                           index
SQL> Rem    abrown      09/23/14 - For abrown_ci_backport_19532017_12.1.0.2.2dbbp,
SQL> Rem                           just do create index.
SQL> Rem    abrown      09/23/14 - Created
SQL> Rem
SQL> 
SQL> SET ECHO ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> alter session set events '14524 trace name context forever, level 1';

Session altered.

SQL> 
SQL> CREATE INDEX SYSTEM.LOGMNR_I3CDEF$
  2      ON SYSTEM.LOGMNR_CDEF$ (LOGMNR_UID, OBJ#)
  3      TABLESPACE SYSAUX LOCAL LOGGING
  4  /

Index created.

SQL> 
SQL> alter session set events '14524 trace name context off';

Session altered.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling rdbms/admin/prvtlmd.plb on ' || SYSTIMESTAMP FROM dual;
Calling rdbms/admin/prvtlmd.plb on 01-AUG-16 05.01.22.229533 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: NONE
IGNORABLE ERRORS: NONE
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('rdbms/admin/prvtlmd.plb') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/prvtlmd.plb

1 row selected.

SQL> @@&sql_script
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE OR REPLACE PACKAGE sys.dbms_logmnr_internal wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  3f24 e4e
 21  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
 71  +aUgsFmlZA==
 72  
 73  /

Package created.

SQL> show errors
No errors.
SQL> /

Package created.

SQL> CREATE OR REPLACE LIBRARY sys.dbms_logmnr_lib wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  2b 61
 21  PL7wiAU8rbV72QNy4apZ4KPeQFcwg04I9Z7AdBjDWqGXYkpy+q5y19UYcvpZCee9nrLLUjLM
 22  pXQr58tSdAj1YcmmpgAushg=
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE PACKAGE BODY sys.dbms_logmnr_internal wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  4d04a fcaa
 21  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
907  Q1Q=
908  
909  /

Package body created.

SQL> show errors
No errors.
SQL> grant analyze any to sys;

Grant succeeded.

SQL> CREATE or REPLACE PACKAGE BODY dbms_logmnr_d wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  1ba4 8f3
 21  X+J5NKOxu2j+xEOJeTolNDbzAmkwg0OTHiAF3y+aF3OU6tvWed2CBhRiPEIcygyg2WAo6hol
 22  XbePVrkvynkY24jfDqrkuRbyGhxhlCEdOUfRcew02hmGvyiV1bHav5x0iy2qRHixTywDmPgk
 23  IqpChUh26ldKA/Lg0DreFaaLPijPWydkN3IA+oaFLuLCRChUXUB0MDYfSAbtx7e2pTEVLh29
 24  c/lNr3Rvxy8S0TuYgsbVUR/bL2PubmxsOghQ7uGI5CF0ZMJXjRZzCxs0rLj8RzHxgKJ/KEQc
 25  0WoW+jAUk9O+rwQfWMJh11PzISopcCsf33lpsP38p7Kwy23kJgO1ARU+dUca2ih1VL4c/Wfb
 26  IqOazcp0N7bTNCHzUuEYG+sPibdEmXVJNRgtGO2Ovpwl5Pbkf2awJdzYvVqsg3/J1IYw+fnn
 27  pe8oL/PV/+9iypo9dEHVLy1xRfckZ94LoCeV00IqrLd4SbcDA6jPz8Zmc0QUO0nd4ZF7OfXT
 28  Ngh2vigM2gCz8dyuoxrYaKJmE/HCWgbIoLs1X6eZp9LKpPdjAJLdjd1ErW1da/4N1eE//w5P
 29  arvGIg45YQyOoY7ZnliKWsRoNf4eIETpQDmPy+C8v8jDfKgv7Ae9XIOPRTV1S3ynWUS2ONZC
 30  BDairEn70P9O5ThhssFnhhE5EFJskqlNCopabzMHgdmOdcldks+TJP/3KoShjgqDrVKha84C
 31  o8PcujfA30ISnyNfUxOvLdw1kKjnKpbLGM+IXaaxXBFU+ix65cFbyva8B5mSnUoNOhLp64wo
 32  mXEWoRJnmuoNmna35OjWEeqHO7TzXDevkcBlrPpdjplZOI7Qz58xlegjLmcJMXwlcdgd2XMM
 33  mCdHmsftrrGLE3rqExZt8bPS8HaNDEgBbBgp+yD6oQlInZqXxyJBxoDwC0hKE4dDEmdcj7jo
 34  Y13O5Bl6j3sYZMmlA70cjWK22l5xa000ARGXy3xlAr7nA17G4nZt9eJTfayfS5fsAw2SixVv
 35  qh8mJ/ZF71ZkyadBLuxoiIJ1NHmtVomwq0aNifxQdybO2J4j/ULNKc9QLJ709eMRcYhypY0V
 36  PNjhuaREy97eAuwJMfKnjUGHQCClkjBXYyG2LKxZhWnstwOGC3pq77H+A6m+ItCnWB8Ha222
 37  OF/986Qj91Yb2A+bnoDJ5UrKZZ/6AjafKX8q7S9zxVKcFmtoavoY2TWNCzYkLtwPnaiVyIyB
 38  D4WckwT4RyuVdHyK8UJYu1sdqEw2JISkHoSZK/YAizdmrmxFeHRYcvcddIybZyZ5GZsLfs70
 39  aXkPCE4Cs7BoNrKOMvsuOSN4Ur5wI/0Sdg9Nmbh6hJh2ABJ7kVM5bR+w93ZZaSla1F1IsKmX
 40  6dCATRddf9YvJdqUif60qmYJ1TWEko5vd/GsAjXFjVYN1FBiaGcp6UU8cpHx5YzmDxJ+NiN4
 41  +0BxJz+fRCuWrcmzB44Sz2BwLMPBoSccFlEygzyacreZHFpRXvk+ODgJ5e5jaOnZbYcy8szO
 42  oq50SiYUylVQolnp6DmHpHYB39EfQ4kTfNB8XIhC1lcr+hibDFEtHEQpRfS+Cll40rbtGDa5
 43  ZLthE1u04mS731AHIJqXRxkpLseNPYhcIQeFKHMIx5VUc8SOXvxbT7u1aF2SAD9MtUHVMdOq
 44  RYia62Y1X87PFUAY2uXLPrHyhVVzKnQOJD1G1yeRN+rtb8lhJczlLqOnxhhme1bWW6PuiwBC
 45  HLTyu+rPkYlhxxCWE2wwFxpfeQsA+JQ3ZQa67RrrU3cHWUEVr6bdLxzE/ij9VCTgyvxrIEIc
 46  VTdAOO4ozZmNnXCU9hAKxed7SkIXPTigBYqvyoMzfdhFc8ADOgoLK40f0ArvwU622fGRQHdg
 47  4GujKBMesAWYE2r6Ywu0i1d8PdsYuIy9DVfGiXbO0D12XPVISCRzsngTrh6wmGLYxAUHBR6w
 48  zYstAwOfalZb7KsQKv/Yf1M4JhxGKLWUOYNfEm8F4gagJCMzlJaOnR/na96kD7EoBQXNzXOc
 49  uYNvLYgfhpv//XsOryM5e2iNDiVuT7FNRWEKH/ajckhMcidwzXnY9oISN6c8LS3NESCWGV1F
 50  DXsF3qZK6zW3sGR4Hs05+WdXO7ubQQ1CigXdVUzOzey1nYprtQmMTTP0GIQecrUqCr9dJ3hy
 51  vBognZqYM1/CAxi7YgaLUXONNJoAo6QDazLKwtRQl4jt/iSbLCNULh2BXVQiisEknfUwl1xf
 52  0vYuzYAEgZwLg2FEzuss+fuRKW5Z
 53  
 54  /

Package body created.

SQL> show errors
No errors.
SQL> grant execute on dbms_logmnr_d to execute_catalog_role
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PROCEDURE logmnr_krvrdluid3 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  c966 329d
 21  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
198  e/UWJAk3P4nbhQ8GeAimvZtTtQ+1KHU5uoo=
199  
200  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE
  2  PROCEDURE logmnr_krvrdrepdict3 wrapped
  3  a000000
  4  1
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  abcd
 20  7
 21  53c 2ee
 22  7YcIqeTqFGOXZvuqxQ5PXFW2I+IwgwLDTCCDfI5Vgp0GIsOeEZNc2xryAZBdtB9L/LRYJA4Q
 23  wugV36DmsNhMD5KGF9MdoUBF+I+FvMbBP24ejqPMkdzveno/mn4MtQPkXtHZPWRDkvned7s1
 24  fGvovncZUou+dPgn99FyabCUZ+9eGf8h8asIKKZsTkDyT/NO33BrbdFwUIboFSGbtPiP/KvR
 25  1A2cewBGEQ14e6Cjad7uGtC+ep1Ofsa06IoBV0PC4YFRpKw2NtnAhtcfUuKeiSJuq5Q+KEGs
 26  EdZz/GBMC7HxmgoHPXO2tE4LOEk3pTvPaKm+gvMW2K6PgQ2MDFdaNGwxiLTrVpYkK0PllLLi
 27  7sWX+TSHkoFvvEicaSK8fk94r3hZ3Ek/FlI/vdbcPYgo8v/0ixS2tGQYBxqkFKEFWL8+BNxT
 28  oq6NuL5fjmqLkDCo/IPDHSD3e7rG8BYiN6jPks/bWVAlWCicLrId2oQxHsNgAmUEMnnCAr1p
 29  Qv/NP7C9eOcJQmBWCLZDFP27W3tGucMrnI6D73a8zLSqA7TBUKtyI79u06qMwez0Z9r8SQIv
 30  VtJzZgDcz4K4g0IVsDJkO3On6//rpF+o6A26cfOSrJgaVovwr9odH+8EoHzzkScVND2aKMhS
 31  DBQe6gWO0VulHCJgzuBA7upDg4Jo7OhIB6Wn4Di+8bgayA6sfYPDJbtyDdNm79LobHlwtD4x
 32  ik3UrFIngIa/qvtl8CQO
 33  
 34  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE dbms_logmnr_ffvtologmnrt wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  6ca6 18ff
 21  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
109  
110  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE logmnr_krvrda_test_apply wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  4a1 284
 21  eLkbCN7twvLblQcYhcJAXOQTAhYwg41eLq79fy/NrZ3gy3bxnwLxqU3hGvG/AMiUmJ9L7UZu
 22  VhorAIlhFsoU+RDGLB4u5iuUItiKEE7UgnJOp/Jvhf0Cpc7+wbsk/fj2TkU6+XAPP3qdtAew
 23  sMbE7qYOjo004gIn8twSLy6QjJd6Dpn3grKmW6mNoxymjsDebxidWxazO1fbhZOHVdKm9tb4
 24  qX50utEKKs55NmD1q89wfy5YR/KrQmUCS54+oDhR1+fBx1eQ/9wXFw+wAwNtYR4EduBomuxV
 25  sJqkx4rKJfuIxDSHuzXWdmQM9wklcmGJcpBhD/H5oqZQVDg45BBq0atExD4iHON/ZuL3Ld9m
 26  Dz6TmOGBo/3Y0GoSuodvQKPfMKKoCkTFsDLbaHxHxIBqH8yHlfGdDRATREWZWhCpO8Rrpxvc
 27  4dj1BnH5T4JKdnSluZuyNpRXb/GGS8jwfITiScZIin5QEomvV9a9EIyezUQiN+pRrjkOwyLF
 28  4+7TIPotClt8r1vIPIfzIt9C7hAR/sOoeWj+OSMD15jutLKOv1xprxJWDEj9AmWsTiM+XbxW
 29  OnzMbkn4Pl3Z2AMRgFHWLI7FE0ACYUi2KjTMvxiC9mn9HixdBuskG6EvkA==
 30  
 31  /

Procedure created.

SQL> show errors;
No errors.
SQL> BEGIN
  2  
  3  
  4  
  5  
  6  
  7  
  8  execute immediate 'create or replace view dba_logmnr_purged_log as
  9    select distinct p.file_name from system.logmnr_log$ p
 10      where bitand(p.status, 2) = 2 and
 11      dbms_logmnr_internal.logmnr_krvicl(p.file_name) = 1 and
 12      (flags IS NULL or bitand(flags, 16) != 16)
 13    minus
 14    select distinct q.file_name from system.logmnr_log$ q
 15      where bitand(q.status, 2) <> 2';
 16  execute immediate 'create or replace public synonym dba_logmnr_purged_log
 17                     for dba_logmnr_purged_log';
 18  execute immediate 'grant select on dba_logmnr_purged_log
 19                     to select_catalog_role';
 20  END;
 21  /

PL/SQL procedure successfully completed.

SQL> execute CDBView.create_cdbview(false,'SYS','dba_logmnr_purged_log','cdb_logmnr_purged_log');

PL/SQL procedure successfully completed.

SQL> grant select on SYS.cdb_logmnr_purged_log to select_catalog_role
  2  /

Grant succeeded.

SQL> create or replace public synonym cdb_logmnr_purged_log for SYS.cdb_logmnr_purged_log
  2  /

Synonym created.

SQL> CREATE OR REPLACE PROCEDURE logmnr$alwayssuplog_proc wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  348a f10
 21  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
 74  
 75  /

Procedure created.

SQL> show errors
No errors.
SQL> CREATE OR REPLACE FUNCTION logmnr$alwsuplog_tabf_public wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  276 1d6
 21  MtZ/JBSqiJlMxuXjH2MKwNXoS4wwgxDMTAxqfI6Bvp0GInQ8FQRHgNkcJdKf8BqhU6HYEp4T
 22  DudeB3vk+OjNi8U/NuG+rcFBbhIJQpWQUJ6fliiucmS317mGzUvQ6TCafrtq+UtVABk17Ged
 23  VmQtODUtOe5A82SITP+P53srWnZLlnwM55BJRAlkq+m2G7phYTwTVFsMhWIEOGmeAmwEYFny
 24  iftcSY18uyfM4f6iTXGlbz7z3/vmHmOZb1UkwurZt2ROkreQyULhUTREQxPhPq6ecb2N9eGw
 25  ecxmv0uma265vlV56UU3EXt9BnsVYZ1+9hQ2VcUUVD/ZXybAXSd9iMhDV7xa+K/A9ust6AB5
 26  7P4ZPxPGyIspfdcxWjDfGNH9FMUuc3xSVlRHwRfP/w3qTN2DdIdFquElYhoXCau6A9Hapl+M
 27  Ml1UdMa3DYxkfVGe1B8JpeQGtpPpDmw=
 28  
 29  /

Function created.

SQL> show errors
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM LOGMNR$ALWAYS_SUPLOG_COLUMNS
  2  FOR logmnr$alwsuplog_tabf_public;

Synonym created.

SQL> GRANT EXECUTE ON LOGMNR$ALWAYS_SUPLOG_COLUMNS TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE VIEW LOGMNR$SCHEMA_ALLKEY_SUPLOG
  2  AS
  3  select name schema_name,
  4         (case when bitand(spare1, 64) = 64
  5              then 'YES' else 'NO' end) ALLKEY_SUPLOG,
  6         (case when bitand(spare1, 1024) = 1024
  7              then 'YES' else 'NO' end) ALLOW_NOVALIDATE_PK
  8  from user$
  9  where name in (select username from all_users);

View created.

SQL> CREATE OR REPLACE PUBLIC SYNONYM LOGMNR$SCHEMA_ALLKEY_SUPLOG
  2  FOR SYS.LOGMNR$SCHEMA_ALLKEY_SUPLOG;

Synonym created.

SQL> GRANT SELECT  ON LOGMNR$SCHEMA_ALLKEY_SUPLOG TO PUBLIC;

Grant succeeded.

SQL> create or replace procedure
  2  logmnr_rmt_bld wrapped
  3  a000000
  4  1
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  abcd
 20  7
 21  20b2 bb5
 22  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
 63  dFsF
 64  
 65  /

Procedure created.

SQL> show errors
No errors.
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling rdbms/admin/prvtpexei.plb on ' || SYSTIMESTAMP FROM dual;
Calling rdbms/admin/prvtpexei.plb on 01-AUG-16 05.01.23.243689 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: NONE
IGNORABLE ERRORS: NONE
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('rdbms/admin/prvtpexei.plb') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/prvtpexei.plb

1 row selected.

SQL> @@&sql_script
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace package body dbms_parallel_execute_internal wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  751e 1b43
 21  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
117  
118  /

Package body created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling rdbms/admin/prvtilm.plb on ' || SYSTIMESTAMP FROM dual;
Calling rdbms/admin/prvtilm.plb on 01-AUG-16 05.01.23.360592 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: NONE
IGNORABLE ERRORS: NONE
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('rdbms/admin/prvtilm.plb') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/prvtilm.plb

1 row selected.

SQL> @@&sql_script
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace package prvt_ilm wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  8010 1e3e
 21  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
127  lw==
128  
129  /

Package created.

SQL> show errors
No errors.
SQL> /

Package created.

SQL> create or replace package body prvt_ilm wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  4f638 10146
 21  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
923  ed1XkrVzqscuD8M=
924  
925  /

Package body created.

SQL> show errors;
No errors.
SQL> create or replace package body dbms_ilm wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  5211 12fa
 21  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
 87  C/kuotU+32d3TGOZhh2mL4ezmKzPCLC14TxR/rs=
 88  
 89  /

Package body created.

SQL> show errors
No errors.
SQL> /

Package body created.

SQL> create or replace package body dbms_ilm_admin wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  3aee b63
 21  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
 61  
 62  /

Package body created.

SQL> show errors
No errors.
SQL> /

Package body created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling rdbms/admin/utluppkg.sql on ' || SYSTIMESTAMP FROM dual;
Calling rdbms/admin/utluppkg.sql on 01-AUG-16 05.01.23.798970 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: NONE
IGNORABLE ERRORS: NONE
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('rdbms/admin/utluppkg.sql') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/utluppkg.sql

1 row selected.

SQL> @@&sql_script
SQL> Rem $Header: rdbms/admin/utluppkg.sql /st_rdbms_12.1.0.2.0dbpsu/2 2015/01/19 15:35:14 apfwkr Exp $
SQL> Rem
SQL> Rem utluppkg.sql
SQL> Rem
SQL> Rem Copyright (c) 2011, 2015, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      utluppkg.sql - Pre Upgrade Utility Package
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Procedures and functions used to perform checks on a database which
SQL> Rem      is getting ready to be upgrade.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This file contains both the package body and defintion.
SQL> Rem
SQL> Rem      The package has test types:
SQL> Rem         - initparams
SQL> Rem         - components
SQL> Rem         - resources
SQL> Rem         - pre-upgrade checks
SQL> Rem
SQL> Rem      which may or may not be requested by the user.
SQL> Rem      The output_<test-type> procedure will verify that the
SQL> Rem      init_<test-type> procedure has been called.
SQL> Rem
SQL> Rem      Any global variables will be initialized by
SQL> Rem      the init_package procedure.
SQL> Rem
SQL> Rem      When using 'TEXT' output without an output file,
SQL> Rem      the caller must turn off SERVER OUTPUT prior to calling
SQL> Rem      the _output routines.
SQL> Rem          SET SERVEROUTPUT ON FORMAT WRAPPED;
SQL> Rem          SET ECHO OFF FEEDBACK OFF PAGESIZE 0 LINESIZE 5000;
SQL> Rem
SQL> Rem      Variable that begin with "c_" are constants for the package
SQL> Rem
SQL> REM BEGIN SQL_FILE_METADATA
SQL> REM SQL_SOURCE_FILE: rdbms/admin/utluppkg.sql
SQL> REM SQL_SHIPPED_FILE: rdbms/admin/utluppkg.sql
SQL> REM SQL_PHASE: UTLUPPKG
SQL> REM SQL_STARTUP_MODE: NORMAL
SQL> REM SQL_IGNORABLE_ERRORS: NONE
SQL> REM SQL_CALLING_FILE: rdbms/admin/catproc.sql
SQL> REM END SQL_FILE_METADATA
SQL> REM
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    apfwkr      01/07/15 - Backport hvieyra_bug-19873610 from main
SQL> Rem    apfwkr      10/09/14 - Backport apfwkr_blr_backport_19195895_12.1.0.2.0
SQL> Rem                           from st_rdbms_12.1
SQL> Rem    cmlim       08/19/14 - Backport cmlim_bug19195895_main from st_rdbms_12.1
SQL> Rem                         - bug 19195895: make sure inserts/updates are not
SQL> Rem    hvieyra     12/19/14 - Bug Fix 19873610 Non-Default Tablespace
SQL> Rem                           validation
SQL> Rem                           done if db is read only
SQL> Rem                         - up c_build to '008' for 12.1.0.2 upload on MOS
SQL> Rem    apfwkr      06/11/14 - Backport cmlim_bug-17589566 from main
SQL> Rem    apfwkr      06/09/14 - Backport cmlim_bug-18523430 from main
SQL> Rem    ewittenb    05/28/14 - XbranchMerge ewittenb_lrg-11731599 from main
SQL> Rem    cmlim       05/25/14 - lrg 12025320: roll back latest time zone file
SQL> Rem                           version (c_tz_version) in 12102 to 18 (from 21)
SQL> Rem    apfwkr      05/22/14 - Backport ewittenb_bug-18440577 from main
SQL> Rem    apfwkr      05/14/14 - Backport cmlim_bug-18550292 from main
SQL> Rem    apfwkr      04/27/14 - Backport ewittenb_bug-17874647 from main
SQL> Rem    apfwkr      04/03/14 - Backport qyu_bug-18454285 from main
SQL> Rem    apfwkr      04/03/14 - Backport ewittenb_bug-18282536 from main
SQL> Rem    apfwkr      04/03/14 - Backport ewittenb_bug-18361351 from main
SQL> Rem    apfwkr      03/30/14 - Backport cmlim_bug-18107191 from main
SQL> Rem    apfwkr      03/27/14 - Backport ewittenb_bug-18417912 from main
SQL> Rem    apfwkr      03/27/14 - Backport myuin_bug-18401444 from main
SQL> Rem    surman      03/18/14 - Backport surman_bug-18355407 from main
SQL> Rem    cmlim       06/02/14 - bug 17589566: warn that RESOURCE_LIMIT's default
SQL> Rem                           is changing from FALSE to TRUE starting in
SQL> Rem                           12.1.0.2
SQL> Rem    cmlim       05/15/14 - bug 18523430: inform user that apex upgrades can
SQL> Rem                           be done manually prior to db upgrade
SQL> Rem    ewittenb    04/28/14 - Bug 18440577 - make SYNC_STANDBY_DB check run on
SQL> Rem                           PRIMARY only and make severity be INFO
SQL> Rem    ewittenb    04/10/14 - 17874647: readonly mode problem forcing terminal output
SQL> Rem    qyu         03/27/14 - add xbrl pre-upgrade version check
SQL> Rem    myuin       03/25/14 - 18401444: disable AWR check if run in 12.x+
SQL> Rem    ewittenb    03/20/14 - bug 18417912
SQL> Rem    ewittenb    03/14/14 - improve efficiency of ts_has_queues per bug
SQL> Rem                           18282536
SQL> Rem    cmlim       03/06/14 - Bug 18550292: create a write lock file for
SQL> Rem                           text output
SQL> Rem                         - plus: add preupgrade begin/end to registry$log
SQL> Rem                         - plus: cleanup and add comments to original code
SQL> Rem                         - plus: changed time zone MOS 977512.1 (for 11.2)
SQL> Rem                           to MOS 1509653.1 (for 12c)
SQL> Rem                         - plus: save pdb files into a pdbfiles sub-directory
SQL> Rem                         - plus: when displaying underscore parameters, do
SQL> Rem                           not show those that were set in 'alter session'
SQL> Rem                         - plus: write underscore params to preupgrade.log
SQL> Rem                         - plus: write events to preupgrade.log
SQL> Rem    surman      03/05/14 - 18355407: sqlsess scripts not needed
SQL> Rem    cdilling    02/28/14 - bug 16213268 check network acl for 10.2 upgrades
SQL> Rem    cmlim       02/12/14 - bug 18107191: do not reuse directory object value
SQL> Rem                           as path in PREUPGRADE_DIR can be left over from
SQL> Rem                           an older upgrade
SQL> Rem    jerrede     02/12/14 - Bug 18200489 Not Displaying Changed Parameters
SQL> Rem                           like sga_target, mem_target etc when executing
SQL> Rem                           preupgrd.sql in TERMINAL TEXT mode.
SQL> Rem    cmlim       01/06/14 - bug 18038240: must return archivelog and
SQL> Rem                           flashbacklog additional sizes to DBUA in MB, not
SQL> Rem                           KB
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    psainza     12/27/13 - reverting the changes done for bug 17994427.
SQL> Rem    psainza     12/27/13 - Fix for bug 17994427
SQL> Rem    cmlim       12/10/13 - bug 17545700: do not display the minimum FRA size
SQL> Rem                           needed if the minimum size needed is 0Mb
SQL> Rem                         - archivelog_kbytes and flashbacklog_kbytes are
SQL> Rem                           wrong; they have not been multiplied with c_kb
SQL> Rem    jerrede     12/05/13 - Fix bug 17876627
SQL> Rem    jerrede     12/04/13 - Fix Bug 17876355
SQL> Rem    cmlim       11/26/13 - lrg 10260355: latest time zone file version for
SQL> Rem                           12102 is 21
SQL> Rem    cmlim       11/22/13 - bug 17656978 - check that open_cursors is minimum
SQL> Rem                           150 for upgrades to 12.1
SQL> Rem                         - bug 17593282 - list underscore and event params
SQL> Rem                           from preupgrade_fixups.sql
SQL> Rem                         - clean up some line formatting
SQL> Rem    ewittenb    11/18/13 - fix wording of the OLAP Catalog component message
SQL> Rem    cechen      10/17/13 - Bug 16561577: handle GDS users and roles
SQL> Rem    ewittenb    09/26/13 - bug 17504021: tmp_varchar1 not sufficient size to hold filename
SQL> Rem    kyagoub     09/12/13 - bug16561082: handle EM_EXPRESS_ALL and
SQL> Rem                           EM_EXPRESS_BASIC
SQL> Rem    cmlim       08/17/13 - cmlim_preupgrd_cdb_1: phase 1 - support cdbs and
SQL> Rem                           non-cdbs in 12102
SQL> Rem    ewittenb    07/29/13 - bug 16163301
SQL> Rem    ewittenb    07/18/13 - sec_case_sensitive_logon is not a removed
SQL> Rem                           parameter
SQL> Rem    ewittenb    08/20/13 - Bug 16173813 - emit informational about non-upgraded components
SQL> Rem    cmlim       07/05/13 - lrg 8816946 - latest time zone file shipped is 20
SQL> Rem                           in 12.1.0.2 (update 'c_tz_version')
SQL> Rem    ewittenb    07/02/13 - fix many tiny issues with message text, etc.
SQL> Rem    jerrede     05/31/13 - Make Read Only Work
SQL> Rem    jkati       05/07/13 - bug#16586860 : Check existence for OLS in
SQL> Rem                           sys.registry$ instead of checking LBACSYS user
SQL> Rem    cmlim       05/06/13 - bug 16191893, try 2 - replace 'homemade'
SQL> Rem                         - reset_init_package with dbms_session.reset_package
SQL> Rem    jerrede     05/03/13 - Fix Bug 16748297 Class becomes invalid in
SQL> Rem                           10.2.0.5.0 database
SQL> Rem    jibyun      03/28/13 - Bug 16567861: warn if the following users/roles
SQL> Rem                           already exist: SYSBACKUP, SYSDG, SYSKM,
SQL> Rem                           CAPTURE_ADMIN
SQL> Rem    yiru        03/28/13 - Bug 16561033: Add functions to check the existence
SQL> Rem                           of RAS reserved roles
SQL> Rem    cmlim       03/22/13 - bug 16191893 - error/warning/informational msg
SQL> Rem                           count (in summary output) are not reset on reruns
SQL> Rem    jerrede     02/20/13 - Fix Bug 16341304 Incorrect Minimum size for
SQL> Rem                           SYSAUX table
SQL> Rem    cmlim       01/25/13 - update INVALID_SYS_TABLEDATA_gethelp to include
SQL> Rem                           PDB (for bug 16223659)
SQL> Rem    cmlim       01/08/13 - bug 16085743: extra: change WARNING to ERROR
SQL> Rem                           for invalid user table data
SQL> Rem    cdilling    01/29/13 - add support for 12.1.0.2
SQL> Rem    bmccarth    01/07/13 - tabledata fix for DBUA
SQL> Rem    bmccarth    01/03/13 - fix several sql statements
SQL> Rem    bmccarth    12/20/12 - bug 15899139 - rul/exf fix
SQL> Rem    bmccarth    12/01/12 - INVALID_SYS_TABLEDATA/INVALID_USR_TABLEDATA
SQL> Rem                         - rename sqlcode variable/params
SQL> Rem                         - Add condition_exists function.
SQL> Rem                         - Add sql file metadata as this will be loaded
SQL> Rem                           during db create.
SQL> Rem                         - Fix AMD check
SQL> Rem                         - Fix in-place check, if DB was never
SQL> Rem                           upgraded, tool reported 'unsupported', also
SQL> Rem                           added several comments around that block of code
SQL> Rem                         - Unused variables removed
SQL> Rem    jerrede     11/08/12 - Make tz_fixup public
SQL> Rem    mfallen     09/23/12 - bug 14390165: check if AWR will need cleanup
SQL> Rem    bmccarth    09/27/12 - job_queue_processes check
SQL> Rem                         - remove un-used variables
SQL> Rem                         - move routine def/decl into alpha order
SQL> Rem    bmccarth    09/27/12 - bug 14684128 - protect writes when logs fail to
SQL> Rem                           open
SQL> Rem    amunnoli    09/07/12 - Bug 14560783: Raise an error if user or role
SQL> Rem                           named AUDSYS,AUDIT_ADMIN,AUDIT_VIEWER already
SQL> Rem                           exists in the source DB to be upgraded to 12.1
SQL> Rem    bmccarth    09/12/12 - bug 14608684 - ultrasearch txt
SQL> Rem                         - bug 14619362 - DMSYS text change
SQL> Rem                         - bug 14635610 - re-init resource value each
SQL> Rem                           time through
SQL> Rem    amunnoli    09/07/12 - Bug 14560783: Raise an error if user or role
SQL> Rem                           named AUDSYS,AUDIT_ADMIN,AUDIT_VIEWER already
SQL> Rem                           exists in the source DB to be upgraded to 12.1
SQL> Rem    cmlim       09/04/12 - bug 14551710 - tablespace sizing for apex need to
SQL> Rem                           be updated for latest apex version 4.2.0
SQL> Rem                         - extra: increment archivelog and
SQL> Rem                           flashbacklog experimental numbers by 1.1
SQL> Rem                         - extra: sysaux size should not be less than 500M
SQL> Rem                         - extra: minimum tablespace incremental size is 50M
SQL> Rem                         - extra: update description to OLS_SYS_MOVE
SQL> Rem                         - extra: prefixed 'DUAL' with 'SYS.'
SQL> Rem    bmccarth    08/17/12 - remove refreshes exist check
SQL> Rem    bmccarth    08/08/12 - bug 14469506 - rework output
SQL> Rem                         - MAX_PROCESS becomes default_process
SQL> Rem                         - bug 14619157 error count not matching
SQL> Rem                           so clear check record run info in run_check
SQL> Rem    bmccarth    08/17/12 - remove view in progress check
SQL> Rem    bmccarth    08/07/12 - em check is incorrect
SQL> Rem    bmccarth    07/10/12 - tz to 18
SQL> Rem    bmccarth    07/09/12 - merge in cmlim archivemode size
SQL> Rem                         - Add diag info to XML doc when requested
SQL> Rem                         - sec_case_sensitive_logon gone for 12.1
SQL> Rem    bmccarth    05/09/12 - give DBUA all tablespaces
SQL> Rem                         - stop output tablespace for unsupported upgrades
SQL> Rem                         - Update error/warning text after
SQL> Rem                           documention review
SQL> Rem                         - min process up to 300 - bug 14067986 (and
SQL> Rem                           add manual output)
SQL> Rem                         - deprecated becomes desupported (text only change)
SQL> Rem                         - change DisplayLine so it works from
SQL> Rem                           init procedures
SQL> Rem                         - Move tablespace debug output
SQL> Rem                         - compat recommend becomes an actual check
SQL> Rem                         - alphabetize check functions
SQL> Rem                         - add ols_sys_move check
SQL> Rem                         - all checks are no preceeded by ERROR or
SQL> Rem                           WARNING should they fail (allow easy
SQL> Rem                           searching for issues in log files)
SQL> Rem                         - prior code review comments: use constants for
SQL> Rem                           return values
SQL> Rem                         - AL24UTFFSS and NCHAR_TYPE checks removed
SQL> Rem    bmccarth    04/12/12 - merge in size changes
SQL> Rem                         - Updated buffer size for utl_file
SQL> Rem                         - Ultrasearch and enableD_indexes_tbl detail are
SQL> Rem                           now text, not sql
SQL> Rem    cdilling    04/10/12 - change type_sql to type_text -bug 13946411
SQL> Rem    awesley     04/02/12 - deprecate cwm, remove AMD
SQL> Rem    bmccarth    03/07/12 - network acl check
SQL> Rem                         - Audit_Trail param changes - bug 13885449
SQL> Rem                         - Fix java cleanup from failing on mulitple loads
SQL> Rem                         - Cleanup/add comments around processing
SQL> Rem                           special params.
SQL> Rem                         - EM warning changed
SQL> Rem                         - buffer sizes for output increase
SQL> Rem                         - remove 'IN' from  result_text of _check routines
SQL> Rem                         - db_name to 256
SQL> Rem                         - rename a few package level variables
SQL> Rem                         - remove genFixup_info (duplicate of genFixup
SQL> Rem                           after rework of package in last rev)
SQL> Rem                         - OCM and APPQOSSYS User check is only for 102
SQL> Rem                           upgrades
SQL> Rem                         - bug 13819259 - refreshes_exist check was wrong
SQL> Rem                         - bug 12536056 - add params around _ event
SQL> Rem                           check clause
SQL> Rem    bmccarth    01/19/12 - bug 13601349 - handle directory object failures
SQL> Rem                         - bug 13616875 - missing htmlentities call
SQL> Rem                         - bug 13628060 - quotes wrong for fixup of
SQL> Rem                           displaying events
SQL> Rem                         - files_need_recovery is a manual fix (not auto)
SQL> Rem                         - When set_output_file is called with location,
SQL> Rem                           set the validated bit so the code actually does
SQL> Rem                           something.
SQL> Rem                         - Fix ocm/qos checks
SQL> Rem                         - Add missing rollback seg output back in
SQL> Rem                         - Moved recommendations into check_table for
SQL> Rem                           consistancy
SQL> Rem                         - Remove grants from script
SQL> Rem                         - Add missing compatability check
SQL> Rem                         - remove script_location variable (use
SQL> Rem                           output_location for all output)
SQL> Rem                         - ensure package level output variables are cleared
SQL> Rem                         - present better errors if directory does not
SQL> Rem                           exist (including if directory object
SQL> Rem                           already exists)
SQL> Rem                         - Add debug procedures to force failures
SQL> Rem    bmccarth    12/28/11 - protect drop directory from errors
SQL> Rem    bmccarthy   12/15/11 - Add recommendation section
SQL> Rem    bmccarth    11/15/11 - continue adding features
SQL> Rem    bmccarth    11/09/11 - Added htmlentities so DBUA had valid xml when
SQL> Rem                           a SQL command included certain characters
SQL> Rem                         - removed ; from end of sql commands
SQL> Rem    bmccarth    09/13/11 - Merge in DBUA changes continue to add checks
SQL> Rem    bmccarth    08/17/11 - Pre Upgrade Utility Package, framework
SQL> Rem                         - testing puiu$data removed
SQL> Rem    bmccarth    08/17/11 - Created
SQL> Rem
SQL> 
SQL> CREATE OR REPLACE PACKAGE dbms_preup AS
  2  --
  3  -- preupgrd.sql will look at the version to
  4  -- make sure things match up.
  5  --
  6  c_version     CONSTANT VARCHAR2(30)    := '12.1.0.2';
  7  
  8  c_patchset    CONSTANT VARCHAR2(2)     := '.0';
  9  c_build       CONSTANT VARCHAR2(30)    := '008';
 10  c_supported_versions
 11                CONSTANT VARCHAR(100)    := '10.2.0.5, 11.1.0.7, 11.2.0.2, 11.2.0.3, 11.2.0.4, 12.1.0.1';
 12  c_max_processes CONSTANT NUMBER        := 300;
 13  c_min_open_cursors CONSTANT NUMBER     := 150; -- min value for upgrades to
 14                                                 -- 12102 (needed for APEX)
 15  
 16  -- c_NA_str : the display string to indicate Not Applicable for container info
 17  -- c_NA_ver : the version where container info is not applicable is pre-12.1
 18  c_NA_str      CONSTANT VARCHAR2(100)   := 'Not Applicable in Pre-12.1 database';
 19  c_NA_ver      CONSTANT VARCHAR2(30)    := '12.1.0.1';
 20  
 21  --
 22  -- what we require for min compat, in numeric and
 23  -- text form
 24  --
 25  c_compat_min_num CONSTANT NUMBER       := 11;
 26  c_compat_min  CONSTANT VARCHAR(30)     := '11.0.0';
 27  
 28  -- directory objects and file names for preupgrade text output
 29  c_dir_obj        CONSTANT VARCHAR2(30) := 'PREUPGRADE_DIR'; -- top level dir obj
 30  c_output_fn      CONSTANT VARCHAR2(30) := 'preupgrade.log';
 31  c_pre_script_fn  CONSTANT VARCHAR2(30) := 'preupgrade_fixups.sql';
 32  c_post_script_fn CONSTANT VARCHAR2(30) := 'postupgrade_fixups.sql';
 33  c_pdb_dir_obj    CONSTANT VARCHAR2(30) := 'PDB_PREUPGRADE_DIR'; -- pdb subdir
 34  
 35  -- file name components to 'preupgrade.log', 'preupgrade_fixups.sql' and
 36  -- 'postupgrade_fixups.sql'
 37  c_text_log_base   CONSTANT VARCHAR2(30) := 'preupgrade.'; -- base name
 38  c_text_log_suffix CONSTANT VARCHAR2(30) := '.log'; -- suffix name
 39  c_pre_fixup_base   CONSTANT VARCHAR2(30) := 'preupgrade_fixups.';  -- base name
 40  c_post_fixup_base  CONSTANT VARCHAR2(30) := 'postupgrade_fixups.'; -- base name
 41  c_fixup_suffix     CONSTANT VARCHAR2(30) := '.sql'; -- fixup script suffix name
 42  
 43  -- file components to 'upgrade.xml'
 44  c_xml_log_base   CONSTANT VARCHAR2(30) := 'upgrade.'; -- base name
 45  c_xml_log_suffix CONSTANT VARCHAR2(30) := '.xml'; -- suffix name
 46  
 47  -- write lock file info
 48  c_wrlock_fname      CONSTANT VARCHAR2(30) := 'writelock.lck';
 49  c_wrlock_max_waits  CONSTANT NUMBER  := 600;  -- max waits/loops for write lock
 50  c_wrlock_sleep_secs CONSTANT NUMBER  := 1;  -- 1 sec-sleep/wait for write lock
 51  
 52  --
 53  -- TO DO: these are the latest versions shipped that needs to be
 54  --        reviewed and/or updated per oracle release
 55  --
 56  -- latest time zone file shipped
 57    c_tz_version  CONSTANT NUMBER         := 18;
 58  -- latest apex version shipped
 59    c_apex_version CONSTANT VARCHAR2(20)  := '4.2.5';  -- list first 6 places
 60  
 61  --
 62  -- What kind of output are we doing?
 63  --
 64  c_output_text     CONSTANT NUMBER := 1;
 65  c_output_xml      CONSTANT NUMBER := 2;
 66  
 67  --
 68  -- UTL_FILE attributes
 69  --
 70  c_fopen_max_lsz  CONSTANT NUMBER := 15000; -- max linesize to UTL_FILE.FOPEN
 71  
 72  --
 73  -- Used to keep track of pre-upgrade checks
 74  --
 75  --
 76  TYPE check_record_t IS RECORD (
 77    name             VARCHAR2(30),   -- Name of check (and used for function
 78                                     -- names also (if not too long))
 79    type             NUMBER,         -- see type constants for values
 80                      -- c_type_check = standard check for both xdb/manual
 81                      -- c_type_check_interactive_only = Standard check, but manual only
 82                      -- c_type_recommend_pre = pre-up recommendation (manual)
 83                      -- c_type_recommend_post = post-up recommendation (manual)
 84                      --
 85    descript         VARCHAR2(100),  -- Short description of the check
 86    f_name_prefix    VARCHAR2(30),   -- If name is too long to add
 87                                     -- "_gethelp" and create a valid
 88                                     -- function name, this is set to a
 89                                     -- shorten name to be used when accessing
 90                                     -- a check's functions.
 91    level            NUMBER,         -- Check level (c_check_level_....)
 92    fix_type         NUMBER,         -- fix_type (by_fixup, manual)
 93    executed         BOOLEAN,        -- Has the test been run?
 94    execute_failed   BOOLEAN,        -- If the check takes an exception.
 95    passed           BOOLEAN,        -- Did the check pass?
 96    skipped          BOOLEAN,        -- Skipped, check not valid for this version
 97    fixup_executed   BOOLEAN,        -- Was a fixup attempted ?
 98    fixup_failed     BOOLEAN,        -- Did the fixup execute fail?
 99    fixup_status     NUMBER,         -- c_fixup_status... value
100    always_fail      BOOLEAN,        -- Debug the check's failure path (generate a fixup)
101    valid_versions   VARCHAR(100),   -- What versions is this check valid for?
102    result_text      VARCHAR2(1500), -- result of fixup/check
103    sqlcode          NUMBER          -- The sqlcode should an error occur.
104  );
105  TYPE check_table_t is TABLE of check_record_t INDEX BY BINARY_INTEGER;
106  
107  --
108  -- This record is to index the check_table by name
109  --
110  TYPE check_record_name_t IS RECORD (
111    idx            NUMBER               -- Index into check_table
112  );
113  
114  TYPE check_names_table_t is TABLE of check_record_name_t INDEX BY VARCHAR2(30);
115  
116  --
117  -- dbms_preup.check_table contains
118  -- a list of all of the checks this package (once inited)
119  -- has performed on the database.
120  --
121  -- Although check_table could have been indexed by name, doing so would have
122  -- changed the order when looping through as new checks were added or old
123  -- checks removed.
124  --
125  check_table       check_table_t;
126  
127  --
128  -- Index by name
129  --
130  check_names       check_names_table_t;
131  
132  
133  pCheckCount        NUMBER := 0;  -- Total number of checks we have available.
134  pCheckErrorCount   NUMBER;
135  pCheckWarningCount NUMBER;
136  pCheckInfoCount    NUMBER;
137  
138  --
139  -- How the fix can be fixed
140  --
141  c_fix_source_manual      CONSTANT NUMBER := 0;
142  c_fix_source_auto        CONSTANT NUMBER := 1;  -- pre-upgrade
143  c_fix_target_auto_pre    CONSTANT NUMBER := 2;  -- targetpre - only new timezone
144  c_fix_target_auto_post   CONSTANT NUMBER := 3;  -- after upgrade process is done
145  c_fix_target_manual_pre  CONSTANT NUMBER := 4;  -- manual, before
146  c_fix_target_manual_post CONSTANT NUMBER := 5; -- manual after upgrade
147  --
148  -- Type of Check
149  --
150  c_type_check                   CONSTANT NUMBER := 1;
151  c_type_check_interactive_only  CONSTANT NUMBER := 2;
152  c_type_recommend_pre           CONSTANT NUMBER := 3;
153  c_type_recommend_post          CONSTANT NUMBER := 4;
154  
155  --
156  -- What gethelp returns
157  --
158  c_help_overview       CONSTANT NUMBER := 1;
159  c_help_fixup          CONSTANT NUMBER := 2;
160  
161  --
162  -- What a Fixup routine could return
163  --
164  c_fixup_status_failure CONSTANT NUMBER := 0;
165  c_fixup_status_success CONSTANT NUMBER := 1;
166  c_fixup_status_info    CONSTANT NUMBER := 2;
167  
168  --
169  -- What Check/help routine could return
170  --
171  c_status_failure                 CONSTANT NUMBER := 0;
172  c_status_success                 CONSTANT NUMBER := 1;
173  c_status_passed                  CONSTANT NUMBER := 1;
174  c_status_not_for_this_version    CONSTANT NUMBER := 2;
175  
176  -- Functions
177  
178  FUNCTION  get_version    RETURN VARCHAR2;
179  FUNCTION  run_all_checks RETURN NUMBER;
180  
181  FUNCTION  run_check (check_name IN VARCHAR2) RETURN check_record_t;
182  FUNCTION  run_check_simple (check_name IN VARCHAR2) RETURN check_record_t;
183  FUNCTION  condition_exists (check_name IN VARCHAR2) RETURN BOOLEAN;
184  PROCEDURE run_check (check_name IN VARCHAR2);
185  FUNCTION  run_fixup (check_name IN VARCHAR2) RETURN check_record_t;
186  PROCEDURE run_fixup_and_report (check_name VARCHAR2);
187  PROCEDURE run_fixup_info (check_name VARCHAR2);
188  PROCEDURE display_check_text (check_record check_record_t );
189  PROCEDURE fixup_summary (preup BOOLEAN);
190  PROCEDURE clear_run_flag (preup BOOLEAN);
191  
192  FUNCTION  run_recommend (check_name IN VARCHAR2) RETURN check_record_t;
193  PROCEDURE run_all_recommend (whatType NUMBER);
194  
195  PROCEDURE DisplayLine (line IN VARCHAR2);
196  PROCEDURE DisplayLine (uft UTL_FILE.FILE_TYPE, line IN VARCHAR2);
197  PROCEDURE DisplayDiagLine (line IN VARCHAR2);
198  
199  PROCEDURE start_xml_document;
200  PROCEDURE end_xml_document;
201  
202  PROCEDURE output_summary;
203  PROCEDURE output_components;
204  PROCEDURE output_flashback;
205  PROCEDURE output_initparams;
206  PROCEDURE output_preup_checks;
207  PROCEDURE output_prolog;
208  PROCEDURE output_check_summary;
209  PROCEDURE output_recommendations;
210  PROCEDURE output_resources;
211  PROCEDURE output_tablespaces;
212  PROCEDURE output_rollback_segs;
213  
214  --
215  -- Call these to debug a certain check,
216  -- debug all checks, or debug tablespace resources
217  --
218  PROCEDURE dbg_check (check_name IN VARCHAR2);
219  PROCEDURE dbg_all_checks;
220  PROCEDURE dbg_all_resources (onoff BOOLEAN);
221  PROCEDURE dbg_space_resources (onoff BOOLEAN);
222  PROCEDURE time_zone_check;
223  PROCEDURE tz_fixup (call_init BOOLEAN);
224  
225  --
226  -- Set the output type to either Text or XML
227  --
228  -- If XML is chosen, a call to  start_xml_document
229  -- and close_xml_docuement must be
230  -- made to ensure correct syntax of the XML output.
231  --
232  -- Output type default to TEXT
233  --
234  PROCEDURE  set_output_type (p_type VARCHAR2);
235  
236  --
237  -- If the diag output is going to a file, use these
238  -- proceduress to set, and close that output file.
239  --
240  -- The package uses utl_file, and if there is an
241  -- error opening the file, the package will throw
242  -- an error.
243  --
244  PROCEDURE  set_output_file (p_on_off BOOLEAN);
245  PROCEDURE  set_output_file (p_fn   VARCHAR2);
246  PROCEDURE  set_output_file (p_location VARCHAR2, p_fn VARCHAR2);
247  
248  PROCEDURE  close_file;
249  
250  FUNCTION get_con_id    RETURN NUMBER;   -- get container or db id
251  FUNCTION get_con_name  RETURN VARCHAR2; -- get container or db name
252  FUNCTION is_con_root   RETURN BOOLEAN;  -- is this container a root? TRUE/FALSE
253  FUNCTION is_db_noncdb  RETURN BOOLEAN;  -- is this db a non-cdb? TRUE/FALSE
254  
255  FUNCTION is_db_readonly RETURN BOOLEAN; -- is this db READ ONLY? TRUE/FALSE
256  
257  -- append a pdb file to end of main destination file
258  PROCEDURE write_pdb_file (locDirObj     IN VARCHAR2,
259                            pdbFileName   IN VARCHAR2,
260                            pdbFilePtr    IN OUT UTL_FILE.FILE_TYPE,
261                            destFileName  IN VARCHAR2);
262  
263  PROCEDURE  concat_pdb_file;  -- create write lock and then call write_pdb_file
264  
265  PROCEDURE  output_results_location; -- display results (log and fixups) location
266  
267  -- begin logging preupgrade action into registry$log
268  PROCEDURE  begin_log_preupg_action;
269  
270  -- end logging preupgrade action into registry$log
271  PROCEDURE  end_log_preupg_action;
272  
273  PROCEDURE  end_preupgrd;   -- ending/finishing-up preupgrade tool
274  
275  --
276  -- Turn generating fixup scripts on/off
277  --
278  PROCEDURE  set_fixup_scripts (p_on_off BOOLEAN);
279  
280  --
281  -- Function to get path of directory used to output log/script
282  --
283  FUNCTION get_output_path RETURN VARCHAR2;
284  
285  --
286  -- Display a single check record fields
287  --
288  PROCEDURE  dump_check_rec   (p_check_rec check_record_t);
289  
290  --
291  -- Specific Check/fixup Functions
292  --
293  FUNCTION  amd_exists_check (result_txt OUT VARCHAR2) RETURN number;
294  PROCEDURE amd_exists_fixup;
295  FUNCTION  amd_exists_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
296  FUNCTION  amd_exists_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
297  
298  FUNCTION  aar_present_check (result_txt OUT VARCHAR2) RETURN number;
299  PROCEDURE aar_present_fixup;
300  FUNCTION  aar_present_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
301  FUNCTION  aar_present_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
302  
303  FUNCTION  appqossys_user_present_check (result_txt OUT VARCHAR2) RETURN number;
304  PROCEDURE appqossys_user_present_fixup;
305  FUNCTION  appqossys_user_present_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
306  FUNCTION  appqossys_user_present_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
307  
308  FUNCTION  audsys_user_present_check (result_txt OUT VARCHAR2) RETURN number;
309  PROCEDURE audsys_user_present_fixup;
310  FUNCTION  audsys_user_present_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
311  FUNCTION  audsys_user_present_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
312  
313  FUNCTION  audit_viewer_check (result_txt OUT VARCHAR2) RETURN number;
314  PROCEDURE audit_viewer_fixup;
315  FUNCTION  audit_viewer_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
316  FUNCTION  audit_viewer_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
317  
318  FUNCTION SYSBACKUP_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
319  FUNCTION SYSBACKUP_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
320  PROCEDURE SYSBACKUP_USER_PRESENT_fixup;
321  FUNCTION SYSBACKUP_USER_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
322  
323  FUNCTION SYSDG_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
324  FUNCTION SYSDG_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
325  PROCEDURE SYSDG_USER_PRESENT_fixup;
326  FUNCTION SYSDG_USER_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
327  
328  FUNCTION SYSKM_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
329  FUNCTION SYSKM_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
330  PROCEDURE SYSKM_USER_PRESENT_fixup;
331  FUNCTION SYSKM_USER_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
332  
333  FUNCTION CAPT_ADM_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
334  FUNCTION CAPT_ADM_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
335  PROCEDURE CAPT_ADM_ROLE_PRESENT_fixup;
336  FUNCTION CAPT_ADM_ROLE_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
337  
338  FUNCTION GSMCATUSER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
339  FUNCTION GSMCATUSER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
340  PROCEDURE GSMCATUSER_PRESENT_fixup;
341  FUNCTION GSMCATUSER_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
342  
343  FUNCTION GSMUSER_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
344  FUNCTION GSMUSER_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
345  PROCEDURE GSMUSER_USER_PRESENT_fixup;
346  FUNCTION GSMUSER_USER_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
347  
348  FUNCTION GSMADM_INT_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
349  FUNCTION GSMADM_INT_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
350  PROCEDURE GSMADM_INT_PRESENT_fixup;
351  FUNCTION GSMADM_INT_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
352  
353  FUNCTION GSMUSER_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
354  FUNCTION GSMUSER_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
355  PROCEDURE GSMUSER_ROLE_PRESENT_fixup;
356  FUNCTION GSMUSER_ROLE_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
357  
358  FUNCTION GSM_PAD_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
359  FUNCTION GSM_PAD_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
360  PROCEDURE GSM_PAD_ROLE_PRESENT_fixup;
361  FUNCTION GSM_PAD_ROLE_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
362  
363  FUNCTION GSMADMIN_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
364  FUNCTION GSMADMIN_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
365  PROCEDURE GSMADMIN_ROLE_PRESENT_fixup;
366  FUNCTION GSMADMIN_ROLE_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
367  
368  FUNCTION GDS_CT_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
369  FUNCTION GDS_CT_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
370  PROCEDURE GDS_CT_ROLE_PRESENT_fixup;
371  FUNCTION GDS_CT_ROLE_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
372  
373  
374  FUNCTION  awr_dbids_present_check (result_txt OUT VARCHAR2) RETURN number;
375  PROCEDURE awr_dbids_present_fixup;
376  FUNCTION  awr_dbids_present_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
377  FUNCTION  awr_dbids_present_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
378  
379  FUNCTION  compatible_parameter_check (result_txt OUT VARCHAR2) RETURN number;
380  PROCEDURE compatible_parameter_fixup;
381  FUNCTION  compatible_parameter_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
382  FUNCTION  compatible_parameter_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
383  
384  FUNCTION  dbms_ldap_dep_exist_check (result_txt OUT VARCHAR2) RETURN number;
385  PROCEDURE dbms_ldap_dep_exist_fixup;
386  FUNCTION  dbms_ldap_dep_exist_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
387  FUNCTION  dbms_ldap_dep_exist_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
388  
389  FUNCTION  default_process_count_check (result_txt OUT VARCHAR2) RETURN number;
390  PROCEDURE default_process_count_fixup;
391  FUNCTION  default_process_count_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
392  FUNCTION  default_process_count_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
393  
394  FUNCTION  dv_enabled_check (result_txt OUT VARCHAR2) RETURN number;
395  PROCEDURE dv_enabled_fixup;
396  FUNCTION  dv_enabled_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
397  FUNCTION  dv_enabled_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
398  
399  FUNCTION  em_present_check (result_txt OUT VARCHAR2) RETURN number;
400  PROCEDURE em_present_fixup;
401  FUNCTION  em_present_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
402  FUNCTION  em_present_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
403  
404  FUNCTION  enabled_indexes_tbl_check (result_txt OUT VARCHAR2) RETURN number;
405  PROCEDURE enabled_indexes_tbl_fixup;
406  FUNCTION  enabled_indexes_tbl_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
407  FUNCTION  enabled_indexes_tbl_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
408  
409  FUNCTION  exf_rul_exists_check (result_txt OUT VARCHAR2) RETURN number;
410  PROCEDURE exf_rul_exists_fixup;
411  FUNCTION  exf_rul_exists_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
412  FUNCTION  exf_rul_exists_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
413  
414  FUNCTION  files_need_recovery_check (result_txt OUT VARCHAR2) RETURN number;
415  PROCEDURE files_need_recovery_fixup;
416  FUNCTION  files_need_recovery_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
417  FUNCTION  files_need_recovery_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
418  
419  FUNCTION  files_backup_mode_check (result_txt OUT VARCHAR2) RETURN number;
420  PROCEDURE files_backup_mode_fixup;
421  FUNCTION  files_backup_mode_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
422  FUNCTION  files_backup_mode_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
423  
424  FUNCTION  invalid_laf_check (result_txt OUT VARCHAR2) RETURN number;
425  PROCEDURE invalid_laf_fixup;
426  FUNCTION  invalid_laf_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
427  FUNCTION  invalid_laf_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
428  
429  FUNCTION  invalid_obj_exist_check (result_txt OUT VARCHAR2) RETURN number;
430  PROCEDURE invalid_obj_exist_fixup;
431  FUNCTION  invalid_obj_exist_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
432  FUNCTION  invalid_obj_exist_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
433  FUNCTION  invalid_obj_exclude RETURN VARCHAR2;
434  
435  FUNCTION  invalid_sys_tabledata_check (result_txt OUT VARCHAR2) RETURN number;
436  PROCEDURE invalid_sys_tabledata_fixup;
437  FUNCTION  invalid_sys_tabledata_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
438  FUNCTION  invalid_sys_tabledata_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
439  
440  FUNCTION  invalid_usr_tabledata_check (result_txt OUT VARCHAR2) RETURN number;
441  PROCEDURE invalid_usr_tabledata_fixup;
442  FUNCTION  invalid_usr_tabledata_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
443  FUNCTION  invalid_usr_tabledata_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
444  
445  FUNCTION  job_queue_process_check (result_txt OUT VARCHAR2) RETURN number;
446  PROCEDURE job_queue_process_fixup;
447  FUNCTION  job_queue_process_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
448  FUNCTION  job_queue_process_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
449  
450  FUNCTION  nacl_objects_exist_check (result_txt OUT VARCHAR2) RETURN number;
451  PROCEDURE nacl_objects_exist_fixup;
452  FUNCTION  nacl_objects_exist_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
453  FUNCTION  nacl_objects_exist_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
454  
455  FUNCTION  new_time_zones_exist_check (result_txt OUT VARCHAR2) RETURN number;
456  PROCEDURE new_time_zones_exist_fixup;
457  FUNCTION  new_time_zones_exist_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
458  FUNCTION  new_time_zones_exist_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
459  
460  FUNCTION  ocm_user_present_check (result_txt OUT VARCHAR2) RETURN number;
461  PROCEDURE ocm_user_present_fixup;
462  FUNCTION  ocm_user_present_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
463  FUNCTION  ocm_user_present_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
464  
465  FUNCTION  old_time_zones_exist_check  (result_txt OUT VARCHAR2) RETURN number;
466  PROCEDURE old_time_zones_exist_fixup;
467  FUNCTION  old_time_zones_exist_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
468  FUNCTION  old_time_zones_exist_fixup  (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
469  
470  FUNCTION  ols_sys_move_check (result_txt OUT VARCHAR2) RETURN number;
471  PROCEDURE ols_sys_move_fixup;
472  FUNCTION  ols_sys_move_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
473  FUNCTION  ols_sys_move_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
474  
475  FUNCTION  ordimageindex_check (result_txt OUT VARCHAR2) RETURN number;
476  PROCEDURE ordimageindex_fixup;
477  FUNCTION  ordimageindex_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
478  FUNCTION  ordimageindex_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
479  
480  FUNCTION  pending_2pc_txn_check (result_txt OUT VARCHAR2) RETURN number;
481  PROCEDURE pending_2pc_txn_fixup;
482  FUNCTION  pending_2pc_txn_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
483  FUNCTION  pending_2pc_txn_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
484  
485  FUNCTION  purge_recyclebin_check (result_txt OUT VARCHAR2) RETURN number;
486  PROCEDURE purge_recyclebin_fixup;
487  FUNCTION  purge_recyclebin_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
488  FUNCTION  purge_recyclebin_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
489  
490  FUNCTION  remove_dmsys_check (result_txt OUT VARCHAR2) RETURN number;
491  PROCEDURE remove_dmsys_fixup;
492  FUNCTION  remove_dmsys_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
493  FUNCTION  remove_dmsys_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
494  
495  FUNCTION  remote_redo_check (result_txt OUT VARCHAR2) RETURN number;
496  PROCEDURE remote_redo_fixup;
497  FUNCTION  remote_redo_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
498  FUNCTION  remote_redo_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
499  
500  FUNCTION  sync_standby_db_check (result_txt OUT VARCHAR2) RETURN number;
501  PROCEDURE sync_standby_db_fixup;
502  FUNCTION  sync_standby_db_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
503  FUNCTION  sync_standby_db_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
504  
505  FUNCTION  sys_def_tablespace_check (result_txt OUT VARCHAR2) RETURN number;
506  PROCEDURE sys_def_tablespace_fixup;
507  FUNCTION  sys_def_tablespace_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
508  FUNCTION  sys_def_tablespace_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
509  
510  FUNCTION  ultrasearch_data_check (result_txt OUT VARCHAR2) RETURN number;
511  PROCEDURE ultrasearch_data_fixup;
512  FUNCTION  ultrasearch_data_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
513  FUNCTION  ultrasearch_data_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
514  
515  FUNCTION  unsupported_version_check (result_txt OUT VARCHAR2) RETURN number;
516  PROCEDURE unsupported_version_fixup;
517  FUNCTION  unsupported_version_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
518  FUNCTION  unsupported_version_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
519  
520  FUNCTION  provisioner_present_check (result_txt OUT VARCHAR2) RETURN number;
521  PROCEDURE provisioner_present_fixup;
522  FUNCTION  provisioner_present_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
523  FUNCTION  provisioner_present_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
524  
525  FUNCTION  xs_resource_present_check (result_txt OUT VARCHAR2) RETURN number;
526  PROCEDURE xs_resource_present_fixup;
527  FUNCTION  xs_resource_present_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
528  FUNCTION  xs_resource_present_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
529  
530  FUNCTION  xs_session_admin_check (result_txt OUT VARCHAR2) RETURN number;
531  PROCEDURE xs_session_admin_fixup;
532  FUNCTION  xs_session_admin_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
533  FUNCTION  xs_session_admin_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
534  
535  FUNCTION  xs_namespace_admin_check (result_txt OUT VARCHAR2) RETURN number;
536  PROCEDURE xs_namespace_admin_fixup;
537  FUNCTION  xs_namespace_admin_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
538  FUNCTION  xs_namespace_admin_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
539  
540  FUNCTION  xs_cache_admin_check (result_txt OUT VARCHAR2) RETURN number;
541  PROCEDURE xs_cache_admin_fixup;
542  FUNCTION  xs_cache_admin_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
543  FUNCTION  xs_cache_admin_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
544  
545  FUNCTION  not_upg_by_std_upgrd_check (result_txt OUT VARCHAR2) RETURN number;
546  PROCEDURE not_upg_by_std_upgrd_fixup;
547  FUNCTION  not_upg_by_std_upgrd_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
548  FUNCTION  not_upg_by_std_upgrd_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
549  
550  
551  FUNCTION  EMX_BASIC_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
552  FUNCTION  EMX_BASIC_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
553  PROCEDURE EMX_BASIC_ROLE_PRESENT_fixup;
554  FUNCTION  EMX_BASIC_ROLE_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
555  
556  FUNCTION  EMX_ALL_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number;
557  FUNCTION  EMX_ALL_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
558  PROCEDURE EMX_ALL_ROLE_PRESENT_fixup;
559  FUNCTION  EMX_ALL_ROLE_PRESENT_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
560  
561  -- bug 17656978: open_cursors check for apex on upgrades to 12102; error check
562  FUNCTION  open_cursors_check (result_txt OUT VARCHAR2) RETURN number;
563  FUNCTION  open_cursors_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
564  PROCEDURE open_cursors_fixup;
565  FUNCTION  open_cursors_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
566  
567  -- bug 18523430: if current apex version is older (by the 1st 6 digits) than
568  -- the version shipped in the target oracle home, then let user know that
569  -- apex upgrade can be done manually outside of and prior to database upgrade.
570  FUNCTION  apex_upgrade_msg_check (result_txt OUT VARCHAR2) RETURN number;
571  FUNCTION  apex_upgrade_msg_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
572  PROCEDURE apex_upgrade_msg_fixup;
573  FUNCTION  apex_upgrade_msg_fixup (result_txt IN OUT VARCHAR2,
574                                    pSqlcode IN OUT NUMBER) RETURN number;
575  
576  -- bug 17589566: warn that RESOURCE_LIMIT's default is changing from FALSE
577  --               to TRUE starting in 12.1.0.2
578  FUNCTION  default_resource_limit_check (result_txt OUT VARCHAR2) RETURN number;
579  FUNCTION  default_resource_limit_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
580  PROCEDURE default_resource_limit_fixup;
581  FUNCTION  default_resource_limit_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
582  
583  -- xbrl version check
584  FUNCTION  xbrl_version_check (result_txt OUT VARCHAR2) RETURN number;
585  FUNCTION  xbrl_version_gethelp (HelpType IN NUMBER) RETURN VARCHAR2;
586  PROCEDURE xbrl_version_fixup;
587  FUNCTION  xbrl_version_fixup (result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number;
588  
589  --
590  -- The recommendation procedures
591  --
592  PROCEDURE dictionary_stats_recommend;
593  PROCEDURE hidden_params_recommend;
594  PROCEDURE underscore_events_recommend;
595  PROCEDURE audit_records_recommend;
596  PROCEDURE fixed_objects_recommend;
597  
598  --
599  -- bug 17593282 - list underscore and event params used
600  --
601  PROCEDURE parameters_display(param_type_to_display IN NUMBER);
602  c_display_underscore_params CONSTANT NUMBER := 1;  -- display underscore params
603  c_display_events            CONSTANT NUMBER := 2;  -- display events
604  
605  END dbms_preup;
606  /

Package created.

SQL> 
SQL> -- ***********************************************************************
SQL> --                         Package Body
SQL> -- ***********************************************************************
SQL> CREATE OR REPLACE PACKAGE BODY dbms_preup AS
  2  
  3  c_output_terminal        CONSTANT NUMBER := 0;
  4  c_output_file            CONSTANT NUMBER := 1;
  5  
  6  --
  7  -- Values for 'level' field
  8  --
  9  c_check_level_success    CONSTANT NUMBER := 1;
 10  c_check_level_info       CONSTANT NUMBER := 3;
 11  c_check_level_warning    CONSTANT NUMBER := 2;
 12  c_check_level_error      CONSTANT NUMBER := 4;
 13  c_check_level_recommend  CONSTANT NUMBER := 5;
 14  
 15  c_check_level_warning_txt   CONSTANT VARCHAR2(7)  := 'WARNING';
 16  c_check_level_error_txt     CONSTANT VARCHAR2(5)  := 'ERROR';
 17  c_check_level_info_txt      CONSTANT VARCHAR2(4)  := 'INFO';
 18  c_check_level_success_txt   CONSTANT VARCHAR2(7)  := 'SUCCESS';
 19  c_check_level_recommend_txt CONSTANT VARCHAR2(16) := 'RECOMMENDATION';
 20  
 21  
 22  c_dbua_detail_type_sql   CONSTANT VARCHAR2(3) := 'SQL';
 23  c_dbua_detail_type_text  CONSTANT VARCHAR2(4) := 'TEXT';
 24  
 25  c_dbua_fixup_type_auto   CONSTANT VARCHAR2(4) := 'AUTO';
 26  c_dbua_fixup_type_manual CONSTANT VARCHAR2(6) := 'MANUAL';
 27  c_dbua_fixup_stage_pre   CONSTANT VARCHAR2(11):= 'PRE_UPGRADE';
 28  c_dbua_fixup_stage_post  CONSTANT VARCHAR2(12):= 'POST_UPGRADE';
 29  c_dbua_fixup_stage_validation   CONSTANT VARCHAR2(11):= 'VALIDATION';
 30  
 31  --
 32  -- Can't used this for declaring strings but can for length
 33  -- checks
 34  --
 35  c_str_max                CONSTANT NUMBER := 4000;
 36  
 37  --
 38  -- Record types
 39  --
 40  
 41  TYPE cursor_t  IS REF CURSOR;
 42  
 43  TYPE minvalue_record_t IS RECORD (
 44    name     VARCHAR2(80),
 45    minvalue NUMBER,
 46    oldvalue NUMBER,
 47    newvalue NUMBER,
 48    display  BOOLEAN,
 49    diff     NUMBER  -- the positive diff of 'oldvalue - minvalue' if
 50                     -- sga_target or memory_target is used
 51  );
 52  
 53  TYPE minvalue_table_t IS TABLE of minvalue_record_t
 54     INDEX BY BINARY_INTEGER;
 55  
 56  minvp_db32   minvalue_table_t;
 57  minvp_db64   minvalue_table_t;
 58  max_minvp    BINARY_INTEGER;
 59  
 60  --
 61  -- These are all indexes into the
 62  -- minvp arrays for the given pools
 63  --
 64  sp_idx BINARY_INTEGER;  -- shared_pool_size
 65  jv_idx BINARY_INTEGER;  -- java_pool_size
 66  tg_idx BINARY_INTEGER;  -- sga_target
 67  cs_idx BINARY_INTEGER;  -- cache_size
 68  pg_idx BINARY_INTEGER;  -- pga_aggreate_target
 69  mt_idx BINARY_INTEGER;  -- memory_target
 70  lp_idx BINARY_INTEGER;  -- large_pool_size
 71  str_idx BINARY_INTEGER; -- streams_pool_size
 72  
 73  TYPE comp_record_t IS RECORD (
 74    cid            VARCHAR2(30), -- component id
 75    cname          VARCHAR2(45), -- component name
 76    version        VARCHAR2(30), -- version
 77    status         VARCHAR2(15), -- component status
 78    schema         VARCHAR2(30), -- owner of component
 79    def_ts         VARCHAR2(30), -- name of default tablespace
 80    script         VARCHAR2(128), -- upgrade script name
 81    processed      BOOLEAN,       -- TRUE IF in the registry AND is not
 82                                  -- status REMOVING/REMOVED, OR
 83                                  -- TRUE IF will be in the registry because
 84                                  -- because cmp_info().install is TRUE
 85    install        BOOLEAN, -- TRUE if component to be installed in upgrade
 86    sys_kbytes     NUMBER,  -- upgrade size needed in system tablespace
 87    sysaux_kbytes  NUMBER,  -- upgrade size needed in sysaux tablespace
 88    def_ts_kbytes  NUMBER,  -- upgrade size needed in 'other' tablespace
 89    ins_sys_kbytes NUMBER,  -- install size needed in system tablespace
 90    ins_def_kbytes NUMBER,  -- install size needed in 'other' tablespace
 91    archivelog_kbytes   NUMBER, -- minimum archive log space per component
 92    flashbacklog_kbytes NUMBER  -- minimum flashback log size per component
 93  );
 94  TYPE comp_table_t IS TABLE of comp_record_t INDEX BY BINARY_INTEGER;
 95  cmp_info comp_table_t;      -- Table of component information
 96  
 97  
 98  -- index values for components (order as in upgrade script)
 99  catalog CONSTANT BINARY_INTEGER:=1;
100  catproc CONSTANT BINARY_INTEGER:=2;
101  javavm  CONSTANT BINARY_INTEGER:=3;
102  xml     CONSTANT BINARY_INTEGER:=4;
103  rac     CONSTANT BINARY_INTEGER:=5;
104  owm     CONSTANT BINARY_INTEGER:=6;
105  mgw     CONSTANT BINARY_INTEGER:=7;
106  aps     CONSTANT BINARY_INTEGER:=8;
107  ols     CONSTANT BINARY_INTEGER:=9;
108  dv      CONSTANT BINARY_INTEGER:=10;
109  em      CONSTANT BINARY_INTEGER:=11;
110  context CONSTANT BINARY_INTEGER:=12;
111  xdb     CONSTANT BINARY_INTEGER:=13;
112  catjava CONSTANT BINARY_INTEGER:=14;
113  ordim   CONSTANT BINARY_INTEGER:=15;
114  sdo     CONSTANT BINARY_INTEGER:=16;
115  odm     CONSTANT BINARY_INTEGER:=17;
116  wk      CONSTANT BINARY_INTEGER:=18;
117  exf     CONSTANT BINARY_INTEGER:=19;
118  rul     CONSTANT BINARY_INTEGER:=20;
119  apex    CONSTANT BINARY_INTEGER:=21;
120  xoq     CONSTANT BINARY_INTEGER:=22;
121  misc    CONSTANT BINARY_INTEGER:=23;
122  
123  max_comps      CONSTANT BINARY_INTEGER := 23;-- include components + 'misc'
124                                               -- for space calculations
125  max_components CONSTANT BINARY_INTEGER := 22;
126  
127  c_kb           CONSTANT BINARY_INTEGER := 1024;       -- 1 KB
128  c_mb           CONSTANT BINARY_INTEGER := 1048576;    -- 1 MB
129  c_gb           CONSTANT BINARY_INTEGER := 1073741824; -- 1 GB
130  
131  -- minimum size constants for tablespace sizing, in units of Kbytes and Mbytes
132  -- c_sysaux_minsz_kb : (500*1024)Kb = 500Mb -- minimum size for sysaux
133  -- c_undo_minsz_kb : (400*1024)Kb = 400Mb   -- minimum size for undo
134  -- c_incby_minsz_mb : 50Mb                  -- minimum size to increase by
135  c_sysaux_minsz_kb CONSTANT BINARY_INTEGER := 500 * c_kb;  -- (500*1024)kb =500M
136  c_undo_minsz_kb   CONSTANT BINARY_INTEGER := 400 * c_kb;  -- (400*1024)kb =400M
137  c_incby_minsz_mb  CONSTANT BINARY_INTEGER :=  50;         --  50Mb
138  
139  TYPE obsolete_record_t IS RECORD (
140    name VARCHAR2(80),
141    version  VARCHAR2(20),  -- version where is was obsolete/deprecated
142    deprecated BOOLEAN,    -- Has become Depreciated
143    db_match BOOLEAN
144  );
145  
146  TYPE obsolete_table_t IS TABLE of obsolete_record_t
147    INDEX BY BINARY_INTEGER;
148  
149  op     obsolete_table_t;
150  max_op BINARY_INTEGER;
151  
152  TYPE renamed_record_t IS RECORD (
153    oldname VARCHAR2(80),
154    newname VARCHAR2(80),
155    db_match BOOLEAN
156  );
157  
158  TYPE renamed_table_t IS TABLE of renamed_record_t
159    INDEX BY BINARY_INTEGER;
160  
161  rp      renamed_table_t;
162  max_rp  BINARY_INTEGER;
163  
164  TYPE special_record_t IS RECORD (
165    oldname      VARCHAR2(80),
166    oldvalue     VARCHAR2(80),
167    newname      VARCHAR2(80),
168    newvalue     VARCHAR2(80),
169    dbua_OutInUpdate BOOLEAN,
170    db_match     BOOLEAN
171  );
172  
173  TYPE special_table_t IS TABLE of special_record_t
174    INDEX BY BINARY_INTEGER;
175  
176  sp      special_table_t;
177  max_sp  BINARY_INTEGER;
178  
179  TYPE required_record_t IS RECORD (
180    name     VARCHAR2(80),
181    newnumbervalue NUMBER,
182    newstringvalue VARCHAR2(4000),
183    type NUMBER,
184    db_match BOOLEAN
185  );
186  
187  TYPE required_table_t IS TABLE of required_record_t
188    INDEX BY BINARY_INTEGER;
189  
190  reqp      required_table_t;
191  max_reqp  BINARY_INTEGER;
192  
193  TYPE tablespace_record_t IS RECORD (
194    name    VARCHAR2(128), -- tablespace name
195    inuse   NUMBER,        -- kbytes inuse in tablespace
196    alloc   NUMBER,        -- kbytes allocated to tbs
197    auto    NUMBER,        -- autoextend kbytes available
198    avail   NUMBER,        -- total kbytes available
199    delta   NUMBER,        -- kbytes required for upgrade
200    inc_by  NUMBER,        -- kbytes to increase tablespace by
201    min     NUMBER,        -- minimum required kbytes to perform upgrade
202    addl    NUMBER,        -- additional space allocated during upgrade
203    fname   VARCHAR2(513), -- filename in tablespace
204    fauto   BOOLEAN,       -- TRUE if there is a file to increase autoextend
205    temporary BOOLEAN,     -- TRUE if Temporary tablespace
206    localmanaged BOOLEAN   -- TRUE if locally managed temporary tablespace
207                           -- FALSE if dictionary managed temp tablespace
208  );
209  
210  TYPE tablespace_table_t IS TABLE OF tablespace_record_t
211     INDEX BY BINARY_INTEGER;
212  
213  ts_info tablespace_table_t; -- Tablespace information
214  max_ts  BINARY_INTEGER; -- Total number of relevant tablespaces
215  
216  
217  TYPE rollback_record_t IS RECORD (
218    tbs_name VARCHAR2(30), -- tablespace name
219    seg_name VARCHAR2(30), -- segment name
220    status   VARCHAR(30),  -- online or offline
221    inuse    NUMBER, -- kbytes in use
222    next     NUMBER, -- kbytes in NEXT
223    max_ext  NUMBER, -- max extents
224    auto     NUMBER  -- autoextend available for tablespace
225  );
226  
227  TYPE rollback_table_t IS TABLE of rollback_record_t
228    INDEX BY BINARY_INTEGER;
229  
230  rs_info    rollback_table_t;  -- Rollback segment information
231  max_rs     BINARY_INTEGER; -- Total number of public rollback segs
232  
233  TYPE fb_record_t IS RECORD (
234    active         BOOLEAN,       -- ON or OFF
235    file_dest      VARCHAR2(1000), -- db_recovery_file_dest
236    dsize          NUMBER,        -- db_recovery_file_dest_size
237    name           VARCHAR2(513), -- name
238    limit          NUMBER,        -- space limit
239    used           NUMBER,        -- Used
240    reclaimable    NUMBER,
241    files          NUMBER         -- number of files
242  );
243  flashback_info fb_record_t;
244  
245  --
246  -- Have we initialized the package?
247  --
248  p_package_inited   BOOLEAN := FALSE;
249  
250  --
251  -- Specifics about the DB being checked
252  --
253  
254  db_name             VARCHAR2(256);
255  con_name            VARCHAR2(256);   -- container or db name
256  con_id              NUMBER;          -- container or db id
257  db_compat           VARCHAR2(30);
258  db_version          VARCHAR2(30);    -- Complete version
259  db_major_vers       VARCHAR2(12);    -- Major vers xx.n.n
260  db_patch_vers       VARCHAR2(12);    -- include patch
261  db_n_version        BINARY_INTEGER;  -- Numeric version of db_version
262  db_compat_majorver  NUMBER;
263  
264  db_is_XE            BOOLEAN  := FALSE;
265  db_VLM_enabled      BOOLEAN  := FALSE;
266  
267  db_64bit            BOOLEAN := FALSE;
268  db_platform         VARCHAR2(128);
269  db_platform_id      NUMBER;
270  db_block_size       NUMBER;
271  db_undo             VARCHAR(128);
272  db_undo_tbs         VARCHAR(128);
273  db_flashback_on     BOOLEAN := FALSE;
274  db_log_mode         VARCHAR2(30);
275  db_memory_target    BOOLEAN := FALSE;
276  db_inplace_upgrade  BOOLEAN := FALSE;
277  db_invalid_state    BOOLEAN := FALSE;  -- If the DB is not in OPEN state
278  db_tz_version       NUMBER := 0;
279  
280  db_cpus             NUMBER;     -- Number of CPUs
281  db_cpu_threads      NUMBER;     -- Threads per CPU
282  --
283  -- A few stand-along values that we report
284  --
285  pMinFlashbackLogGen  NUMBER;
286  pminArchiveLogGen    NUMBER;
287  
288  --
289  -- Setup in init_package depending on platform
290  --
291  crlf            VARCHAR(2);
292  --
293  -- Header, centered, with "*" in it, setup in
294  -- init routine.
295  --
296  pStarHeader        VARCHAR2(80);
297  pActionRequired    VARCHAR2(40) := '^^^ MANUAL ACTION REQUIRED ^^^';
298  pActionSuggested   VARCHAR2(40) := '^^^ MANUAL ACTION SUGGESTED ^^^';
299  --
300  -- If we want a check routine to ONLY do a check and
301  -- not generate any script /log output
302  --
303  pCheckOnly          BOOLEAN;
304  --
305  -- Make this a package variable so some of the
306  -- resources are disabled should the package be
307  -- run on an unsupported release
308  --
309  pUnsupportedUpgrade BOOLEAN;
310  
311  --
312  -- If we are debugging the FAILURE sitiuations
313  --
314  pDBGFailCheck    BOOLEAN;  -- For specific defined _check procedures
315  pDBGFailAll      BOOLEAN;  -- For checks that are not 'formal checks'
316  pDBGAllResources BOOLEAN;  -- Dump out all the resources as failures
317  pDBGSizeResources  BOOLEAN;  -- For Tablespace resource info
318  
319  pOutputType      NUMBER := c_output_text;
320  pOutputDest      NUMBER := c_output_terminal;
321  
322  --
323  -- file names and file pointers -
324  -- Used when outputting to preupgrade log file
325  --
326  pOutputUFT       UTL_FILE.FILE_TYPE;
327  pOutputFName     VARCHAR2(512) := NULL;
328  pOutputLocation  VARCHAR2(512) := NULL;  -- text/xml directory object name
329                                           -- PREUPGRADE_DIR or PREUPG_OUTPUT_DIR
330  pOutputVerified  BOOLEAN;
331  
332  -- paths in directory objects
333  pTextLogDir  VARCHAR2(512) := NULL;  -- path to PREUPGRADE_DIR dir obj
334  pPdbLogDir   VARCHAR2(512) := NULL;  -- path to PDB_PREUPGRADE_DIR dir obj
335  
336  --
337  -- file names and file pointers -
338  -- Used for outputting to preupgrade and postupgrade fixup sql scripts
339  --
340  pPreScriptUFT     UTL_FILE.FILE_TYPE;
341  pPostScriptUFT    UTL_FILE.FILE_TYPE;
342  pPreScriptFname  VARCHAR2(512) := c_pre_script_fn;
343  pPostScriptFname VARCHAR2(512) := c_post_script_fn;
344  
345  -- TRUE if 'will be' or 'is' outputting/generating fixup scripts; else FALSE
346  pOutputFixupScripts BOOLEAN := FALSE;
347  
348  pCreatedDirObj   BOOLEAN       := TRUE;  -- Assume we will be creating/cleaning up
349  
350  pCreatedPdbDirObj BOOLEAN      := FALSE; -- is pdb dir obj created? TRUE/FALSE
351  
352  --
353  -- Keep track of the destination paths and file names
354  -- preupgrade tool wrote into for
355  -- display messages like 'Results of the checks are located at:'.
356  -- Note: the names here are just filenames; paths are not included.
357  -- Note: the default names here are the final destination filenames
358  -- Note: this is only for non-DBUA/TEXT cases
359  --
360  finalDestLogFn        VARCHAR2(99) := c_output_fn;     -- preupgrade.log
361  finalDestPreScriptFn  VARCHAR2(99) := c_pre_script_fn; -- preupgrade_fixups.sql
362  finalDestPostScriptFn VARCHAR2(99) := c_post_script_fn;-- postupgrade_fixups.sql
363  
364  --
365  -- If db is a non-cdb or root, then preupgrade tool writes directly to the
366  -- "main" destination files - preupgrade.log, preupgrade_fixups.sql, and
367  -- postupgrade_fixups.sql.
368  --
369  -- But if db is a pdb, then preuprgrade tool first writes to a pdb file -
370  -- preupgrade.<con_name>.log, preupgrade_fixups.<con_name>.sql, and
371  -- postupgrade_fixups<con_name>.log.  Then if pdb can create a write
372  -- lock file exclusively, then pdb will concatenate its files to the "main"
373  -- destination files.  Then after concatenate is done, the pdb files are
374  -- saved in a pdbfiles subdirectory under PREUPGRADE_DIR.
375  --
376  -- Note: DBUA will need to continue to run with "-n 1" via catcon.
377  -- I.e., The concatenate feature is not implemented in DBUA, not now anyway.
378  --
379  -- Note: This concatentate feature is a must if preupgrade tool were to run
380  -- in multiple pdbs simultaneously.
381  --
382  pConcatToMainFile   BOOLEAN := FALSE;
383  
384  pGotWriteLock       BOOLEAN := FALSE;  -- exclusive write lock file created
385  
386  --
387  -- use this variable to surround tracing stmts to be left permanently in
388  -- this file
389  -- note: lets append 'XXX ' to begin of tracing stmts so that they stand out
390  --
391  tracing_on_xxx BOOLEAN := FALSE;
392  
393  --
394  -- Declares of local functions/procedures
395  --
396  --
397  -- Init all the checks and package variables,
398  -- If not called before a 'check' routine, will be
399  -- called automaticlly.
400  --
401  PROCEDURE init_package;
402  PROCEDURE init_preupchecks;
403  PROCEDURE init_preuprecommend;
404  PROCEDURE init_initparams;
405  PROCEDURE init_params;
406  PROCEDURE init_components;
407  PROCEDURE init_resources;
408  
409  PROCEDURE define_check (
410          idx IN OUT NUMBER,
411          name VARCHAR2,
412          check_level NUMBER,
413          descript VARCHAR2);
414  
415  FUNCTION getHelp (
416          name     IN VARCHAR2,
417          helpType IN  NUMBER) RETURN VARCHAR2;
418  
419  --
420  -- Used to generate  a valid dbua tag for a pre-up check
421  --
422  FUNCTION genDBUAXMLCheck (name VARCHAR2,
423       eseverity  NUMBER,
424       etext      VARCHAR2,
425       ecause     VARCHAR2,
426       action     VARCHAR2,
427       detailtype VARCHAR2,
428       detailinfo VARCHAR2,
429       fixuptype  VARCHAR2,
430       fixupstage VARCHAR2 ) RETURN VARCHAR2;
431  
432  PROCEDURE verifyDefaultDirObj;
433  
434  PROCEDURE store_comp (i       BINARY_INTEGER,
435                        schema  VARCHAR2,
436                        version VARCHAR2,
437                        status  NUMBER);
438  PROCEDURE store_minval_dbbit  (dbbit  NUMBER,
439                                 i      IN OUT BINARY_INTEGER,
440                                 name   VARCHAR2,
441                                 minv   NUMBER);
442  PROCEDURE store_minvalue (i     BINARY_INTEGER,
443                            name  VARCHAR2,
444                            minv  NUMBER,
445                            minvp IN OUT MINVALUE_TABLE_T);
446  PROCEDURE store_oldval (minvp  IN OUT MINVALUE_TABLE_T);
447  PROCEDURE store_renamed (i   IN OUT BINARY_INTEGER,
448                           old VARCHAR2,
449                           new VARCHAR2);
450  PROCEDURE store_removed (i IN OUT BINARY_INTEGER,
451                           name       VARCHAR2,
452                           version    VARCHAR2,
453                           deprecated BOOLEAN);
454  PROCEDURE store_special (i    IN OUT BINARY_INTEGER,
455                           old  VARCHAR2,
456                           oldv VARCHAR2,
457                           new  VARCHAR2,
458                           newv VARCHAR2);
459  PROCEDURE store_required (i    IN OUT BINARY_INTEGER,
460                           name  VARCHAR2,
461                           newvn NUMBER,
462                           newvs VARCHAR2,
463                           dtype NUMBER);
464  FUNCTION pvalue_to_number (value_string VARCHAR2) RETURN NUMBER;
465  FUNCTION is_comp_tablespace (tsname VARCHAR2) RETURN BOOLEAN;
466  FUNCTION ts_is_SYS_temporary (tsname VARCHAR2) RETURN BOOLEAN;
467  FUNCTION ts_has_queues (tsname VARCHAR2) RETURN BOOLEAN;
468  PROCEDURE find_newval (minvp  IN OUT MINVALUE_TABLE_T,
469                         dbbit  NUMBER);
470  PROCEDURE find_sga_mem_values (minvp  IN OUT MINVALUE_TABLE_T,
471                                 dbbit  NUMBER);
472  
473  FUNCTION CenterLine (line IN VARCHAR2) RETURN VARCHAR2;
474  FUNCTION htmlentities (intxt varchar2) RETURN VARCHAR2;
475  PROCEDURE output_manual_initparams (minvp IN MINVALUE_TABLE_T,
476                                      bis64bit IN BOOLEAN);
477  PROCEDURE output_xml_initparams (minvp    IN MINVALUE_TABLE_T);
478  
479  PROCEDURE get_write_lock; -- is write lock file created? T/F
480  
481  
482  -- ****************************************************************
483  --         Start of Code
484  -- ****************************************************************
485  
486  --
487  -- Used to execute a sql statement (for a fixup)
488  -- Errors are returned in sqlerrtxt and sqlerrcode
489  --
490  FUNCTION execute_sql_statement (
491             statement VARCHAR2,
492             sqlerrtxt IN OUT VARCHAR2,
493             sqlerrcode IN OUT NUMBER) RETURN NUMBER
494  IS
495  ret_val NUMBER := c_fixup_status_success;
496  
497  BEGIN
498    BEGIN
499      EXECUTE IMMEDIATE statement;
500      EXCEPTION WHEN OTHERS THEN
501         sqlerrtxt := SQLERRM;
502         sqlerrcode := SQLCODE;
503         ret_val := c_fixup_status_failure;
504    END;
505    RETURN (ret_val);
506  END execute_sql_statement;
507  
508  FUNCTION get_version RETURN VARCHAR2
509  IS
510  BEGIN
511    return(dbms_preup.c_version);
512  END get_version;
513  
514  FUNCTION run_all_checks RETURN NUMBER
515  IS
516    checks_run NUMBER := 0;
517  BEGIN
518    init_package;
519  
520    FOR i IN 1..pCheckCount LOOP
521      IF check_table(i).type = c_type_check OR
522         check_table(i).type = c_type_check_interactive_only THEN
523        --
524        -- Only non-recommended checks
525        --
526        check_table(i) := run_check (check_table(i).name);
527        checks_run := checks_run + 1;
528  
529        IF (check_table(i).passed = FALSE) THEN
530          IF (check_table(i).level = c_check_level_error) THEN
531            pCheckErrorCount := pCheckErrorCount + 1;
532          ELSIF (check_table(i).level = c_check_level_warning) THEN
533            pCheckWarningCount := pCheckWarningCount + 1;
534          ELSIF (check_table(i).level = c_check_level_info) THEN
535            pCheckInfoCount := pCheckInfoCount + 1;
536          -- There can be 'success' status, no count of those is needed.
537          END IF;
538        END IF;
539      END IF;
540    END LOOP;
541    return (checks_run);
542  END run_all_checks;
543  
544  PROCEDURE run_all_recommend (whatType NUMBER)
545  IS
546  BEGIN
547    init_package;
548  
549    FOR i IN 1..pCheckCount LOOP
550      IF check_table(i).type = whatType THEN
551        -- Only run the recommend checks
552        check_table(i) := run_recommend (check_table(i).name);
553      END IF;
554    END LOOP;
555  END run_all_recommend;
556  
557  FUNCTION run_recommend (check_name VARCHAR2) RETURN check_record_t
558  IS
559    execute_failed BOOLEAN := FALSE;
560    idx            NUMBER;
561    retval         NUMBER;
562    check_stmt     VARCHAR2(100);
563    r_text         VARCHAR2(1000);
564  
565  BEGIN
566    init_package;
567  
568    IF check_names.EXISTS(check_name) = FALSE
569    THEN
570      EXECUTE IMMEDIATE 'BEGIN
571        RAISE_APPLICATION_ERROR (-20000,
572              ''Pre-Upgrade Package Requested Check does not exist''); END;';
573        return (NULL);
574    END IF;
575    idx := check_names(check_name).idx;
576  
577    IF check_table(idx).always_fail THEN
578      --
579      -- We want to fail this check, set the global
580      -- so the package checks know to fail
581      --
582      pDBGFailCheck := TRUE;
583    END IF;
584  
585    --
586    -- This executes the check procedure
587    -- An example would be
588    --
589    --  BEGIN dictionary_stats_recommend; END;
590    --
591  
592    check_stmt := 'BEGIN dbms_preup.'
593       || dbms_assert.simple_sql_name(check_table(idx).f_name_prefix)
594       ||  '_recommend; END;';
595  
596    BEGIN
597      EXECUTE IMMEDIATE check_stmt;
598      EXCEPTION WHEN OTHERS THEN
599        execute_failed := TRUE;
600    END;
601  
602    --
603    -- Save away the results of the check
604    --
605    check_table(idx).executed := TRUE;
606  
607    if execute_failed = TRUE
608    THEN
609      check_table(idx).execute_failed := TRUE;
610    ELSE
611      check_table(idx).passed := TRUE;
612    END IF;
613    --
614    -- Always turn this off
615    --
616    pDBGFailCheck := FALSE;
617    return (check_table(idx));
618  END run_recommend;
619  
620  -------------------------------  boolval  -------------------------------------
621  FUNCTION boolval (p boolean,
622                    trueval VARCHAR2,
623                    falseval VARCHAR2) return varchar2
624  IS
625  --
626  -- Return truval if the bool is TRUE otherwise return falseval
627  -- Usage: boolval(somebool, 'Yes', 'No')
628  --        boolval(somebool, 'On', 'Off')
629  --        boolval(somebool, 'True', 'False')
630  BEGIN
631     if p = TRUE THEN
632        return trueval;
633     ELSE
634        return falseval;
635     END IF;
636  END boolval;
637  
638  PROCEDURE dump_check_rec (p_check_rec check_record_t)
639  IS
640  BEGIN
641    DisplayLine ('-------- CHECK RECORD ------');
642    DisplayLine ('Name:          ' || p_check_rec.name);
643    DisplayLine ('Description:   ' || p_check_rec.descript);
644    DisplayLine ('Name Prefix:   ' || p_check_rec.f_name_prefix);
645    IF    (p_check_rec.type = c_type_check) THEN
646      DisplayLine ('Type:          ' || 'Normal');
647    ELSIF (p_check_rec.type = c_type_check_interactive_only) THEN
648      DisplayLine ('Type:          ' || 'Manual Only');
649    ELSIF (p_check_rec.type = c_type_recommend_pre) THEN
650      DisplayLine ('Type:          ' || 'Pre Upgrade Recommend');
651    ELSIF (p_check_rec.type = c_type_recommend_post) THEN
652      DisplayLine ('Type:          ' || 'Post Upgrade Recommend');
653    ELSE
654      DisplayLine ('Type:          ' || 'UNKNOWN: ' || p_check_rec.type);
655    END IF;
656    DisplayLine ('Passed:        ' || boolval(p_check_rec.passed, 'Yes', 'No'));
657    DisplayLine ('Skipped:       ' || boolval(p_check_rec.skipped, 'Yes', 'No'));
658    DisplayLine ('Fix Type:      ' || p_check_rec.fix_type);
659    DisplayLine ('Executed:      ' || boolval(p_check_rec.executed, 'Yes', 'No'));
660  
661    if p_check_rec.fixup_executed AND p_check_rec.fixup_failed THEN
662      DisplayLine ('Execute Fail:  -- Fixup Attempted --');
663    ELSE
664      DisplayLine ('Execute Fail:  ' || boolval(p_check_rec.execute_failed, 'Yes', 'No'));
665    END IF;
666    DisplayLine ('Versions:      ' || p_check_rec.valid_versions);
667    DisplayLine ('Fixup Executed:' || boolval(p_check_rec.fixup_executed, 'Yes', 'No'));
668    DisplayLine ('Fixup Fail:    ' || boolval(p_check_rec.execute_failed, 'Yes', 'No'));
669    DisplayLine ('Text:          ' || p_check_rec.result_text);
670    DisplayLine ('SQLCODE:       ' || TO_CHAR(p_check_rec.sqlcode));
671    DisplayLine ('----------------------------');
672  
673  END dump_check_rec;
674  
675  FUNCTION getHelp (
676          name     IN VARCHAR2,
677          helpType IN  NUMBER) RETURN VARCHAR2
678  IS
679  --
680  -- Use this to get back the help text (English only)
681  -- for a specific check.  The helpType is either
682  -- c_help_overview for an overview of what the check does or
683  -- c_help_fixup which describes what the fixup would do
684  --
685    idx         NUMBER;
686    rhelp       VARCHAR2(2000);
687    estatement  VARCHAR2(200);
688  BEGIN
689    IF check_names.EXISTS(name) = FALSE THEN
690      return 'WARNING - CHECK ' || name || ' does not exist';
691    END IF;
692    idx := check_names(name).idx;
693    estatement := 'BEGIN :r1 := dbms_preup.'
694             || dbms_assert.simple_sql_name(check_table(idx).f_name_prefix)
695             || '_gethelp (:helpType); END;';
696    EXECUTE IMMEDIATE estatement
697      USING OUT rhelp, IN helpType;
698    return rhelp;
699  END getHelp;
700  
701  PROCEDURE define_check (
702          idx IN OUT NUMBER,
703          name VARCHAR2,
704          check_level NUMBER,
705          descript VARCHAR2)
706  IS
707  BEGIN
708    --
709    -- Setup the check_name array
710    --
711    check_names(name).idx           := idx;
712  
713    check_table(idx).name           := name;
714    check_table(idx).descript       := descript;
715    -- Default values
716    check_table(idx).type           := c_type_check;
717    check_table(idx).f_name_prefix  := name;
718    check_table(idx).valid_versions := 'ALL';
719    check_table(idx).level          := check_level;
720    -- Assume all fixable on source side, auto
721    check_table(idx).fix_type       := c_fix_source_auto;
722    check_table(idx).passed         := FALSE;
723    check_table(idx).skipped        := FALSE;
724    check_table(idx).executed       := FALSE;
725    check_table(idx).execute_failed := FALSE;
726    check_table(idx).fixup_executed := FALSE;
727    check_table(idx).fixup_failed   := FALSE;
728    check_table(idx).always_fail    := FALSE;
729    idx := idx + 1;
730  END define_check;
731  
732  
733  -- *******************************************************************
734  --    Init package variables used throughout the package
735  -- *******************************************************************
736  PROCEDURE init_package
737  IS
738    tmp_bool        BOOLEAN;
739    c_value         VARCHAR2(80);
740    t_db_prev_vers  VARCHAR2(30);
741    t_db_dict_vers  VARCHAR2(30);
742    tmp_varchar1    VARCHAR2(512);
743    tmp_varchar4    VARCHAR2(4000);   -- Max from any query we do
744    p_count         INTEGER;
745  
746  BEGIN
747    IF p_package_inited THEN
748      RETURN;
749    END IF;
750  
751    pCheckOnly      := FALSE;
752    pDBGFailCheck   := FALSE;
753    pDBGFailAll     := FALSE;
754  
755    pDBGSizeResources := FALSE;
756    pCheckErrorCount   := 0;
757    pCheckWarningCount := 0;
758    pCheckInfoCount    := 0;
759    --
760    -- Used all over the place for output
761    --
762    pStarHeader := CenterLine ('*****************************************');
763  
764    -- Check for SYSDBA
765    SELECT USER INTO tmp_varchar1 FROM SYS.DUAL;
766    IF tmp_varchar1 != 'SYS' THEN
767      EXECUTE IMMEDIATE 'BEGIN
768         RAISE_APPLICATION_ERROR (-20000,
769            ''These functions must be run AS SYSDBA''); END;';
770    END IF;
771  
772    EXECUTE IMMEDIATE 'SELECT name    FROM v$database' INTO db_name;
773    EXECUTE IMMEDIATE 'SELECT dbms_preup.get_con_name FROM sys.dual' INTO con_name;
774    EXECUTE IMMEDIATE 'SELECT dbms_preup.get_con_id FROM sys.dual' INTO con_id;
775    EXECUTE IMMEDIATE 'SELECT version FROM v$instance' INTO db_version;
776  
777    EXECUTE IMMEDIATE 'SELECT value   FROM v$parameter WHERE name = ''compatible'''
778       INTO db_compat;
779  
780    EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE name = ''db_block_size'''
781       INTO db_block_size;
782    EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE name = ''undo_management'''
783         INTO db_undo;
784    EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE name = ''undo_tablespace'''
785         INTO db_undo_tbs;
786    --
787    -- Flashback on can have several 'on' states, but only one 'off' so check
788    -- for NO.
789    -- Put inside begin/end to catch execution on pre 10.x DB's where undo_tablespace
790    -- is not defined yet.
791    --
792    p_count := 0;
793    BEGIN
794      EXECUTE IMMEDIATE 'SELECT count(*) FROM v$database  WHERE flashback_on = ''NO'''
795        INTO p_count;
796      EXCEPTION WHEN OTHERS THEN NULL;
797    END;
798  
799    IF p_count <= 0 THEN
800      db_flashback_on := TRUE;
801    END IF;
802  
803    EXECUTE IMMEDIATE 'SELECT LOG_MODE from v$database'
804       INTO db_log_mode;
805  
806    IF db_undo != 'AUTO' OR db_undo_tbs IS NULL THEN
807      db_undo_tbs := 'NO UNDO TBS';  -- undo tbs is not in use
808    END IF;
809  
810    EXECUTE IMMEDIATE 'SELECT platform_id, platform_name
811             FROM v$database'
812    INTO db_platform_id, db_platform;
813    IF db_platform_id NOT IN (1,7,10,15,16,17) THEN
814      db_64bit := TRUE;
815    END IF;
816  
817    db_major_vers := SUBSTR (db_version, 1,6); -- First three digits
818    db_patch_vers := SUBSTR (db_version, 1,8); -- Include 4th digit
819  
820    db_compat_majorver := TO_NUMBER(SUBSTR(db_compat,1,2));
821  
822    IF db_major_vers = '10.2.0'    THEN
823      db_n_version := 102;
824    ELSIF db_major_vers = '11.1.0' THEN
825      db_n_version := 111;
826    ELSIF db_major_vers = '11.2.0' THEN
827      db_n_version := 112;
828    ELSIF db_major_vers = '12.1.0' THEN
829      db_n_version := 121;
830    END IF;
831  
832  
833    IF ( (instr (c_supported_versions, db_patch_vers) = 0) OR
834           (db_major_vers = SUBSTR (c_version, 1,6))) THEN
835      --
836      -- Didn't find this DB's version in the supported list
837      -- However, if the major version matches the c_version
838      -- for this script, this may be a re-run etc so let the tool run.
839      -- Note using substr, instead of hard-coding '121' avoids
840      -- errors while versions are updated.
841      --
842      pUnsupportedUpgrade := TRUE;
843    ELSE
844      pUnsupportedUpgrade := FALSE;
845    END IF;
846  
847    EXECUTE IMMEDIATE 'SELECT value FROM sys.v$parameter WHERE name = ''cpu_count'''
848          INTO tmp_varchar1;
849    db_cpus := to_number (tmp_varchar1);
850  
851    EXECUTE IMMEDIATE
852       'SELECT value FROM v$parameter WHERE name = ''parallel_threads_per_cpu'''
853    INTO tmp_varchar1;
854    db_cpu_threads := pvalue_to_number(tmp_varchar1);
855  
856    BEGIN
857      EXECUTE IMMEDIATE
858         'SELECT edition FROM sys.registry$ WHERE cid=''CATPROC'''
859         INTO tmp_varchar1;
860        IF tmp_varchar1 = 'XE' THEN
861           db_is_XE := TRUE;
862        END IF; -- XE edition
863    EXCEPTION
864        WHEN OTHERS THEN NULL;  -- no edition column
865    END;
866  
867    EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE name = ''use_indirect_data_buffers'''
868         INTO tmp_varchar1;
869    IF tmp_varchar1 = 'TRUE'
870    THEN
871      db_VLM_enabled := TRUE;
872    END IF;
873  
874    --
875    -- Make sure we are in OPEN state
876  
877    EXECUTE IMMEDIATE 'SELECT status FROM V$INSTANCE'
878    INTO tmp_varchar1;
879    IF tmp_varchar1 NOT IN ('OPEN', 'OPEN MIGRATE') THEN
880      db_invalid_state := TRUE;
881    END IF;
882  
883    --
884    -- Time zone data
885    --
886    EXECUTE IMMEDIATE 'SELECT version from v$timezone_file'
887      INTO db_tz_version;
888  
889    --
890    -- Call procedure to fixup timezone info (if needed)
891    --
892  
893    tz_fixup (FALSE);
894  
895    IF db_patch_vers = c_version THEN
896      --
897      -- This block will reset db_major_vers to the value
898      -- in prv_version from registry$ - this allows the
899      -- comparision checks to behave correctly.
900      --
901      BEGIN
902        EXECUTE IMMEDIATE 'SELECT version, prv_version FROM sys.registry$
903                 WHERE cid = ''CATPROC'''
904        INTO t_db_dict_vers, t_db_prev_vers;
905  
906        IF t_db_dict_vers = db_version THEN
907          IF t_db_prev_vers != '' THEN
908            --
909            -- If prev vers is '', the DB
910            -- was never upgraded, so not really a re-run
911            --
912            db_major_vers := substr(t_db_prev_vers,1,6);   -- use prev catproc version
913          END IF;
914        ELSE
915          db_inplace_upgrade := TRUE;
916          db_major_vers  := substr(t_db_dict_vers,1,6);   -- use CATPROC version
917          db_version := t_db_dict_vers;
918        END IF;
919  
920      EXCEPTION
921         WHEN NO_DATA_FOUND THEN NULL; -- registry$ exists, but no CATPROC entry
922      END;
923    END IF;
924  
925    --
926    -- Set the newline depending on platform
927    --
928    IF INSTR(db_platform, 'WINDOWS') != 0 THEN
929      crlf := CHR(13) || CHR(10);       -- Windows gets the \r and \n
930    ELSE
931      crlf := CHR (10);                 -- Just \n for the rest of the world
932    END IF;
933  
934    init_initparams;
935    init_components;
936  
937    init_params;  -- Named params, not init params
938  
939    -- Process required data
940  
941    FOR i IN 1..max_reqp LOOP
942      BEGIN
943        EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE name =
944                :1 AND isdefault = ''TRUE'''
945           INTO c_value
946        USING reqp(i).name;
947        IF reqp(i).name = 'undo_management' THEN
948          --
949          -- Starting in 11.1, undo_management default is changed
950          -- from MANUAL to AUTO.
951          --
952          IF db_n_version = 102 THEN
953            reqp(i).db_match := TRUE;
954          END IF;
955        END IF;
956      EXCEPTION WHEN NO_DATA_FOUND THEN
957         reqp(i).db_match := FALSE;
958      END;
959    END LOOP;
960  
961    -- Find values for initialization parameters with minimum values
962    -- Convert to numeric values
963    store_oldval(minvp_db32);
964    store_oldval(minvp_db64);
965  
966    -- determine new values for initialization parameters with minimum values
967    find_newval(minvp_db32, 32);
968    find_newval(minvp_db64, 64);
969  
970    init_resources;
971  
972    init_preupchecks;
973  
974    init_preuprecommend;
975  
976    p_package_inited := TRUE;
977  
978  END init_package;
979  
980  PROCEDURE init_preupchecks
981  IS
982    i NUMBER := 1;
983  
984  BEGIN
985    -- ********************************************************
986    -- Define the pre-up checks
987    -- The order in which they are defined is the order in
988    -- which they will be executed.
989    -- ********************************************************
990  
991    define_check (i, 'UNSUPPORTED_VERSION', c_check_level_error,
992                  'Make sure we support a direct upgrade from this version');
993    check_table(check_names('UNSUPPORTED_VERSION').idx).fix_type := c_fix_source_manual;
994    -- DBUA does their own.
995    check_table(check_names('UNSUPPORTED_VERSION').idx).type    := c_type_check_interactive_only;
996  
997    define_check (i, 'DEFAULT_PROCESS_COUNT', c_check_level_warning,
998                  'Verify min process count is not too low');
999    check_table(i-1).fix_type := c_fix_source_manual;
1000    -- DBUA does their own.
1001    check_table(i-1).type    := c_type_check_interactive_only;
1002  
1003    define_check (i, 'COMPATIBLE_PARAMETER', c_check_level_error,
1004                  'Verify compatible parameter value is valid');
1005    check_table(i-1).fix_type := c_fix_source_manual;
1006    check_table(i-1).type    := c_type_check_interactive_only;
1007  
1008    define_check (i, 'OLS_SYS_MOVE', c_check_level_error,
1009                  'Check if SYSTEM.AUD$ needs to move to SYS.AUD$ before upgrade');
1010    check_table(i-1).fix_type := c_fix_source_manual;
1011  
1012    define_check (i, 'OCM_USER_PRESENT', c_check_level_warning,
1013                  'Check for OCM schema');
1014    define_check (i, 'APPQOSSYS_USER_PRESENT', c_check_level_warning,
1015                  'Check for APPQOSSYS schema');
1016  
1017    define_check (i, 'AUDSYS_USER_PRESENT', c_check_level_error,
1018                  'Verify if a user or role with the name AUDSYS exists');
1019    check_table(i-1).valid_versions := '102,111,112';
1020    check_table(i-1).fix_type := c_fix_source_manual;
1021  
1022    define_check (i, 'AUDIT_ADMIN_ROLE_PRESENT', c_check_level_error,
1023                  'Verify if a user or role with the name AUDIT_ADMIN exists');
1024    check_table(i-1).f_name_prefix := 'AAR_PRESENT';
1025    check_table(i-1).valid_versions := '102,111,112';
1026    check_table(i-1).fix_type := c_fix_source_manual;
1027  
1028    define_check (i, 'AUDIT_VIEWER', c_check_level_error,
1029                  'Verify if a user or role with the name AUDIT_VIEWER exists');
1030    check_table(i-1).valid_versions := '102,111,112';
1031    check_table(i-1).fix_type := c_fix_source_manual;
1032  
1033    define_check (i, 'SYSBACKUP_USER_PRESENT', c_check_level_error,
1034                  'Verify if a user or role with the name SYSBACKUP exists');
1035    check_table(i-1).valid_versions := '102,111,112';
1036    check_table(i-1).fix_type := c_fix_source_manual;
1037  
1038    define_check (i, 'SYSDG_USER_PRESENT', c_check_level_error,
1039                  'Verify if a user or role with the name SYSDG exists');
1040    check_table(i-1).valid_versions := '102,111,112';
1041    check_table(i-1).fix_type := c_fix_source_manual;
1042  
1043    define_check (i, 'SYSKM_USER_PRESENT', c_check_level_error,
1044                  'Verify if a user or role with the name SYSKM exists');
1045    check_table(i-1).valid_versions := '102,111,112';
1046    check_table(i-1).fix_type := c_fix_source_manual;
1047  
1048    define_check (i, 'CAPT_ADM_ROLE_PRESENT', c_check_level_error,
1049                  'Verify if a user or role with the name CAPTURE_ADMIN exists');
1050    check_table(i-1).valid_versions := '102,111,112';
1051    check_table(i-1).fix_type := c_fix_source_manual;
1052  
1053    define_check (i, 'GSMCATUSER_PRESENT', c_check_level_error,
1054                  'Verify if a user or role with the name GSMCATUSER exists');
1055    check_table(i-1).valid_versions := '102,111,112';
1056    check_table(i-1).fix_type := c_fix_source_manual;
1057  
1058    define_check (i, 'GSMUSER_USER_PRESENT', c_check_level_error,
1059                  'Verify if a user or role with the name GSMUSER exists');
1060    check_table(i-1).valid_versions := '102,111,112';
1061    check_table(i-1).fix_type := c_fix_source_manual;
1062  
1063    define_check (i, 'GSMADM_INT_PRESENT', c_check_level_error,
1064               'Verify if a user or role with the name GSMADMIN_INTERNAL exists');
1065    check_table(i-1).valid_versions := '102,111,112';
1066    check_table(i-1).fix_type := c_fix_source_manual;
1067  
1068    define_check (i, 'GSMUSER_ROLE_PRESENT', c_check_level_error,
1069                  'Verify if a user or role with the name GSMUSER exists');
1070    check_table(i-1).valid_versions := '102,111,112';
1071    check_table(i-1).fix_type := c_fix_source_manual;
1072  
1073    define_check (i, 'GSM_PAD_ROLE_PRESENT', c_check_level_error,
1074                  'Verify if a user or role with the name GSM_POOLADMIN exists');
1075    check_table(i-1).valid_versions := '102,111,112';
1076    check_table(i-1).fix_type := c_fix_source_manual;
1077  
1078    define_check (i, 'GSMADMIN_ROLE_PRESENT', c_check_level_error,
1079                  'Verify if a user or role with the name GSMADMIN exists');
1080    check_table(i-1).valid_versions := '102,111,112';
1081    check_table(i-1).fix_type := c_fix_source_manual;
1082  
1083    define_check (i, 'GDS_CT_ROLE_PRESENT', c_check_level_error,
1084                  'Verify if a user or role with the name GDS_CATALOG_SELECT exists');
1085    check_table(i-1).valid_versions := '102,111,112';
1086    check_table(i-1).fix_type := c_fix_source_manual;
1087  
1088  
1089    define_check (i, 'AWR_DBIDS_PRESENT', c_check_level_warning,
1090                  'Verify if AWR contains inactive DBIDs');
1091    check_table(i-1).fix_type := c_fix_target_manual_post;
1092  
1093    define_check (i, 'DV_ENABLED', c_check_level_warning,
1094                  'Check if Database Vault is enabled');
1095    check_table(i-1).fix_type := c_fix_source_manual;
1096  
1097    define_check (i, 'EM_PRESENT', c_check_level_warning,
1098                  'Check if Enterprise Manager is present');
1099  
1100    define_check (i, 'FILES_NEED_RECOVERY', c_check_level_error,
1101                  'Check for any pending file recoveries');
1102    check_table(i-1).fix_type := c_fix_source_manual;
1103  
1104    define_check (i, 'FILES_BACKUP_MODE', c_check_level_error,
1105                  'Check for files in backup mode');
1106    check_table(i-1).fix_type := c_fix_source_manual;
1107  
1108    define_check (i, '2PC_TXN_EXIST', c_check_level_error,
1109                  'Check for unresolved distributed transactions');
1110    check_table(i-1).fix_type := c_fix_source_manual;
1111    check_table(i-1).f_name_prefix := 'pending_2pc_txn';
1112  
1113    define_check (i, 'SYNC_STANDBY_DB', c_check_level_warning,
1114                  'Check for unsynced database');
1115    check_table(i-1).fix_type := c_fix_source_manual;
1116  
1117    define_check (i, 'ULTRASEARCH_DATA', c_check_level_warning,
1118                  'Check for any UltraSearch data');
1119    check_table(i-1).fix_type := c_fix_source_manual;
1120  
1121    define_check (i, 'REMOTE_REDO', c_check_level_error,
1122                  'Check for invalid values for log_archive_dest_1');
1123    check_table(i-1).fix_type := c_fix_source_manual;
1124    check_table(i-1).valid_versions := '102, 111';
1125  
1126    define_check (i, 'SYS_DEFAULT_TABLESPACE', c_check_level_warning,
1127                  'Check that SYS/SYSTEM default tablespace is SYSTEM');
1128    check_table(i-1).f_name_prefix := 'SYS_DEF_TABLESPACE';
1129  
1130    define_check (i, 'INVALID_LOG_ARCHIVE_FORMAT', c_check_level_error,
1131                  'Check log_archive_format settings');
1132    check_table(i-1).fix_type := c_fix_source_manual;
1133    check_table(i-1).f_name_prefix := 'INVALID_LAF';
1134  
1135    define_check (i, 'INVALID_USR_TABLEDATA', c_check_level_error,
1136                  'Check for invalid (not converted) user table data');
1137    check_table(check_names('INVALID_USR_TABLEDATA').idx).fix_type :=
1138          c_fix_source_manual;
1139  
1140    define_check (i, 'INVALID_SYS_TABLEDATA', c_check_level_error,
1141                  'Check for invalid (not converted) table data');
1142    check_table(check_names('INVALID_SYS_TABLEDATA').idx).fix_type :=
1143          c_fix_source_manual;
1144  
1145    define_check (i, 'ENABLED_INDEXES_TBL', c_check_level_warning,
1146                  'Check for existance of sys.enabled$indexes table');
1147    define_check (i, 'ORDIMAGEINDEX', c_check_level_warning,
1148                  'Check for use of Oracle Multimedia image domain index');
1149    check_table(i-1).fix_type := c_fix_source_manual;
1150  
1151    define_check (i, 'DBMS_LDAP_DEPENDENCIES_EXIST', c_check_level_warning,
1152                  'Check for dependency on DBMS_LDAP package');
1153    check_table(i-1).f_name_prefix := 'DBMS_LDAP_DEP_EXIST';
1154    check_table(i-1).fix_type := c_fix_source_manual;
1155  
1156    define_check (i, 'REMOVE_DMSYS', c_check_level_warning,
1157                  'Check for existance of DMSYS schema');
1158    check_table(i-1).valid_versions := '102,111,112,121';
1159  
1160    define_check (i, 'INVALID_OBJECTS_EXIST', c_check_level_warning,
1161                  'Check for invalid objects');
1162    check_table(i-1).f_name_prefix := 'INVALID_OBJ_EXIST';
1163    check_table(i-1).fix_type := c_fix_target_manual_post;
1164  
1165    define_check (i, 'AMD_EXISTS', c_check_level_info,
1166                  'Check to see if AMD is present in the database');
1167    check_table(i-1).fix_type := c_fix_target_manual_pre;
1168    -- DBUA does their own.
1169    check_table(i-1).type    := c_type_check_interactive_only;
1170  
1171    define_check (i, 'EXF_RUL_EXISTS', c_check_level_info,
1172                  'Check to see if EXF/RUL are present in the database');
1173    check_table(i-1).fix_type := c_fix_target_manual_pre;
1174  
1175    define_check (i, 'NEW_TIME_ZONES_EXIST', c_check_level_error,
1176                  'Check for use of newer timezone data file');
1177    check_table(i-1).fix_type := c_fix_target_manual_pre;
1178  
1179    define_check (i, 'OLD_TIME_ZONES_EXIST', c_check_level_info,
1180                  'Check for use of older timezone data file');
1181    check_table(i-1).fix_type := c_fix_target_manual_post;
1182  
1183    define_check (i, 'PURGE_RECYCLEBIN', c_check_level_error,
1184                  'Check that recycle bin is empty prior to upgrade');
1185  
1186    define_check (i, 'NACL_OBJECTS_EXIST', c_check_level_warning,
1187                  'Check for Network ACL Objects in use');
1188    check_table(i-1).fix_type := c_fix_source_manual;
1189  
1190    define_check (i, 'JOB_QUEUE_PROCESS', c_check_level_warning,
1191                  'Check JOB_QUEUE_PROCESSES value');
1192    -- This check may get changed to error in the _check routine
1193    check_table(i-1).fix_type := c_fix_source_manual;
1194  
1195    -- Define RAS related pre-up checks
1196    define_check (i, 'PROVISIONER_PRESENT', c_check_level_error,
1197                  'Verify if a user or role with the name PROVISIONER exists');
1198    check_table(i-1).valid_versions := '102,111,112';
1199    check_table(i-1).fix_type := c_fix_source_manual;
1200  
1201    define_check (i, 'XS_RESOURCE_PRESENT', c_check_level_error,
1202                  'Verify if a user or role with the name XS_RESOURCE exists');
1203    check_table(i-1).valid_versions := '102,111,112';
1204    check_table(i-1).fix_type := c_fix_source_manual;
1205  
1206    define_check (i, 'XS_SESSION_ADMIN', c_check_level_error,
1207                  'Verify if a user or role with the name XS_SESSION_ADMIN exists');
1208    check_table(i-1).valid_versions := '102,111,112';
1209    check_table(i-1).fix_type := c_fix_source_manual;
1210  
1211    define_check (i, 'XS_NAMESPACE_ADMIN', c_check_level_error,
1212                  'Verify if a user or role with the name XS_NAMESPACE_ADMIN exists');
1213    check_table(i-1).valid_versions := '102,111,112';
1214    check_table(i-1).fix_type := c_fix_source_manual;
1215  
1216    define_check (i, 'XS_CACHE_ADMIN', c_check_level_error,
1217                  'Verify if a user or role with the name XS_CACHE_ADMIN exists');
1218    check_table(i-1).valid_versions := '102,111,112';
1219    check_table(i-1).fix_type := c_fix_source_manual;
1220  
1221    define_check (i, 'NOT_UPG_BY_STD_UPGRD', c_check_level_info,
1222                  'Identify existing components that will NOT be upgraded');
1223    check_table(i-1).valid_versions := '102,111,112';
1224    check_table(i-1).fix_type := c_fix_target_manual_post;
1225  
1226    define_check (i, 'EMX_BASIC_ROLE_PRESENT', c_check_level_error,
1227                  'Verify if a user or role with the name EM_EXPRESS_BASIC exists');
1228    check_table(i-1).valid_versions := '102,111,112';
1229    check_table(i-1).fix_type := c_fix_source_manual;
1230  
1231    define_check (i, 'EMX_ALL_ROLE_PRESENT', c_check_level_error,
1232                  'Verify if a user or role with the name EM_EXPRESS_ALL exists');
1233    check_table(i-1).valid_versions := '102,111,112';
1234    check_table(i-1).fix_type := c_fix_source_manual;
1235  
1236    -- check open_cursors value is at minimal value for APEX upgrades
1237    -- error condition
1238    define_check (i, 'OPEN_CURSORS', c_check_level_error,
1239                  'Check that OPEN_CURSORS is set at 150 or higher');
1240    check_table(i-1).fix_type := c_fix_source_manual;
1241  
1242    define_check (i, 'XBRL_VERSION', c_check_level_warning,
1243                  'Check for existence of XBRLSYS schema');
1244    check_table(i-1).valid_versions := '112,121';
1245  
1246    -- let user know that apex upgrade can be done manually prior to db upgrade
1247    define_check (i, 'APEX_UPGRADE_MSG', c_check_level_info,
1248                  'Check that APEX will need to be upgraded.');
1249    check_table(i-1).fix_type := c_fix_source_manual;
1250  
1251    -- check if user needs to know resource_limit's default is changing
1252    -- from FALSE to TRUE starting in 12102
1253    define_check (i, 'DEFAULT_RESOURCE_LIMIT', c_check_level_warning,
1254                  'RESOURCE_LIMIT default has changed to TRUE starting 12.1.0.2');
1255    check_table(i-1).valid_versions := '102,111,112,121';
1256    check_table(i-1).fix_type := c_fix_source_manual;
1257  
1258    pCheckCount := i -1;
1259  
1260  END init_preupchecks;
1261  
1262  
1263  PROCEDURE init_preuprecommend
1264  IS
1265    --
1266    -- Always start with the existing pCheckCount
1267    --
1268    i NUMBER := pCheckCount + 1;
1269  
1270  BEGIN
1271  
1272    -- ********************************************************
1273    -- Define the pre-up recommendations
1274    -- ********************************************************
1275    define_check (i, 'DICTIONARY_STATS', c_check_level_recommend,
1276                  'Gather Dictionary Stats prior to upgrade');
1277    check_table(i-1).type := c_type_recommend_pre;
1278    define_check (i, 'HIDDEN_PARAMS',  c_check_level_recommend,
1279                  'Check for any hidden params defined');
1280    check_table(i-1).type := c_type_recommend_pre;
1281    define_check (i, 'UNDERSCORE_EVENTS',  c_check_level_recommend,
1282                  'Check for any underscore events that are defined');
1283    check_table(i-1).type := c_type_recommend_pre;
1284    define_check (i, 'AUDIT_RECORDS',  c_check_level_recommend,
1285                  'Recommend purging audit records');
1286    check_table(i-1).type := c_type_recommend_pre;
1287    define_check (i, 'FIXED_OBJECTS',  c_check_level_recommend,
1288                  'Recommend running stats on fixed objects');
1289    check_table(i-1).type := c_type_recommend_post;
1290    pCheckCount := i -1;
1291  
1292  END init_preuprecommend;
1293  
1294  
1295  PROCEDURE init_initparams
1296  IS
1297    t_null          CHAR(1);
1298    idx             BINARY_INTEGER;
1299  BEGIN
1300  
1301    -- determine if memory_target value is set
1302    BEGIN
1303      EXECUTE IMMEDIATE 'SELECT NULL FROM v$parameter WHERE name=''memory_target'''
1304        INTO t_null;
1305         db_memory_target := TRUE;
1306    EXCEPTION
1307       WHEN NO_DATA_FOUND THEN NULL;  -- memory_target value not set
1308     END;
1309  
1310    --
1311    -- Initialize parameters with minimum values
1312    --
1313    -- the loop sets values that differ for a 32-bit db versus a 64-bit db
1314  
1315    FOR i IN 1..2 LOOP
1316  
1317      idx := 0;
1318  
1319      -- 32-bit: up sga_target 336M to 528M. up memory_target 436M to 628M.
1320      -- 64-bit: up sga_target 672M to 744M. up memory_target 836M to 844M.
1321  
1322      IF i = 1 THEN
1323        IF db_memory_target THEN
1324          store_minval_dbbit(32, idx,'memory_target', 628*c_mb); --  628 MB
1325        END IF;
1326        mt_idx := idx;
1327  
1328        -- sga_target = cs + jv + sp + lp + strp + extra :
1329        -- (12*4 + 64 + 180 + (12*2*2)*.5 + 0 + 8+32+56) -- 412MB
1330        -- (32*4 + 64 + 180 + (32*2*2)*.5 + 0 + 8+32+56) -- 532MB
1331        -- (64*4 + 64 + 180 + (64*2*2)*.5 + 0 + 8+32+56) -- 724MB
1332        store_minval_dbbit(32, idx,'sga_target',
1333             (32*4 + 64 + 180 + (32*2*2)*.5 + 0 + 8+32+56) * (c_mb)); -- 532MB
1334        tg_idx := idx;
1335  
1336        store_minval_dbbit(32, idx,'shared_pool_size',236*c_mb); -- 236 MB
1337        sp_idx := idx;
1338  
1339        store_minval_dbbit(32, idx,'java_pool_size',   64*c_mb); -- 64 MB
1340        jv_idx := idx;
1341  
1342      ELSE  -- Second case...
1343        --
1344        -- Now for 64 bit
1345  
1346        IF db_memory_target THEN
1347          store_minval_dbbit(64,idx,'memory_target', 844*c_mb); --  844 MB
1348        END IF;
1349        mt_idx := idx;
1350  
1351        -- sga_target = cs + jv + sp + lp + strp + extra :
1352        -- (12*4 + 100 + 280 + (12*2*2)*.5 + 0 + 8*2+32*2+28+20+16) -- 596M
1353        -- (32*4 + 100 + 280 + (32*2*2)*.5 + 0 + 8*2+32*2+28+20+16) -- 716M
1354        -- (64*4 + 100 + 280 + (64*2*2)*.5 + 0 + 8*2+32*2+28+20+16) -- 908M
1355        store_minval_dbbit(64, idx,'sga_target',
1356           (32*4 + 100 + 280 + 32*2 + 0 + 16+64+28+20+16) * c_mb); --716MB
1357        tg_idx := idx;
1358  
1359        store_minval_dbbit(64,idx,'shared_pool_size',472*c_mb); -- 472 MB
1360        sp_idx := idx;
1361  
1362        store_minval_dbbit(64,idx,'java_pool_size',  128*c_mb); -- 128 MB
1363        jv_idx := idx;
1364  
1365        store_minval_dbbit(0,idx,'db_cache_size',    48*c_mb); --  48 MB
1366        cs_idx := idx;
1367  
1368        store_minval_dbbit(0,idx,'pga_aggregate_target', 24*c_mb); --  24 MB
1369        pg_idx := idx;
1370  
1371        -- Added large_pool_size and streams_pool_size so that we can include these
1372        -- user-specified values (if set) for sga_target minimum caculation.
1373        -- Note that we're not making minimum recommendations for these 2 pools at
1374        -- at this time.
1375      END IF;
1376    END LOOP;
1377  
1378    store_minval_dbbit(0,idx,'large_pool_size', 0);
1379    lp_idx := idx;
1380    store_minval_dbbit(0,idx,'streams_pool_size', 0);
1381    str_idx := idx;
1382    --
1383    -- For manual mode, there is a complete preup-check for
1384    -- this.
1385    --
1386    store_minval_dbbit(0, idx,'processes', c_max_processes);
1387    max_minvp := idx;
1388  
1389  END init_initparams;
1390  
1391  PROCEDURE init_params
1392  IS
1393    i        NUMBER;
1394    tmp_num2 NUMBER;
1395    tmp_num3 NUMBER;
1396    t_null   CHAR(1);
1397    c_value  VARCHAR2(80);
1398    idx      BINARY_INTEGER;
1399  
1400  BEGIN
1401  
1402  /*
1403     To identify new obsolete and deprecated parameters, use the
1404     following queries and diff with the list from the prior release:
1405  
1406     select name from v$obsolete_parameter order by name;
1407  
1408     select name from v$parameter
1409     where isdeprecated = 'TRUE' order by name;
1410  
1411  */
1412  
1413    -- Load Obsolete and Deprecated parameters
1414  
1415    -- Obsolete initialization parameters in release 8.0 --
1416    idx:=0;
1417    store_removed(idx,'checkpoint_process', '8.0', FALSE);
1418    store_removed(idx,'fast_cache_flush', '8.0', FALSE);
1419    store_removed(idx,'gc_db_locks', '8.0', FALSE);
1420    store_removed(idx,'gc_freelist_groups', '8.0', FALSE);
1421    store_removed(idx,'gc_rollback_segments', '8.0', FALSE);
1422    store_removed(idx,'gc_save_rollback_locks', '8.0', FALSE);
1423    store_removed(idx,'gc_segments', '8.0', FALSE);
1424    store_removed(idx,'gc_tablespaces', '8.0', FALSE);
1425    store_removed(idx,'io_timeout', '8.0', FALSE);
1426    store_removed(idx,'init_sql_files', '8.0', FALSE);
1427    store_removed(idx,'ipq_address', '8.0', FALSE);
1428    store_removed(idx,'ipq_net', '8.0', FALSE);
1429    store_removed(idx,'lm_domains', '8.0', FALSE);
1430    store_removed(idx,'lm_non_fault_tolerant', '8.0', FALSE);
1431    store_removed(idx,'mls_label_format', '8.0', FALSE);
1432    store_removed(idx,'optimizer_parallel_pass', '8.0', FALSE);
1433    store_removed(idx,'parallel_default_max_scans', '8.0', FALSE);
1434    store_removed(idx,'parallel_default_scan_size', '8.0', FALSE);
1435    store_removed(idx,'post_wait_device', '8.0', FALSE);
1436    store_removed(idx,'sequence_cache_hash_buckets', '8.0', FALSE);
1437    store_removed(idx,'unlimited_rollback_segments', '8.0', FALSE);
1438    store_removed(idx,'use_readv', '8.0', FALSE);
1439    store_removed(idx,'use_sigio', '8.0', FALSE);
1440    store_removed(idx,'v733_plans_enabled', '8.0', FALSE);
1441  
1442    -- Obsolete in 8.1
1443    store_removed(idx,'allow_partial_sn_results', '8.1', FALSE);
1444    store_removed(idx,'arch_io_slaves', '8.1', FALSE);
1445    store_removed(idx,'b_tree_bitmap_plans', '8.1', FALSE);
1446    store_removed(idx,'backup_disk_io_slaves', '8.1', FALSE);
1447    store_removed(idx,'cache_size_threshold', '8.1', FALSE);
1448    store_removed(idx,'cleanup_rollback_entries', '8.1', FALSE);
1449    store_removed(idx,'close_cached_open_cursors', '8.1', FALSE);
1450    store_removed(idx,'complex_view_merging', '8.1', FALSE);
1451    store_removed(idx,'db_block_checkpoint_batch', '8.1', FALSE);
1452    store_removed(idx,'db_block_lru_extended_statistics', '8.1', FALSE);
1453    store_removed(idx,'db_block_lru_statistics', '8.1', FALSE);
1454    store_removed(idx,'db_file_simultaneous_writes', '8.1', FALSE);
1455    store_removed(idx,'delayed_logging_block_cleanouts', '8.1', FALSE);
1456    store_removed(idx,'discrete_transactions_enabled', '8.1', FALSE);
1457    store_removed(idx,'distributed_recovery_connection_hold_time', '8.1', FALSE);
1458    store_removed(idx,'ent_domain_name', '8.1', FALSE);
1459    store_removed(idx,'fast_full_scan_enabled', '8.1', FALSE);
1460    store_removed(idx,'freeze_DB_for_fast_instance_recovery', '8.1', FALSE);
1461    store_removed(idx,'gc_latches', '8.1', FALSE);
1462    store_removed(idx,'gc_lck_procs', '8.1', FALSE);
1463    store_removed(idx,'job_queue_keep_connections', '8.1', FALSE);
1464    store_removed(idx,'large_pool_min_alloc', '8.1', FALSE);
1465    store_removed(idx,'lgwr_io_slaves', '8.1', FALSE);
1466    store_removed(idx,'lm_locks', '8.1', FALSE);
1467    store_removed(idx,'lm_procs', '8.1', FALSE);
1468    store_removed(idx,'lm_ress', '8.1', FALSE);
1469    store_removed(idx,'lock_sga_areas', '8.1', FALSE);
1470    store_removed(idx,'log_archive_buffer_size', '8.1', FALSE);
1471    store_removed(idx,'log_archive_buffers', '8.1', FALSE);
1472    store_removed(idx,'log_block_checksum', '8.1', FALSE);
1473    store_removed(idx,'log_files', '8.1', FALSE);
1474    store_removed(idx,'log_simultaneous_copies', '8.1', FALSE);
1475    store_removed(idx,'log_small_entry_max_size', '8.1', FALSE);
1476    store_removed(idx,'mts_rate_log_size', '8.1', FALSE);
1477    store_removed(idx,'mts_rate_scale', '8.1', FALSE);
1478    store_removed(idx,'ogms_home', '8.1', FALSE);
1479    store_removed(idx,'ops_admin_group', '8.1', FALSE);
1480    store_removed(idx,'optimizer_search_limit', '8.1', FALSE);
1481    store_removed(idx,'parallel_default_max_instances', '8.1', FALSE);
1482    store_removed(idx,'parallel_min_message_pool', '8.1', FALSE);
1483    store_removed(idx,'parallel_server_idle_time', '8.1', FALSE);
1484    store_removed(idx,'parallel_transaction_resource_timeout', '8.1', FALSE);
1485    store_removed(idx,'push_join_predicate', '8.1', FALSE);
1486    store_removed(idx,'reduce_alarm', '8.1', FALSE);
1487    store_removed(idx,'row_cache_cursors', '8.1', FALSE);
1488    store_removed(idx,'sequence_cache_entries', '8.1', FALSE);
1489    store_removed(idx,'sequence_cache_hash_buckets', '8.1', FALSE);
1490    store_removed(idx,'shared_pool_reserved_min_alloc', '8.1', FALSE);
1491    store_removed(idx,'snapshot_refresh_interval', '8.1', FALSE);
1492    store_removed(idx,'snapshot_refresh_keep_connections', '8.1', FALSE);
1493    store_removed(idx,'snapshot_refresh_processes', '8.1', FALSE);
1494    store_removed(idx,'sort_direct_writes', '8.1', FALSE);
1495    store_removed(idx,'sort_read_fac', '8.1', FALSE);
1496    store_removed(idx,'sort_spacemap_size', '8.1', FALSE);
1497    store_removed(idx,'sort_write_buffer_size', '8.1', FALSE);
1498    store_removed(idx,'sort_write_buffers', '8.1', FALSE);
1499    store_removed(idx,'spin_count', '8.1', FALSE);
1500    store_removed(idx,'temporary_table_locks', '8.1', FALSE);
1501    store_removed(idx,'use_ism', '8.1', FALSE);
1502  
1503    -- Obsolete in 9.0.1
1504    store_removed(idx,'always_anti_join', '9.0.1', FALSE);
1505    store_removed(idx,'always_semi_join', '9.0.1', FALSE);
1506    store_removed(idx,'db_block_lru_latches', '9.0.1', FALSE);
1507    store_removed(idx,'db_block_max_dirty_target', '9.0.1', FALSE);
1508    store_removed(idx,'gc_defer_time', '9.0.1', FALSE);
1509    store_removed(idx,'gc_releasable_locks', '9.0.1', FALSE);
1510    store_removed(idx,'gc_rollback_locks', '9.0.1', FALSE);
1511    store_removed(idx,'hash_multiblock_io_count', '9.0.1', FALSE);
1512    store_removed(idx,'instance_nodeset', '9.0.1', FALSE);
1513    store_removed(idx,'job_queue_interval', '9.0.1', FALSE);
1514    store_removed(idx,'ops_interconnects', '9.0.1', FALSE);
1515    store_removed(idx,'optimizer_percent_parallel', '9.0.1', FALSE);
1516    store_removed(idx,'sort_multiblock_read_count', '9.0.1', FALSE);
1517    store_removed(idx,'text_enable', '9.0.1', FALSE);
1518  
1519    -- Obsolete in 9.2
1520    store_removed(idx,'distributed_transactions', '9.2', FALSE);
1521    store_removed(idx,'max_transaction_branches', '9.2', FALSE);
1522    store_removed(idx,'parallel_broadcast_enabled', '9.2', FALSE);
1523    store_removed(idx,'standby_preserves_names', '9.2', FALSE);
1524  
1525    -- Obsolete in 10.1 (mts_ renames commented out)
1526    store_removed(idx,'dblink_encrypt_login', '10.1', FALSE);
1527    store_removed(idx,'hash_join_enabled', '10.1', FALSE);
1528    store_removed(idx,'log_parallelism', '10.1', FALSE);
1529    store_removed(idx,'max_rollback_segments', '10.1', FALSE);
1530    store_removed(idx,'mts_listener_address', '10.1', FALSE);
1531    store_removed(idx,'mts_multiple_listeners', '10.1', FALSE);
1532    store_removed(idx,'mts_service', '10.1', FALSE);
1533    store_removed(idx,'optimizer_max_permutations', '10.1', FALSE);
1534    store_removed(idx,'oracle_trace_collection_name', '10.1', FALSE);
1535    store_removed(idx,'oracle_trace_collection_path', '10.1', FALSE);
1536    store_removed(idx,'oracle_trace_collection_size', '10.1', FALSE);
1537    store_removed(idx,'oracle_trace_enable', '10.1', FALSE);
1538    store_removed(idx,'oracle_trace_facility_name', '10.1', FALSE);
1539    store_removed(idx,'oracle_trace_facility_path', '10.1', FALSE);
1540    store_removed(idx,'partition_view_enabled', '10.1', FALSE);
1541    store_removed(idx,'plsql_native_c_compiler', '10.1', FALSE);
1542    store_removed(idx,'plsql_native_linker', '10.1', FALSE);
1543    store_removed(idx,'plsql_native_make_file_name', '10.1', FALSE);
1544    store_removed(idx,'plsql_native_make_utility', '10.1', FALSE);
1545    store_removed(idx,'row_locking', '10.1', FALSE);
1546    store_removed(idx,'serializable', '10.1', FALSE);
1547    store_removed(idx,'transaction_auditing', '10.1', FALSE);
1548    store_removed(idx,'undo_suppress_errors', '10.1', FALSE);
1549  
1550    -- Deprecated in 10.1, no new value
1551    store_removed(idx,'global_context_pool_size', '10.1', TRUE);
1552    store_removed(idx,'log_archive_start', '10.1', TRUE);
1553    store_removed(idx,'max_enabled_roles', '10.1', TRUE);
1554    store_removed(idx,'parallel_automatic_tuning', '10.1', TRUE);
1555  
1556    store_removed(idx,'_average_dirties_half_life', '10.1', TRUE);
1557    store_removed(idx,'_compatible_no_recovery', '10.1', TRUE);
1558    store_removed(idx,'_db_no_mount_lock', '10.1', TRUE);
1559    store_removed(idx,'_lm_direct_sends', '10.1', TRUE);
1560    store_removed(idx,'_lm_multiple_receivers', '10.1', TRUE);
1561    store_removed(idx,'_lm_statistics', '10.1', TRUE);
1562    store_removed(idx,'_oracle_trace_events', '10.1', TRUE);
1563    store_removed(idx,'_oracle_trace_facility_version', '10.1', TRUE);
1564    store_removed(idx,'_seq_process_cache_const', '10.1', TRUE);
1565  
1566    -- Obsolete in 10.2
1567    store_removed(idx,'enqueue_resources', '10.2', FALSE);
1568  
1569    -- Deprecated, but not renamed in 10.2
1570    store_removed(idx,'logmnr_max_persistent_sessions', '10.2', TRUE);
1571    store_removed(idx,'max_commit_propagation_delay', '10.2', TRUE);
1572    store_removed(idx,'remote_archive_enable', '10.2', TRUE);
1573    store_removed(idx,'serial_reuse', '10.2', TRUE);
1574    store_removed(idx,'sql_trace', '10.2', TRUE);
1575  
1576    -- Deprecated, but not renamed in 11.1
1577    store_removed(idx,'commit_write', '11.1', TRUE);
1578    store_removed(idx,'cursor_space_for_time', '11.1', TRUE);
1579    store_removed(idx,'instance_groups', '11.1', TRUE);
1580    store_removed(idx,'log_archive_local_first', '11.1', TRUE);
1581    store_removed(idx,'remote_os_authent', '11.1', TRUE);
1582    store_removed(idx,'sql_version', '11.1', TRUE);
1583    store_removed(idx,'standby_archive_dest', '11.1', TRUE);
1584    store_removed(idx,'plsql_v2_compatibility', '11.1', TRUE);
1585  
1586    -- Instead a new parameter diagnostic_dest is
1587    -- replace two (core_dump_dest lives)
1588    store_removed(idx,'background_dump_dest', '11.1', TRUE);
1589    store_removed(idx,'user_dump_dest', '11.1', TRUE);
1590  
1591    -- Obsolete in 11.1
1592  
1593    store_removed(idx,'_log_archive_buffer_size', '11.1', FALSE);
1594    store_removed(idx,'_fast_start_instance_recover_target', '11.1', FALSE);
1595    store_removed(idx,'_lm_rcv_buffer_size', '11.1', FALSE);
1596    store_removed(idx,'ddl_wait_for_locks', '11.1', FALSE);
1597    store_removed(idx,'remote_archive_enable', '11.1', FALSE);
1598  
1599    -- Deprecated in 11.2
1600    store_removed(idx,'active_instance_count', '11.2', TRUE);
1601    store_removed(idx,'cursor_space_for_time', '11.2', TRUE);
1602    store_removed(idx,'fast_start_io_target', '11.2', TRUE);
1603    store_removed(idx,'global_context_pool_size', '11.2', TRUE);
1604    store_removed(idx,'instance_groups', '11.2', TRUE);
1605    store_removed(idx,'lock_name_space', '11.2', TRUE);
1606    store_removed(idx,'log_archive_local_first', '11.2', TRUE);
1607    store_removed(idx,'max_commit_propagation_delay', '11.2', TRUE);
1608    store_removed(idx,'parallel_automatic_tuning', '11.2', TRUE);
1609    store_removed(idx,'parallel_io_cap_enabled', '11.2', TRUE);
1610    store_removed(idx,'resource_manager_cpu_allocation', '11.2', TRUE);
1611    store_removed(idx,'serial_reuse', '11.2', TRUE);
1612  
1613    -- Obsolete in 11.2
1614    store_removed(idx,'drs_start', '11.2', FALSE);
1615    store_removed(idx,'gc_files_to_locks', '11.2', FALSE);
1616    store_removed(idx,'plsql_native_library_dir', '11.2', FALSE);
1617    store_removed(idx,'plsql_native_library_subdir_count', '11.2', FALSE);
1618    store_removed(idx,'sql_version', '11.2', FALSE);
1619    store_removed(idx,'cell_partition_large_extents', '11.2', FALSE);
1620  
1621    -- Sessions removed for XE upgrade only
1622    IF db_is_XE THEN
1623      store_removed(idx,'sessions', '10.1', FALSE);
1624    END IF;
1625  
1626    --
1627    -- Removed for 12.1
1628    --
1629    store_removed(idx,'_lm_validate_resource_type', '12.1', TRUE);
1630    store_removed(idx,'sec_case_sensitive_logon', '12.1', TRUE);
1631    max_op := idx;
1632  
1633    -- Load Renamed parameters
1634  
1635    -- Initialization Parameters Renamed in Release 8.0 --
1636    idx:=0;
1637    store_renamed(idx,'async_read','disk_asynch_io');
1638    store_renamed(idx,'async_write','disk_asynch_io');
1639    store_renamed(idx,'ccf_io_size','db_file_direct_io_count');
1640    store_renamed(idx,'db_file_standby_name_convert','db_file_name_convert');
1641    store_renamed(idx,'db_writers','dbwr_io_slaves');
1642    store_renamed(idx,'log_file_standby_name_convert',
1643                      'log_file_name_convert');
1644    store_renamed(idx,'snapshot_refresh_interval','job_queue_interval');
1645  
1646    -- Initialization Parameters Renamed in Release 8.1.4 --
1647    store_renamed(idx,'mview_rewrite_enabled','query_rewrite_enabled');
1648    store_renamed(idx,'rewrite_integrity','query_rewrite_integrity');
1649  
1650    -- Initialization Parameters Renamed in Release 8.1.5 --
1651    store_renamed(idx,'nls_union_currency','nls_dual_currency');
1652    store_renamed(idx,'parallel_transaction_recovery',
1653                      'fast_start_parallel_rollback');
1654  
1655    -- Initialization Parameters Renamed in Release 9.0.1 --
1656    store_renamed(idx,'fast_start_io_target','fast_start_mttr_target');
1657    store_renamed(idx,'mts_circuits','circuits');
1658    store_renamed(idx,'mts_dispatchers','dispatchers');
1659    store_renamed(idx,'mts_max_dispatchers','max_dispatchers');
1660    store_renamed(idx,'mts_max_servers','max_shared_servers');
1661    store_renamed(idx,'mts_servers','shared_servers');
1662    store_renamed(idx,'mts_sessions','shared_server_sessions');
1663    store_renamed(idx,'parallel_server','cluster_database');
1664    store_renamed(idx,'parallel_server_instances',
1665                      'cluster_database_instances');
1666  
1667    -- Initialization Parameters Renamed in Release 9.2 --
1668    store_renamed(idx,'drs_start','dg_broker_start');
1669  
1670    -- Initialization Parameters Renamed in Release 10.1 --
1671    store_renamed(idx,'lock_name_space','db_unique_name');
1672  
1673    -- Initialization Parameters Renamed in Release 10.2 --
1674    -- none as of 4/1/05
1675  
1676    -- Initialization Parameters Renamed in Release 11.2 --
1677  
1678    store_renamed(idx,'buffer_pool_keep', 'db_keep_cache_size');
1679    store_renamed(idx,'buffer_pool_recycle', 'db_recycle_cache_size');
1680    store_renamed(idx,'commit_write', 'commit_logging,commit_wait');
1681  
1682    max_rp := idx;
1683  
1684    -- Initialize special initialization parameters
1685  
1686    idx := 0;
1687    store_special(idx,'rdbms_server_dn',NULL,'ldap_directory_access','SSL');
1688    store_special(idx,'plsql_compiler_flags','INTERPRETED',
1689                      'plsql_code_type','INTERPRETED');
1690    store_special(idx,'plsql_compiler_flags','NATIVE',
1691                      'plsql_code_type','NATIVE');
1692    store_special(idx,'plsql_debug','TRUE',
1693                      'plsql_optimize_level','1');
1694    store_special(idx,'plsql_compiler_flags','DEBUG',
1695                      'plsql_optimize_level','1');
1696  
1697    --  Only use these special parameters for databases
1698    --  in which Very Large Memory is not enabled
1699  
1700    IF db_VLM_enabled = FALSE THEN
1701      store_special(idx,'db_block_buffers',NULL,
1702                        'db_cache_size',NULL);
1703      store_special(idx,'buffer_pool_recycle',NULL,
1704                        'db_recycle_cache_size',NULL);
1705      store_special(idx,'buffer_pool_keep',NULL,
1706                        'db_keep_cache_size',NULL);
1707    END IF;
1708  
1709    --
1710    -- for 12.1, AUDIT_TRAIL has depreicated several values
1711    -- that were allowed for AUDIT_TRAIL, they have new
1712    -- mappings.
1713    -- Use store_special  - bug  2631483 and set the
1714    -- dbua_outInUpdate flag so output_xml_initparams
1715    -- dumps these out
1716    --
1717    store_special(idx,'audit_trail','FALSE',
1718                      'audit_trail','NONE');
1719    sp(idx).dbua_OutInUpdate := TRUE;
1720    store_special(idx,'audit_trail','TRUE',
1721                      'audit_trail','DB');
1722    sp(idx).dbua_OutInUpdate := TRUE;
1723    store_special(idx,'audit_trail','DB_EXTENDED',
1724                      'audit_trail','DB,EXTENDED');
1725    sp(idx).dbua_OutInUpdate := TRUE;
1726  
1727    max_sp := idx;
1728  
1729    --
1730    -- Min value for db_block_size
1731    --
1732    idx := 0;
1733    store_required (idx, 'db_block_size', 2048, '', 3);
1734  
1735    IF db_n_version = 102 THEN
1736      -- If undo_management is not specified in pre-11g database, then
1737      -- it needs to be specified MANUAL since the default is changing
1738      -- from MANUAL to AUTO starting in 11.1.
1739      store_required(idx, 'undo_management', 0, 'MANUAL', 2);
1740    END IF;
1741    max_reqp := idx;
1742  
1743    --
1744    -- Now run through them and figure out what is
1745    -- or isn't in use.
1746    --
1747    FOR i IN 1..max_rp LOOP
1748      BEGIN
1749        EXECUTE IMMEDIATE 'SELECT NULL FROM v$parameter WHERE name =
1750              LOWER(:1) AND isdefault = ''FALSE'''
1751        INTO t_null
1752        USING rp(i).oldname;
1753        rp(i).db_match := TRUE;
1754      EXCEPTION WHEN NO_DATA_FOUND THEN
1755         rp(i).db_match := FALSE;
1756      END;
1757    END LOOP;
1758  
1759    FOR i IN 1..max_op LOOP
1760      BEGIN
1761        EXECUTE IMMEDIATE 'SELECT NULL FROM v$parameter WHERE name =
1762           LOWER(:1) AND isdefault = ''FALSE'''
1763        INTO t_null
1764        USING op(i).name;
1765        op(i).db_match := TRUE;
1766      EXCEPTION WHEN NO_DATA_FOUND THEN
1767        op(i).db_match := FALSE;
1768      END;
1769    END LOOP;
1770  
1771    --
1772    -- The store_special procedure inits the db_match to
1773    -- field to FALSE, so only when we match do we need to
1774    -- do something.
1775    --
1776    FOR i IN 1..max_sp LOOP
1777      BEGIN
1778        EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE name =
1779                 LOWER(:1) AND isdefault = ''FALSE'''
1780        INTO c_value
1781        USING sp(i).oldname;
1782  
1783        IF sp(i).oldvalue IS NULL OR c_value = sp(i).oldvalue THEN
1784  
1785          sp(i).db_match := TRUE;
1786  
1787          --
1788          -- No old value specified, or oldvalue is what we are
1789          -- looking for
1790          --
1791  
1792          --           db_block_buffers
1793          -- Example:  db_block_buffers = 7000
1794  
1795          IF sp(i).oldname = 'db_block_buffers' THEN
1796            sp(i).newvalue := TO_CHAR(TO_NUMBER(c_value) * db_block_size);
1797  
1798          ELSIF sp(i).oldname = 'buffer_pool_recycle' OR
1799                sp(i).oldname = 'buffer_pool_keep' THEN
1800  
1801            --           buffer_pool_...
1802            -- Examples: buffer_pool_recycle= lru_latches:1, buffers:200
1803            --  buffer_pool_keep= (buffers:100,lru_latches:1)
1804  
1805            IF INSTR(UPPER(c_value),'BUFFERS:') > 0 THEN -- has keyword
1806              IF INSTR(SUBSTR(c_value,INSTR(UPPER(c_value),
1807                      'BUFFERS:')+8),',') > 0  THEN
1808                -- has second keyword after BUFFERS
1809                sp(i).newvalue := TO_CHAR(TO_NUMBER(SUBSTR(c_value,
1810                       INSTR(UPPER(c_value),'BUFFERS:')+8,
1811                       INSTR(c_value,',')-INSTR(UPPER(c_value),'BUFFERS:')-8))
1812                       * db_block_size);
1813              ELSE -- no second keyword
1814                sp(i).newvalue := TO_CHAR(TO_NUMBER(SUBSTR(c_value,
1815                        INSTR(UPPER(c_value),'BUFFERS:')+8)) * db_block_size);
1816              END IF; -- second keyword
1817            ELSIF INSTR(UPPER(c_value),',') > 0 THEN   -- has keyword format #,#
1818              --
1819              -- In the #,# Format the first number before the comma is
1820              -- buffers second number is the lru latches. For the calculation
1821              -- we parse out the the buffer number and multiply
1822              -- by db_block_size.
1823              --
1824              tmp_num2       := INSTR(UPPER(c_value),',');
1825              sp(i).newvalue := TRIM(SUBSTR(c_value, 1, tmp_num2-1));
1826              sp(i).newvalue := TO_CHAR(TO_NUMBER(sp(i).newvalue)
1827                                          * db_block_size);
1828            ELSE -- no keywords, just number
1829              sp(i).newvalue := TO_CHAR(TO_NUMBER(c_value) * db_block_size);
1830            END IF; -- keywords
1831  
1832          END IF; -- params with calculated values
1833  
1834        ELSE
1835          --
1836          -- Oldvalue is not null or queried value isn't
1837          -- the oldvalue in the sp data.
1838          --
1839  
1840          --      plsql_compiler_flags may contain two values
1841          --      in this case we process the list of values
1842  
1843          IF (sp(i).oldname = 'plsql_compiler_flags') AND
1844               (INSTR(c_value,sp(i).oldvalue) > 0) THEN
1845            -- If 'DEBUG' value found in list then make sure
1846            -- it is not finding NON_DEBUG
1847            -- (using premise that DEBUG and NON_DEBUG do not mix)
1848            IF (sp(i).oldvalue='DEBUG' AND
1849                 INSTR(c_value,'NON_DEBUG') = 0) OR
1850                 (sp(i).oldvalue != 'DEBUG') THEN
1851              sp(i).db_match := TRUE;
1852            END IF;
1853        END IF;
1854      END IF;
1855      EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
1856      END;
1857    END LOOP;
1858  
1859  END init_params;
1860  
1861  PROCEDURE init_components
1862  IS
1863    reg_cursor cursor_t;
1864    c_null     CHAR(1);
1865    c_cid      VARCHAR2(128);
1866    c_version  VARCHAR2(128);
1867    c_schema   VARCHAR2(128);
1868    n_schema   NUMBER;
1869    n_status   NUMBER;
1870  
1871  BEGIN
1872    -- Clear all variable component data
1873    FOR i IN 1..max_comps LOOP
1874      cmp_info(i).sys_kbytes:=     2*c_kb;
1875      cmp_info(i).sysaux_kbytes:=  2*c_kb;
1876      cmp_info(i).def_ts_kbytes:=  0;
1877      cmp_info(i).ins_sys_kbytes:= 0;
1878      cmp_info(i).ins_def_kbytes:= 0;
1879      cmp_info(i).def_ts     := NULL;
1880      cmp_info(i).processed  := FALSE;
1881      cmp_info(i).install    := FALSE;
1882      cmp_info(i).archivelog_kbytes := 0;
1883      cmp_info(i).flashbacklog_kbytes := 0;
1884    END LOOP;
1885  
1886    -- Load component id and name
1887    cmp_info(catalog).cid := 'CATALOG';
1888    cmp_info(catalog).cname := 'Oracle Catalog Views';
1889    cmp_info(catproc).cid := 'CATPROC';
1890    cmp_info(catproc).cname := 'Oracle Packages and Types';
1891    cmp_info(javavm).cid := 'JAVAVM';
1892    cmp_info(javavm).cname := 'JServer JAVA Virtual Machine';
1893    cmp_info(xml).cid := 'XML';
1894    cmp_info(xml).cname := 'Oracle XDK for Java';
1895    cmp_info(catjava).cid := 'CATJAVA';
1896    cmp_info(catjava).cname := 'Oracle Java Packages';
1897    cmp_info(xdb).cid := 'XDB';
1898    cmp_info(xdb).cname := 'Oracle XML Database';
1899    cmp_info(rac).cid := 'RAC';
1900    cmp_info(rac).cname := 'Real Application Clusters';
1901    cmp_info(owm).cid := 'OWM';
1902    cmp_info(owm).cname := 'Oracle Workspace Manager';
1903    cmp_info(odm).cid := 'ODM';
1904    cmp_info(odm).cname := 'Data Mining';
1905    cmp_info(mgw).cid := 'MGW';
1906    cmp_info(mgw).cname := 'Messaging Gateway';
1907    cmp_info(aps).cid := 'APS';
1908    cmp_info(aps).cname := 'OLAP Analytic Workspace';
1909    cmp_info(xoq).cid := 'XOQ';
1910    cmp_info(xoq).cname := 'Oracle OLAP API';
1911    cmp_info(ordim).cid := 'ORDIM';
1912    cmp_info(ordim).cname := 'Oracle Multimedia';
1913    cmp_info(sdo).cid := 'SDO';
1914    cmp_info(sdo).cname := 'Oracle Spatial';
1915    cmp_info(context).cid := 'CONTEXT';
1916    cmp_info(context).cname := 'Oracle Text';
1917    cmp_info(wk).cid := 'WK';
1918    cmp_info(wk).cname := 'Oracle Ultra Search';
1919    cmp_info(ols).cid := 'OLS';
1920    cmp_info(ols).cname := 'Oracle Label Security';
1921    cmp_info(exf).cid := 'EXF';
1922    cmp_info(exf).cname := 'Expression Filter';
1923    cmp_info(em).cid := 'EM';
1924    cmp_info(em).cname := 'Oracle Enterprise Manager Repository';
1925    cmp_info(rul).cid := 'RUL';
1926    cmp_info(rul).cname := 'Rule Manager';
1927    cmp_info(apex).cid := 'APEX';
1928    cmp_info(apex).cname := 'Oracle Application Express';
1929    cmp_info(dv).cid := 'DV';
1930    cmp_info(dv).cname := 'Oracle Database Vault';
1931    cmp_info(misc).cid := 'STATS';
1932    cmp_info(misc).cname := 'Gather Statistics';
1933  
1934    -- Initialize comp script names
1935  
1936    IF db_n_version = 112 THEN
1937      --
1938      -- for 11.2, several components moved into
1939      -- catalog/catproc so they no longer have their own scripts
1940      --
1941      cmp_info(catalog).script := '?/rdbms/admin/catalog.sql';
1942      cmp_info(catproc).script := '?/rdbms/admin/catproc.sql';
1943      cmp_info(javavm).script  := '?/javavm/install/jvmpatch.sql';
1944      cmp_info(xml).script     := '?/xdk/admin/xmlpatch.sql';
1945      cmp_info(xdb).script     := '?/rdbms/admin/xdbpatch.sql';
1946      cmp_info(rac).script     := '?/rdbms/admin/catclust.sql';
1947      cmp_info(ols).script     := '?/rdbms/admin/olspatch.sql';
1948      cmp_info(exf).script     := '?/rdbms/admin/exfpatch.sql';
1949      cmp_info(rul).script     := '?/rdbms/admin/rulpatch.sql';
1950      cmp_info(owm).script     := '?/rdbms/admin/owmpatch.sql';
1951      cmp_info(ordim).script   := '?/ord/im/admin/impatch.sql';
1952      cmp_info(sdo).script     := '?/md/admin/sdopatch.sql';
1953      cmp_info(context).script := '?/ctx/admin/ctxpatch.sql';
1954      cmp_info(mgw).script     := '?/mgw/admin/mgwpatch.sql';
1955      cmp_info(aps).script     := '?/olap/admin/apspatch.sql';
1956      cmp_info(xoq).script     := '?/olap/admin/xoqpatch.sql';
1957      cmp_info(apex).script    := '?/apex/apxpatch.sql';
1958      cmp_info(dv).script      := '?/rdbms/admin/dvpatch.sql';
1959    ELSE
1960      cmp_info(catalog).script := '?/rdbms/admin/catalog.sql';
1961      cmp_info(catproc).script := '?/rdbms/admin/catproc.sql';
1962      cmp_info(javavm).script  := '?/javavm/install/jvmdbmig.sql';
1963      cmp_info(xml).script     := '?/xdk/admin/xmldbmig.sql';
1964      cmp_info(xdb).script     := '?/rdbms/admin/xdbdbmig.sql';
1965      cmp_info(rac).script     := '?/rdbms/admin/catclust.sql';
1966      cmp_info(ols).script     := '?/rdbms/admin/olsdbmig.sql';
1967      cmp_info(exf).script     := '?/rdbms/admin/exfdbmig.sql';
1968      cmp_info(rul).script     := '?/rdbms/admin/ruldbmig.sql';
1969      cmp_info(owm).script     := '?/rdbms/admin/owmdbmig.sql';
1970      cmp_info(odm).script     := '?/rdbms/admin/odmdbmig.sql';
1971      cmp_info(ordim).script   := '?/ord/im/admin/imdbmig.sql';
1972      cmp_info(sdo).script     := '?/md/admin/sdodbmig.sql';
1973      cmp_info(context).script := '?/ctx/admin/ctxdbmig.sql';
1974      cmp_info(wk).script      := '?/rdbms/admin/wkremov.sql';
1975      cmp_info(mgw).script     := '?/mgw/admin/mgwdbmig.sql';
1976      cmp_info(aps).script     := '?/olap/admin/apsdbmig.sql';
1977      cmp_info(xoq).script     := '?/olap/admin/xoqdbmig.sql';
1978      cmp_info(apex).script    := '?/apex/apxdbmig.sql';
1979      cmp_info(dv).script      := '?/rdbms/admin/dvdbmig.sql';
1980    END IF;
1981  
1982    -- *****************************************************************
1983    -- Store Release Dependent Data
1984    -- *****************************************************************
1985  
1986    -- kbytes for component installs (into SYSTEM and DEFAULT tablespaces)
1987    -- rae: add 10% for 11g .
1988    -- the '*1.2' below from point (a) to (b) are rae's .
1989    -- Point (a)
1990    cmp_info(javavm).ins_sys_kbytes:= 105972*1.2;  -- rae's
1991    cmp_info(xml).ins_sys_kbytes:=      4818*1.2;  -- rae's
1992    cmp_info(catjava).ins_sys_kbytes:=  5760*1.2;  -- rae's
1993    cmp_info(xdb).ins_sys_kbytes :=     10*c_kb * 1.2;
1994    IF db_block_size = 16384 THEN
1995      cmp_info(xdb).ins_def_kbytes:=   (88*2)*c_kb * 1.2;
1996    ELSE
1997      cmp_info(xdb).ins_def_kbytes:=   88*c_kb * 1.2;
1998    END IF;
1999    cmp_info(ordim).ins_sys_kbytes :=   10*c_kb * 1.2;  -- actually saw 1MB
2000    cmp_info(ordim).ins_def_kbytes :=   60*c_kb * 1.2;
2001    cmp_info(em).ins_sys_kbytes:= 0; -- was 22528*1.2 (rae's)
2002    cmp_info(em).ins_def_kbytes:= 0; -- was 51200*1.2 (rae's)
2003    -- Point (b)
2004  
2005    -- If there's XMLIndex on the XDB Repository during APEX upgrade
2006    -- from 11107 to 121 (apex v3 to v4), then 316M increase in xdb is seen.
2007    -- 316M = 85M (increase in lob segments + tables owned by xdb) +
2008    --        231M (increase in xmlindexes on xdb repository)
2009    -- (I.e., if no xmlindexes, then 85M of increase in XDB during APEX v3->v4
2010    -- upgrade.)
2011  
2012    IF db_n_version = 102 THEN
2013      -- mult by 1.1 for experimental noise
2014      cmp_info(catalog).sys_kbytes:=   67*c_kb * 1.1;
2015      cmp_info(catproc).sys_kbytes:=   (99+100)*c_kb * 1.1; -- catproc+catupend
2016      cmp_info(javavm).sys_kbytes:=   101*c_kb * 1.1;
2017      cmp_info(xdb).sys_kbytes:=       12*c_kb * 1.1;
2018      cmp_info(ordim).sys_kbytes:=     10*c_kb * 1.1;
2019      cmp_info(sdo).sys_kbytes:=       12*c_kb * 1.1;
2020      cmp_info(apex).sys_kbytes:=      81*c_kb * 1.1;
2021  
2022      cmp_info(catalog).sysaux_kbytes:=  14*c_kb * 1.1;
2023      cmp_info(catproc).sysaux_kbytes:=  31*c_kb * 1.1;
2024      cmp_info(aps).sysaux_kbytes:=      36*c_kb * 1.1;
2025  
2026      cmp_info(context).def_ts_kbytes:=  2*c_kb; -- CTXSYS , default
2027      cmp_info(exf).def_ts_kbytes:=      2*c_kb; -- EXFSYS , default
2028      cmp_info(apex).def_ts_kbytes:=    320*c_kb * 1.1; -- FLOWS_
2029      cmp_info(ordim).def_ts_kbytes:=   15*c_kb * 1.1; -- ORDSYS
2030      cmp_info(sdo).def_ts_kbytes:=     38*c_kb * 1.1; -- MDSYS
2031      cmp_info(em).def_ts_kbytes:=                  0; -- SYSMAN
2032      cmp_info(catproc).def_ts_kbytes:= 31*c_kb * 1.1;
2033      cmp_info(owm).def_ts_kbytes:=      2*c_kb; -- WMSYS
2034      cmp_info(xdb).def_ts_kbytes:=     85*c_kb; -- XDB
2035      cmp_info(ols).def_ts_kbytes:=      2*c_kb; -- LBACSYS , default
2036      cmp_info(dv).def_ts_kbytes:=       2*c_kb; -- DVSYS , default
2037      cmp_info(aps).def_ts_kbytes :=    37*c_kb * 1.1;
2038      cmp_info(wk).def_ts_kbytes:=       0;      -- WK removed => 0 increase
2039  
2040    ELSIF db_n_version = 111 THEN
2041  
2042      -- mult by 1.1 or 1.2 for experimental noise
2043      cmp_info(catalog).sys_kbytes:=  64*c_kb * 1.1;
2044      cmp_info(catproc).sys_kbytes:=  (59+123)*c_kb * 1.1; -- catproc+catupend
2045      cmp_info(javavm).sys_kbytes:=   49*c_kb * 1.1;
2046      cmp_info(context).sys_kbytes:=   7*c_kb * 1.1;
2047      cmp_info(xdb).sys_kbytes:=       2*c_kb * 1.1;
2048      cmp_info(ordim).sys_kbytes:=    50*c_kb * 1.1;
2049      cmp_info(sdo).sys_kbytes:=      11*c_kb * 1.1;
2050      cmp_info(apex).sys_kbytes:=     50*c_kb * 1.1;
2051      cmp_info(em).sys_kbytes:=                   0;
2052  
2053      cmp_info(catalog).sysaux_kbytes:=   12*c_kb * 1.1;
2054      cmp_info(catproc).sysaux_kbytes:=   21*c_kb * 1.1;
2055      cmp_info(aps).sysaux_kbytes:=       13*c_kb * 1.1;
2056  
2057      cmp_info(context).def_ts_kbytes:=  2*c_kb; -- CTXSYS , default
2058      cmp_info(exf).def_ts_kbytes:=      2*c_kb; -- EXFSYS , default
2059      cmp_info(apex).def_ts_kbytes :=  320*c_kb * 1.1; -- FLOWS_
2060      cmp_info(sdo).def_ts_kbytes:=     23*c_kb * 1.1; -- MDSYS
2061      cmp_info(ordim).def_ts_kbytes:=   15*c_kb * 1.1; -- ORDSYS
2062      cmp_info(em).def_ts_kbytes:=      0;       -- SYSMAN, removed, 0 increase
2063      cmp_info(catproc).def_ts_kbytes:= 21*c_kb * 1.1;
2064      cmp_info(owm).def_ts_kbytes:=      2*c_kb;       -- WMSYS, default
2065      cmp_info(xdb).def_ts_kbytes:=     85*c_kb; -- XDB
2066      cmp_info(ols).def_ts_kbytes:=      2*c_kb;       -- LBACSYS , default
2067      cmp_info(dv).def_ts_kbytes:=       2*c_kb;       -- DVSYS , default
2068      cmp_info(wk).def_ts_kbytes:=       0;        -- WK removed => 0 increase
2069  
2070    ELSIF db_n_version = 112 THEN
2071  
2072      -- mult by 1.1 or 1.2 for experimental noise
2073      cmp_info(catalog).sys_kbytes:=  58*c_kb * 1.1;
2074      cmp_info(catproc).sys_kbytes:=  (31+123)*c_kb * 1.1;  -- catproc+catupend
2075      cmp_info(javavm).sys_kbytes:=   10*c_kb * 1.1;
2076      cmp_info(context).sys_kbytes:=   4*c_kb * 1.1;
2077      cmp_info(xdb).sys_kbytes:=       2*c_kb * 1.1;
2078      cmp_info(sdo).sys_kbytes:=       2*c_kb * 1.1;
2079      cmp_info(apex).sys_kbytes:=     50*c_kb * 1.1;
2080  
2081      cmp_info(catalog).sysaux_kbytes:=   2*c_kb;  -- default
2082      cmp_info(catproc).sysaux_kbytes:=  27*c_kb * 1.1;
2083  
2084      -- apex: 269 is the amount of space needed (as seen from experiments) +
2085      --       50 is the padding because if apex is in its own tablespace
2086      --       then having a padding would be good
2087      cmp_info(apex).def_ts_kbytes :=  320*c_kb * 1.1; -- FLOWS_
2088  
2089      cmp_info(sdo).def_ts_kbytes:=     10*c_kb * 1.1; -- MDSYS
2090      cmp_info(ordim).def_ts_kbytes:=    2*c_kb;       -- ORDSYS , default
2091      cmp_info(em).def_ts_kbytes:=       0;      -- SYSMAN , 0 increase
2092      cmp_info(owm).def_ts_kbytes:=      2*c_kb; -- WMSYS , default
2093      cmp_info(xdb).def_ts_kbytes:=     85*c_kb; -- XDB , default
2094      cmp_info(aps).def_ts_kbytes :=     2*c_kb; -- default
2095      cmp_info(ols).def_ts_kbytes:=      2*c_kb; -- LBACSYS , default
2096      cmp_info(dv).def_ts_kbytes:=       2*c_kb; -- DVSYS , default
2097      cmp_info(wk).def_ts_kbytes:=       0;      -- WK removed => 0 increase
2098  
2099    ELSIF db_n_version = 121 THEN
2100      -- initial estimates of growth in patch release
2101      -- let's use 112 values for now (copy and paste of 112 values from above)
2102      -- CML: need to update for 121 patch upgrades
2103  
2104      -- mult by 1.1 or 1.2 for experimental noise
2105      cmp_info(catalog).sys_kbytes:=  58*c_kb * 1.1;
2106      cmp_info(catproc).sys_kbytes:=  (31+123)*c_kb * 1.1;  -- catproc+catupend
2107      cmp_info(javavm).sys_kbytes:=   10*c_kb * 1.1;
2108      cmp_info(context).sys_kbytes:=   4*c_kb * 1.1;
2109      cmp_info(xdb).sys_kbytes:=       2*c_kb * 1.1;
2110      cmp_info(sdo).sys_kbytes:=       2*c_kb * 1.1;
2111      cmp_info(apex).sys_kbytes:=     50*c_kb * 1.1;
2112  
2113      cmp_info(catalog).sysaux_kbytes:=   2*c_kb;  -- default
2114      cmp_info(catproc).sysaux_kbytes:=  27*c_kb * 1.2;
2115  
2116      cmp_info(apex).def_ts_kbytes :=  320*c_kb * 1.1; -- FLOWS_
2117      cmp_info(sdo).def_ts_kbytes:=     10*c_kb * 1.1; -- MDSYS
2118      cmp_info(ordim).def_ts_kbytes:=    2*c_kb;       -- ORDSYS , default
2119      cmp_info(em).def_ts_kbytes:=       0;      -- SYSMAN , 0 increase
2120      cmp_info(owm).def_ts_kbytes:=      2*c_kb; -- WMSYS , default
2121      cmp_info(xdb).def_ts_kbytes:=     85*c_kb; -- XDB , default
2122      cmp_info(aps).def_ts_kbytes :=     2*c_kb; -- default
2123      cmp_info(ols).def_ts_kbytes:=      2*c_kb; -- LBACSYS , default
2124      cmp_info(dv).def_ts_kbytes:=       2*c_kb; -- DVSYS , default
2125      cmp_info(wk).def_ts_kbytes:=       0;      -- WK removed => 0 increase
2126  
2127    END IF;
2128  
2129    -- Flashback and archivelog for each database component
2130  
2131    -- note: The unit of measurement in archivelog_kbytes and flashbacklog_kbytes
2132    --       below are in Kb.
2133    --       For example:
2134    -- cmp_info(catalog).archivelog_kbytes   := 580*c_kb;  <= is 593920 Kb
2135    -- cmp_info(catalog).flashbacklog_kbytes := 285*c_kb;  <= is 291840 Kb
2136  
2137    -- cml: Although AMD is not in 12c, let's save these 2 entries in case
2138    --      the amd info below is needed for future backports to older releases.
2139    --  cmp_info(amd).archivelog_kbytes       := 43*c_kb;
2140    --  cmp_info(amd).flashbacklog_kbytes     := 55*c_kb;
2141  
2142  
2143    cmp_info(catalog).archivelog_kbytes   := 580*c_kb;
2144    cmp_info(catalog).flashbacklog_kbytes := 285*c_kb;
2145  
2146    -- catproc = catproc + utlmmig + utlrp
2147    cmp_info(catproc).archivelog_kbytes   := (705+410+312)*c_kb;
2148    cmp_info(catproc).flashbacklog_kbytes := (155+0+210)*c_kb;
2149  
2150    cmp_info(javavm).archivelog_kbytes    := 455*c_kb;
2151    cmp_info(javavm).flashbacklog_kbytes  := 160*c_kb;
2152  
2153    cmp_info(xml).archivelog_kbytes       := 96*c_kb;
2154    cmp_info(xml).flashbacklog_kbytes     := 55*c_kb;
2155  
2156    cmp_info(aps).archivelog_kbytes       := 96*c_kb;
2157  
2158    cmp_info(dv).archivelog_kbytes        := 47*c_kb;
2159  
2160    cmp_info(context).archivelog_kbytes   := 92*c_kb;
2161  
2162    cmp_info(xdb).archivelog_kbytes       := 174*c_kb;
2163    cmp_info(xdb).flashbacklog_kbytes     := 55*c_kb;
2164  
2165    cmp_info(catjava).archivelog_kbytes   := 50*c_kb;
2166  
2167    cmp_info(owm).archivelog_kbytes       := 49*c_kb;
2168    cmp_info(owm).flashbacklog_kbytes     := 60*c_kb;
2169  
2170    cmp_info(ordim).archivelog_kbytes     := 354*c_kb;
2171  
2172    cmp_info(sdo).archivelog_kbytes       := 487*c_kb;
2173    cmp_info(sdo).flashbacklog_kbytes     := 115*c_kb;
2174  
2175    cmp_info(apex).archivelog_kbytes      := 822*c_kb;
2176  
2177    cmp_info(xoq).archivelog_kbytes       := 49*c_kb;
2178  
2179    cmp_info(em).archivelog_kbytes       := 415*c_kb;
2180    cmp_info(em).flashbacklog_kbytes     := 447*c_kb;
2181  
2182    -- For tablespace sizing
2183    -- CML: TS: estimate for utlrp later?  utlrp space goes into system and
2184    --          system right now is not sized for utlrp.
2185    cmp_info(misc).sys_kbytes:=     100*c_kb;  -- misc: round up to 100M fudge
2186    cmp_info(misc).sysaux_kbytes:=   50*c_kb;  -- misc: round up to  50M fudge
2187  
2188    --
2189    -- Grab the Component ID (varchar2) from
2190    -- registry, and then see if the
2191    -- schema exists in USER$ below which means its
2192    -- in use in this database.
2193    --
2194    OPEN reg_cursor FOR
2195       'SELECT cid, status, version, schema#
2196        FROM sys.registry$ WHERE namespace =''SERVER''';
2197  
2198    LOOP
2199  
2200      FETCH reg_cursor INTO c_cid, n_status, c_version, n_schema;
2201      EXIT WHEN reg_cursor%NOTFOUND;
2202  
2203      -- If the status is not  REMOVED or REMOVING
2204      IF n_status NOT IN (99,8)
2205      THEN
2206        EXECUTE IMMEDIATE 'SELECT name FROM sys.user$  WHERE user#=:1'
2207        INTO c_schema
2208        USING n_schema;
2209  
2210        FOR i IN 1..max_components LOOP
2211          IF c_cid = cmp_info(i).cid
2212          THEN
2213            store_comp(i, c_schema, c_version, n_status);
2214            EXIT; -- from component search loop
2215          END IF;
2216        END LOOP;  -- ignore if not in component list
2217      END IF;
2218    END LOOP;
2219    CLOSE reg_cursor;
2220  
2221  
2222    -- Ultra Search not in 10.1.0.2 registry so check schema
2223    IF NOT cmp_info(wk).processed THEN
2224      BEGIN
2225        EXECUTE IMMEDIATE 'SELECT NULL FROM sys.user$ WHERE name = ''WKSYS'''
2226        INTO c_null;
2227        store_comp(wk, 'WKSYS', db_version, NULL);
2228      EXCEPTION
2229           WHEN NO_DATA_FOUND THEN NULL;
2230      END;
2231    END IF;
2232  
2233    -- Check for HTML DB in 9.2.0 and 10.1 databases
2234    -- 121:  Is this needed
2235    BEGIN
2236      EXECUTE IMMEDIATE 'SELECT FLOWS_010500.wwv_flows_release from sys.dual'
2237      INTO c_version;
2238      store_comp(apex,'FLOWS_010500',c_version, NULL);
2239    EXCEPTION
2240         WHEN OTHERS THEN NULL;
2241    END;
2242  
2243    -- 121:  Is this needed
2244    BEGIN
2245      EXECUTE IMMEDIATE 'SELECT FLOWS_010600.wwv_flows_release from sys.dual'
2246      INTO c_version;
2247      store_comp(apex,'FLOWS_010600',c_version, NULL);
2248    EXCEPTION
2249       WHEN OTHERS THEN NULL;
2250    END;
2251  
2252    -- Check for APEX in 10.2 databases
2253    BEGIN
2254      EXECUTE IMMEDIATE 'SELECT FLOWS_020000.wwv_flows_release from sys.dual'
2255      INTO c_version;
2256      store_comp(apex,'FLOWS_020000',c_version, NULL);
2257    EXCEPTION
2258       WHEN OTHERS THEN NULL;
2259    END;
2260  
2261    BEGIN
2262      EXECUTE IMMEDIATE 'SELECT FLOWS_020100.wwv_flows_release from sys.dual'
2263      INTO c_version;
2264      store_comp(apex,'FLOWS_020100',c_version, NULL);
2265    EXCEPTION
2266       WHEN OTHERS THEN NULL;
2267    END;
2268  
2269    -- Database Vault not in registry so check for dvsys schema
2270    IF NOT cmp_info(dv).processed THEN
2271      BEGIN
2272        EXECUTE IMMEDIATE 'SELECT NULL FROM sys.user$ WHERE name = ''DVSYS'''
2273        INTO  c_null;
2274        store_comp(dv, 'DVSYS', '10.2.0', NULL);
2275      EXCEPTION
2276         WHEN NO_DATA_FOUND THEN NULL;
2277      END;
2278    END IF;
2279  
2280    -- CML: TS: estimate for utlrp later?
2281      -- Consider MISC (miscellaneous) in registry because
2282      -- cmp_info(misc).processed has to be equal to TRUE before the tablespace
2283      -- sizing algorithm will consider the space needed for MISC.
2284      -- this call will set 'cmp_info(misc).processed := TRUE;'
2285    store_comp(misc, 'SYS', NULL, NULL);
2286  
2287  
2288    IF db_n_version != 112 THEN -- install required components on major release only
2289      -- if SDO, ORDIM, WK, EXF, or ODM components are present, need JAVAVM
2290      IF NOT cmp_info(javavm).processed THEN
2291        IF cmp_info(ordim).processed OR cmp_info(wk).processed OR
2292             cmp_info(exf).processed OR cmp_info(sdo).processed
2293        THEN
2294          store_comp(javavm, 'SYS', NULL, NULL);
2295          cmp_info(javavm).install := TRUE;
2296          store_comp(catjava, 'SYS', NULL, NULL);
2297          cmp_info(catjava).install := TRUE;
2298        END IF;
2299      END IF;
2300  
2301      -- If there is a JAVAVM component
2302      -- THEN include the CATJAVA component.
2303      IF cmp_info(javavm).processed AND NOT cmp_info(catjava).processed
2304      THEN
2305        store_comp(catjava, 'SYS', NULL, NULL);
2306        cmp_info(catjava).install := TRUE;
2307      END IF;
2308  
2309      -- If interMedia or Spatial component, but no XML, Then
2310      -- install XML
2311      IF NOT cmp_info(xml).processed AND
2312           (cmp_info(ordim).processed OR cmp_info(sdo).processed)
2313      THEN
2314        store_comp(xml, 'SYS', NULL, NULL);
2315        cmp_info(xml).install := TRUE;
2316      END IF;
2317  
2318      -- If no XDB, Then install XDB
2319      IF NOT cmp_info(xdb).processed THEN
2320        store_comp(xdb, 'XDB', NULL, NULL);
2321        cmp_info(xdb).install := TRUE;
2322        cmp_info(xdb).def_ts := 'SYSAUX';
2323      END IF;
2324  
2325      -- If Spatial component, but no ORDIM, Then
2326      -- install ORDIM
2327      IF NOT cmp_info(ordim).processed AND
2328           (cmp_info(sdo).processed)
2329      THEN
2330        store_comp(ordim, 'ORDSYS', NULL, NULL);
2331        cmp_info(ordim).install := TRUE;
2332        cmp_info(ordim).def_ts := 'SYSAUX';
2333      END IF;
2334   END IF;  -- not for patch release
2335  
2336  END init_components;
2337  
2338  PROCEDURE init_resources
2339  IS
2340    idx           BINARY_INTEGER;
2341    tmp_cursor    cursor_t;
2342    tmp_num1      NUMBER;
2343    tmp_num2      NUMBER;
2344    delta_queues  INTEGER;
2345    delta_kbytes  NUMBER;
2346    p_tsname      VARCHAR2(128);
2347    tmp_varchar1  VARCHAR2(128);
2348    tmp_varchar2  VARCHAR2(128);
2349    tmp_filename  SYS.DBA_TEMP_FILES.FILE_NAME%TYPE;
2350    p_status      VARCHAR2(30);
2351    sum_bytes     NUMBER;
2352    p_count       INTEGER;
2353    default_tablespaces VARCHAR2(4000);
2354  
2355  BEGIN
2356    --
2357    -- Misc stand-along values we report about
2358    --
2359    pMinFlashbackLogGen  := 0;
2360    pminArchiveLogGen    := 0;
2361  
2362    idx := 0;
2363  
2364    -- we know we need SYSTEM and SYSAUX in the list of tablespaces anyway, add 'em now.
2365    default_tablespaces := '''SYSTEM'', ''SYSAUX''';
2366  
2367    FOR i in 1..max_comps LOOP
2368        IF (cmp_info(i).def_ts is not null) THEN
2369            -- there is not a worry about overflowing default_tablespaces or sql injection.  The values we pull from .def_ts
2370            -- are all hardcoded in this program, and as a result, we could just hardcode default_tablespaces too, but to
2371            -- make room for smooth changes in the future, this loop guarantees we pick up new def_ts's.  The current list
2372            -- as of 12.1.0.2 is only 'SYSTEM', 'SYSAUX'.
2373  
2374            -- push a new tablespace onto the list only if it doesn't exist on the list already
2375            IF (instr(default_tablespaces,'''' || cmp_info(i).def_ts || '''') = 0) THEN
2376                default_tablespaces := default_tablespaces || ',''' || cmp_info(i).def_ts || '''';
2377            END IF;
2378        END IF;
2379    END LOOP;
2380  
2381    OPEN tmp_cursor FOR
2382          'SELECT tablespace_name, contents, extent_management FROM SYS.dba_tablespaces ' ||
2383          'WHERE tablespace_name in (:1,' || default_tablespaces || ') or ' ||
2384                'tablespace_name in (SELECT distinct T.tablespace_name ' ||
2385                                        'FROM sys.dba_queues Q, ' ||
2386                                             'sys.dba_tables T ' ||
2387                                        'WHERE Q.queue_table=T.table_name AND Q.owner = T.owner) or ' ||
2388                'tablespace_name in (SELECT temporary_tablespace ' ||
2389                                        'FROM sys.dba_users ' ||
2390                                        'WHERE username = ''SYS'') '
2391    USING db_undo_tbs;
2392    LOOP
2393      FETCH tmp_cursor INTO p_tsname, tmp_varchar1, tmp_varchar2;
2394      EXIT WHEN tmp_cursor%NOTFOUND;
2395  --
2396  --     Comment out the following IF statement.
2397  --     Previously, the containing LOOP used to simply select ALL tablespaces into cursor tmp_cursor
2398  --     and use the following IF to process only the tablespaces that meet the IF's condition.
2399  --     The problem was that the condition in the IF involved multiple SELECT statements
2400  --     that were embedded in the called routines (ts_has_queues, ts_is_SYS_temporary) and since those
2401  --     SELECTS were in a LOOP, performance would suffer too much if there were a lot of tablespaces
2402  --     (Too many LOOP iterations when the cost of each iteration was non-trivial.)
2403  --     The new code essentially moves the condition of the IF statement into the original TMP_CURSOR select.
2404  --     Now, even if the performance of the tmp_cursor SELECT is a little slow, it will only be executed once,
2405  --     and the expensive ts_has_queues and ts_is_SYS_temporary calls aren't in the body of the LOOP.
2406  --
2407  --     IF p_tsname IN ('SYSTEM', 'SYSAUX', db_undo_tbs) OR
2408  --         is_comp_tablespace(p_tsname) OR
2409  --         ts_has_queues (p_tsname) OR
2410  --         ts_is_SYS_temporary (p_tsname) THEN
2411  
2412        idx := idx + 1;
2413        ts_info(idx).name  := p_tsname;
2414        IF tmp_varchar1 = 'TEMPORARY' THEN
2415          ts_info(idx).temporary := TRUE;
2416        ELSE
2417          ts_info(idx).temporary := FALSE;
2418        END IF;
2419  
2420        IF tmp_varchar2 = 'LOCAL' THEN
2421          ts_info(idx).localmanaged := TRUE;
2422        ELSE
2423          ts_info(idx).localmanaged := FALSE;
2424        END IF;
2425  
2426        -- Get number of kbytes used
2427        EXECUTE IMMEDIATE
2428          'SELECT SUM(bytes) FROM sys.dba_segments seg WHERE seg.tablespace_name = :1'
2429        INTO sum_bytes
2430        USING p_tsname;
2431        IF sum_bytes IS NULL THEN
2432          ts_info(idx).inuse := 0;
2433        ELSIF sum_bytes <= c_kb THEN
2434          ts_info(idx).inuse := 1;
2435        ELSE
2436          ts_info(idx).inuse := ROUND(sum_bytes/c_kb);
2437        END IF;
2438        -- TS: calculate space used per tablespace (ts_info(idx).name)
2439  
2440        -- Get number of kbytes allocated
2441        IF ts_info(idx).temporary AND
2442          ts_info(idx).localmanaged THEN
2443          EXECUTE IMMEDIATE
2444            'SELECT SUM(bytes) FROM sys.dba_temp_files files WHERE ' ||
2445                 'files.tablespace_name = :1'
2446          INTO sum_bytes
2447          USING p_tsname;
2448        ELSE
2449          EXECUTE IMMEDIATE
2450             'SELECT SUM(bytes) FROM sys.dba_data_files files WHERE ' ||
2451                    'files.tablespace_name = :1'
2452          INTO sum_bytes
2453          USING p_tsname;
2454        END IF;
2455  
2456        IF sum_bytes IS NULL THEN
2457          ts_info(idx).alloc:=0;
2458        ELSIF sum_bytes <= c_kb THEN
2459          ts_info(idx).alloc:=1;
2460        ELSE
2461          ts_info(idx).alloc:=ROUND(sum_bytes/c_kb);
2462        END IF;
2463  
2464        -- Get number of kbytes of unused autoextend
2465        IF ts_info(idx).temporary AND
2466          ts_info(idx).localmanaged THEN
2467          EXECUTE IMMEDIATE
2468            'SELECT SUM(decode(maxbytes, 0, 0, maxbytes-bytes)) ' ||
2469            'FROM sys.dba_temp_files WHERE tablespace_name=:1'
2470          INTO sum_bytes
2471          USING p_tsname;
2472        ELSE
2473          EXECUTE IMMEDIATE
2474            'SELECT SUM(decode(maxbytes, 0, 0, maxbytes-bytes)) ' ||
2475            'FROM sys.dba_data_files WHERE tablespace_name=:1'
2476          INTO sum_bytes
2477          USING p_tsname;
2478        END IF;
2479  
2480        IF sum_bytes IS NULL THEN
2481          ts_info(idx).auto:=0;
2482        ELSIF sum_bytes <= c_kb THEN
2483          ts_info(idx).auto:=1;
2484        ELSE
2485          ts_info(idx).auto:=ROUND(sum_bytes/c_kb);
2486        END IF;
2487  
2488        -- total available is allocated plus auto extend
2489        ts_info(idx).avail := ts_info(idx).alloc + ts_info(idx).auto;
2490  --    END IF;
2491    END LOOP;
2492    CLOSE tmp_cursor;
2493  
2494    max_ts := idx;   -- max tablespaces of interest
2495  
2496    -- *****************************************************************
2497    -- Collect Public Rollback Information
2498    -- *****************************************************************
2499  
2500    idx := 0;
2501    IF db_undo != 'AUTO' THEN  -- using rollback segments
2502  
2503      OPEN tmp_cursor FOR
2504          'SELECT segment_name, next_extent, max_extents, status FROM SYS.dba_rollback_segs
2505              WHERE owner=''PUBLIC'' OR (owner=''SYS'' AND segment_name != ''SYSTEM'')';
2506      LOOP
2507        FETCH tmp_cursor INTO tmp_varchar1, tmp_num1, tmp_num2, p_status;
2508        EXIT WHEN tmp_cursor%NOTFOUND;
2509        BEGIN
2510          --- get sum of bytes and tablespace name
2511          EXECUTE IMMEDIATE
2512              'SELECT tablespace_name, sum(bytes) FROM sys.dba_segments
2513                  WHERE segment_name = :1  AND ROWNUM = 1 GROUP BY tablespace_name'
2514          INTO p_tsname, sum_bytes
2515          USING tmp_varchar1;
2516          IF sum_bytes < c_kb THEN
2517            sum_bytes := 1;
2518          ELSE
2519            sum_bytes := sum_bytes/c_kb;
2520          END IF;
2521        EXCEPTION WHEN NO_DATA_FOUND THEN
2522          sum_bytes := NULL;
2523        END;
2524  
2525        IF sum_bytes IS NOT NULL THEN
2526          idx:=idx + 1;
2527          rs_info(idx).tbs_name := p_tsname;
2528          rs_info(idx).seg_name := tmp_varchar1;
2529          rs_info(idx).status   := p_status;
2530          rs_info(idx).next     := tmp_num1/c_kb;
2531          rs_info(idx).max_ext  := tmp_num2;
2532          rs_info(idx).inuse    := sum_bytes;
2533          EXECUTE IMMEDIATE
2534            'SELECT ROUND(SUM(DECODE(maxbytes, 0, 0,maxbytes-bytes)/:1))
2535                FROM sys.dba_data_files WHERE tablespace_name=:2'
2536          INTO rs_info(idx).auto
2537          USING c_kb, p_tsname;
2538  
2539          EXECUTE IMMEDIATE
2540            'SELECT ROUND(SUM(DECODE(maxbytes, 0, 0,maxbytes-bytes)/:1))
2541                FROM sys.dba_data_files WHERE tablespace_name=:2'
2542          INTO tmp_num1
2543          USING c_kb, p_tsname;
2544        END IF;
2545      END LOOP;
2546      CLOSE tmp_cursor;
2547    END IF;  -- using undo tablespace, not rollback
2548  
2549    max_rs := idx;
2550  
2551    -- *****************************************************************
2552    -- Determine free space needed if
2553    --   Archiving was on;
2554    --   Flashback Database was on
2555    -- We only report the values if they are actually on.
2556    -- *****************************************************************
2557  
2558    -- calculate the minimum amount of archive and flashback logs used
2559    -- for an upgrade for each component.
2560    --
2561    -- This is only an issue when db_log_mode = 'ARCHIVELOG'
2562    --
2563    FOR i in 1..max_comps LOOP
2564      IF cmp_info(i).processed THEN
2565        pMinArchiveLogGen := pMinArchiveLogGen
2566                               + cmp_info(i).archivelog_kbytes;
2567        pMinFlashbackLogGen := pMinFlashbackLogGen
2568                               + cmp_info(i).flashbacklog_kbytes;
2569      END IF;
2570    END LOOP;
2571  
2572    -- The numbers used were seen from experiments.  Add 10% for experimental
2573    -- noise.
2574    pMinArchiveLogGen := pMinArchiveLogGen * 1.1;
2575    pMinFlashbackLogGen := pMinFlashbackLogGen * 1.1;
2576  
2577    -- Total recovery area needed is:
2578    --   pMinArchiveLogGen + pMinFlashbacklogGen;
2579  
2580    -- *****************************************************************
2581    -- Collect Flashback Information
2582    -- *****************************************************************
2583  
2584    flashback_info.active := FALSE;
2585    flashback_info.name := '';
2586    flashback_info.limit := 0;
2587    flashback_info.used := 0;
2588    flashback_info.reclaimable := 0;
2589    flashback_info.files := 0;
2590    flashback_info.file_dest := '';
2591    flashback_info.dsize := 0;
2592  
2593    IF db_flashback_on THEN
2594      --
2595      -- Get the rest of the flashback settings
2596      --
2597      flashback_info.active := TRUE;
2598  
2599      BEGIN
2600        EXECUTE IMMEDIATE 'SELECT rfd.name, rfd.space_limit, rfd.space_used,
2601                    rfd.space_reclaimable, rfd.number_of_files,
2602                    vp1.value, vp2.value
2603          FROM v$recovery_file_dest rfd, v$parameter vp1, v$parameter vp2
2604          WHERE UPPER(vp1.name) = ''DB_RECOVERY_FILE_DEST'' AND
2605                 UPPER(vp2.name) = ''DB_RECOVERY_FILE_DEST_SIZE'''
2606         INTO flashback_info.name, flashback_info.limit, flashback_info.used,
2607                flashback_info.reclaimable, flashback_info.files,
2608                flashback_info.file_dest, flashback_info.dsize;
2609        EXCEPTION
2610          WHEN NO_DATA_FOUND THEN flashback_info.active := FALSE;
2611      END;
2612    END IF;
2613  
2614    -- *****************************************************************
2615    -- Calculate Tablespace Requirements
2616    -- *****************************************************************
2617  
2618    -- Look at all relevant tablespaces
2619    -- TS: loop per tablespace (ts_info(t).name)
2620    FOR t IN 1..max_ts LOOP
2621      delta_kbytes:=0;   -- initialize calculated tablespace delta
2622  
2623      IF ts_info(t).name = 'SYSTEM' THEN -- sum the component SYS kbytes
2624        FOR i IN 1..max_comps LOOP
2625  
2626          IF pDBGSizeResources THEN
2627            IF cmp_info(i).processed THEN
2628              DisplayDiagLine (cmp_info(i).cid || ' Processed. ' || ' Default Tblspace ' || cmp_info(i).def_ts || '.');
2629            ELSE
2630              DisplayDiagLine (cmp_info(i).cid || ' NOT Processed.');
2631            END IF;
2632          END IF;
2633  
2634          IF cmp_info(i).processed THEN
2635            IF cmp_info(i).install THEN  -- if component will be installed
2636              delta_kbytes := delta_kbytes + cmp_info(i).ins_sys_kbytes;
2637              IF pDBGSizeResources THEN
2638                DisplayDiagLine ('SYSTEM ' ||
2639                    LPAD(cmp_info(i).cid, 10) || ' ToBeInstalled ' ||
2640                    LPAD(cmp_info(i).ins_sys_kbytes/c_kb,10) || 'Mb');
2641              END IF;
2642            ELSE  -- if component is already in the registry
2643              delta_kbytes := delta_kbytes + cmp_info(i).sys_kbytes;
2644              IF pDBGSizeResources THEN
2645                DisplayDiagLine ('SYSTEM ' ||
2646                       LPAD(cmp_info(i).cid, 10) || ' IsInRegistry ' ||
2647                       LPAD(cmp_info(i).sys_kbytes/c_kb,10) || 'Mb');
2648              END IF;
2649            END IF;
2650          END IF;  -- nothing to add if component is or will not be in
2651                   -- the registry
2652        END LOOP;
2653      END IF;  -- end of special SYSTEM tablespace processing
2654      -- TS: delta after looping through components in SYSTEM
2655  
2656      IF ts_info(t).name = 'SYSAUX' THEN -- sum the component SYSAUX kbytes
2657        FOR i IN 1..max_comps LOOP
2658          IF cmp_info(i).processed AND
2659                (cmp_info(i).def_ts = 'SYSAUX' OR
2660                 cmp_info(i).def_ts = 'SYSTEM') THEN
2661            IF cmp_info(i).sysaux_kbytes >= cmp_info(i).def_ts_kbytes THEN
2662              delta_kbytes := delta_kbytes + cmp_info(i).sysaux_kbytes;
2663            ELSE
2664              delta_kbytes := delta_kbytes + cmp_info(i).def_ts_kbytes;
2665            END IF;
2666            IF pDBGSizeResources THEN
2667              DisplayDiagLine('SYSAUX ' ||
2668                     LPAD(cmp_info(i).cid, 10) || ' ' ||
2669                     LPAD(cmp_info(i).sysaux_kbytes/c_kb,10) || 'Mb');
2670            END IF;
2671            -- bug 13060071 :  apex , xdb
2672            -- if xdb and apex are both in db, then add 316M-85M (or 231M
2673            -- more) to sysaux if xdb resides here
2674            IF (cmp_info(i).cid = 'XDB'
2675                AND cmp_info(apex).processed = TRUE) THEN
2676              delta_kbytes :=  delta_kbytes + (231*c_kb);
2677              IF pDBGSizeResources THEN
2678                DisplayDiagLine('SYSAUX ' ||
2679                    LPAD(cmp_info(i).cid, 10) || ' ' || '(due to APEX) ' ||
2680                    LPAD(231, 10) || 'Mb');
2681              END IF;
2682            END IF;
2683          END IF;
2684        END LOOP;
2685      END IF;  -- end of special SYSAUX tablespace processing
2686      -- TS: sum delta for components in SYSAUX
2687  
2688      -- For tablespaces that are not SYSTEM:
2689      -- For tablespaces that are not SYSAUX:
2690      -- For tablespaces that are not UNDO:
2691      -- Now add in component default tablespace deltas
2692      -- def_tablespace_name is NULL for unprocessed comps
2693  
2694      IF (ts_info(t).name != 'SYSTEM' AND
2695          ts_info(t).name != 'SYSAUX' AND
2696          ts_info(t).name != db_undo_tbs) THEN
2697        FOR i IN 1..max_comps LOOP
2698          IF (ts_info(t).name = cmp_info(i).def_ts AND
2699             cmp_info(i).processed) THEN
2700            IF cmp_info(i).install THEN  -- use install amount
2701              delta_kbytes := delta_kbytes + cmp_info(i).ins_def_kbytes;
2702              IF pDBGSizeResources THEN
2703                DisplayDiagLine( RPAD(ts_info(t).name, 10) ||
2704                             LPAD(cmp_info(i).cid, 10) || ' ' ||
2705                             LPAD(cmp_info(i).ins_def_kbytes,10));
2706              END IF;
2707  
2708            ELSE  -- use default tablespace amount
2709              -- bug 9664514
2710              -- if apex version in the source db is older than the version
2711              -- in target db, then apex upgrade include apex install;
2712              -- estimate 180M for typical apex install.
2713              -- note: this section is for space calculations for
2714              -- tablespaces that are non-system and non-sysaux
2715              delta_kbytes :=  delta_kbytes + cmp_info(i).def_ts_kbytes;
2716  
2717              IF pDBGSizeResources THEN
2718                DisplayDiagLine(RPAD(ts_info(t).name, 10) ||
2719                        LPAD(cmp_info(i).cid, 10) || ' ' ||
2720                        LPAD(cmp_info(i).def_ts_kbytes/c_kb, 10) || 'Mb');
2721                --update_puiu_data('SCHEMA',
2722                --   ts_info(t).name || '-' || cmp_info(i).schema,
2723                --   cmp_info(i).def_ts_kbytes);
2724              END IF;
2725            END IF;
2726  
2727            -- bug 13060071 :  apex , xdb
2728            -- if xdb and apex are both in db, then add 316M-85M (or 231M
2729            -- more) to xdb default tablespace
2730            IF (cmp_info(i).cid = 'XDB' AND
2731                cmp_info(apex).processed = TRUE) THEN
2732              delta_kbytes :=  delta_kbytes + (231*c_kb);
2733              IF pDBGSizeResources THEN
2734                DisplayDiagLine(RPAD(ts_info(t).name, 10) || ' ' ||
2735                          LPAD(cmp_info(i).cid, 10) || ' ' ||
2736                          '(due to APEX) ' || LPAD(231, 10) || 'Mb');
2737              END IF;
2738            END IF;
2739          END IF;
2740        END LOOP; -- end of default tablespace calculations
2741      END IF; -- end of if tblspace is not undo and not sysaux and not system
2742              -- then add in component default tablespace deltas
2743  
2744      -- TS: sum delta for install in default tablespaces other than
2745      --          SYSAUX
2746  
2747      -- For tablespaces that are not undo:
2748      -- Now look for queues in user schemas
2749      IF ts_info(t).name != db_undo_tbs THEN
2750        EXECUTE IMMEDIATE 'SELECT count(*) FROM sys.dba_tables tb, sys.dba_queues q
2751            WHERE q.queue_table = tb.table_name AND
2752                 tb.tablespace_name = '' || ts_info(t).name || '' AND tb.owner NOT IN
2753                  (''SYS'',''SYSTEM'',''MDSYS'',''ORDSYS'',''OLAPSYS'',''XDB'',
2754                  ''LBACSYS'',''CTXSYS'',''ODM'',''DMSYS'', ''WKSYS'',''WMSYS'',
2755                   ''SYSMAN'',''EXFSYS'') '
2756        INTO delta_queues;
2757  
2758        IF delta_queues > 0 THEN
2759          delta_kbytes := delta_kbytes + delta_queues*48;
2760          IF pDBGSizeResources THEN
2761            DisplayDiagLine(RPAD(ts_info(t).name, 10) ||
2762                    ' QUEUE count = ' || delta_queues);
2763          END IF;
2764        END IF;
2765      END IF;  -- end of if tablespace is not undo
2766               -- then look for queues in user schemas
2767  
2768      -- See if this is the temporary tablespace for SYS
2769      IF ts_is_SYS_temporary(ts_info(t).name) THEN
2770        delta_kbytes := delta_kbytes + 50*c_kb;  -- Add 50M for TEMP
2771      END IF;
2772  
2773      -- See if this is the UNDO tablespace - be sure at least
2774      -- 400M (or c_undo_minsz_kb) is available
2775      IF ts_info(t).name = db_undo_tbs THEN
2776        ts_info(t).min := c_undo_minsz_kb;
2777        IF ts_info(t).alloc < ts_info(t).min THEN
2778          delta_kbytes := ts_info(t).min - ts_info(t).inuse;
2779        ELSE
2780          delta_kbytes := 0;
2781        END IF;
2782      END IF;  -- end of if this is the undo tablespace
2783  
2784      -- If DBUA output, then add in EM install if not in database
2785      IF pOutputType = c_output_xml THEN
2786        IF NOT cmp_info(em).processed THEN
2787          IF ts_info(t).name = 'SYSTEM' THEN
2788            delta_kbytes := delta_kbytes + cmp_info(em).ins_sys_kbytes;
2789          ELSIF ts_info(t).name = 'SYSAUX' THEN
2790            delta_kbytes := delta_kbytes + cmp_info(em).ins_def_kbytes;
2791          END IF;
2792        END IF;
2793      END IF;
2794  
2795      -- Put a 20% safety factor on DELTA and round it off
2796      delta_kbytes := ROUND(delta_kbytes*1.20);
2797  
2798      -- Finally, save DELTA value
2799      ts_info(t).delta := delta_kbytes;
2800  
2801      -- Calculate here the recommendation for minimum tablespace size - it is
2802      -- the "delta" plus existing in use amount IF tablespace is not undo.
2803      -- Else if tablespace is undo, then minimum was already set above
2804      -- to 400M (or c_undo_minsz_kb); therefore no need to calculate here.
2805  
2806      -- calculate ts_info(t).min
2807      IF ts_info(t).name != db_undo_tbs THEN
2808        -- calculate minimum tablespace size IF tablespace is NOT undo
2809        ts_info(t).min := ts_info(t).inuse + ts_info(t).delta;
2810  
2811        -- See if this is the SYSAUX tablespace - be sure at least 500M allocated
2812        IF ts_info(t).name = 'SYSAUX' THEN
2813          IF ts_info(t).min < c_sysaux_minsz_kb THEN
2814            ts_info(t).min := c_sysaux_minsz_kb;
2815          END IF;
2816        END IF;  -- end of checking that the minimum required space for SYSAUX
2817                 -- is at least 500Mb (or c_sysaux_minsz_kb)
2818  
2819      END IF;  -- end of calculate ts_info(t).min
2820  
2821      -- convert to MB and round up(min required)/down (alloc,avail,inuse)
2822      ts_info(t).min :=   CEIL(ts_info(t).min/c_kb);
2823      ts_info(t).alloc := ROUND((ts_info(t).alloc-512)/c_kb);
2824      ts_info(t).avail := ROUND((ts_info(t).avail-512)/c_kb);
2825      ts_info(t).inuse := ROUND((ts_info(t).inuse)/c_kb);
2826  
2827      -- Determine amount of additional space needed
2828      -- independent of autoextend on/off
2829      --
2830  
2831      IF ts_info(t).min > ts_info(t).alloc THEN
2832        ts_info(t).addl  := ts_info(t).min - ts_info(t).alloc;
2833      ELSE
2834        ts_info(t).addl := 0;
2835      END IF;
2836  
2837      -- Do we have enough space in the existing tablespace?
2838      IF ts_info(t).min <= ts_info(t).avail  THEN
2839        ts_info(t).inc_by := 0;
2840      ELSE
2841         -- need to add space
2842         ts_info(t).inc_by := ts_info(t).min - ts_info(t).avail;
2843  
2844         -- sorta silly to ask user to increase tablespace by, for example, 3M.
2845         -- so how about : if there are any increases of less than 50M, we'll
2846         -- just round up the increase to 50M (or c_incby_minsz_mb).
2847         IF ts_info(t).inc_by < c_incby_minsz_mb THEN
2848           -- round up 'min' size such that the inc_by size would equal to 50M
2849           ts_info(t).min := ts_info(t).min +
2850                               (c_incby_minsz_mb - ts_info(t).inc_by);
2851           -- round up the 'inc_by' size to 50M
2852           ts_info(t).inc_by := c_incby_minsz_mb;
2853         END IF;  -- if inc_by is < 50M
2854      END IF;
2855  
2856      -- Find at least one file in the tablespace with autoextend on.
2857      -- If found, then that tablespace has autoextend on; else not on.
2858      -- DBUA will use this information to add to autoextend
2859      -- or to check for total space on disk
2860      --
2861      IF ts_info(t).addl > 0 OR ts_info(t).inc_by > 0 THEN
2862        ts_info(t).fauto := FALSE;
2863        IF ts_info(t).temporary AND  ts_info(t).localmanaged THEN
2864          OPEN tmp_cursor FOR
2865               'SELECT file_name, autoextensible from sys.dba_temp_files ' ||
2866               'where tablespace_name = :1' using ts_info(t).name;
2867        ELSE
2868          OPEN tmp_cursor FOR
2869               'SELECT file_name, autoextensible from sys.dba_data_files ' ||
2870               'where tablespace_name = :1' using ts_info(t).name;
2871        END IF;
2872        LOOP
2873          FETCH tmp_cursor INTO tmp_filename, tmp_varchar2;
2874          EXIT WHEN tmp_cursor%NOTFOUND;
2875          IF tmp_varchar2 = 'YES' THEN
2876            ts_info(t).fname := tmp_filename;
2877            ts_info(t).fauto := TRUE;
2878            EXIT;
2879          END IF;
2880        END LOOP;
2881        CLOSE tmp_cursor;
2882      END IF;
2883    END LOOP;  -- end of tablespace loop
2884  END init_resources;
2885  
2886  procedure time_zone_check
2887  IS
2888    --
2889    -- This is decared as a public function for the package.
2890    --
2891    -- Allow dbms_preup.timezone_check to be called which
2892    -- tells the real procedure to call the init routine.
2893    --
2894  BEGIN
2895    tz_fixup(TRUE);
2896  END time_zone_check;
2897  
2898  procedure tz_fixup (call_init BOOLEAN)
2899  IS
2900    --
2901    -- This is the timzeone procedure that does the work
2902    --
2903    tmp_bool BOOLEAN;
2904  BEGIN
2905    -- If called with call_init = TRUE, call the init
2906    -- package, otherwise don't.  We need this because
2907    -- the init package will call this procedure
2908    -- and we'll end up in a loop.
2909    --
2910    IF call_init THEN
2911      init_package;
2912    ELSE
2913      -- Need db_tz_version below - fetch it the same way the init routine
2914      -- does.
2915      EXECUTE IMMEDIATE 'SELECT version from v$timezone_file'
2916        INTO db_tz_version;
2917    END IF;
2918    --
2919    -- Update registry$database with tz version (create it if necessary)
2920    --
2921    tmp_bool := FALSE;
2922    IF is_db_readonly = FALSE and NOT db_invalid_state THEN
2923      BEGIN
2924        EXECUTE IMMEDIATE
2925            'UPDATE registry$database set tz_version = :1'
2926        USING db_tz_version;
2927        COMMIT;
2928      EXCEPTION WHEN OTHERS THEN
2929        IF sqlcode = -904 THEN  -- registry$database exists but no tz_version
2930          tmp_bool := TRUE;
2931        END IF;
2932      END;
2933  
2934      IF tmp_bool = TRUE
2935      THEN
2936        --
2937        -- registry$database does not have tz_version,
2938        -- add it here.
2939        --
2940        EXECUTE IMMEDIATE
2941               'ALTER TABLE registry$database ADD (tz_version NUMBER)';
2942        EXECUTE IMMEDIATE
2943               'UPDATE registry$database set tz_version = :1'
2944        USING db_tz_version;
2945        COMMIT;
2946      END IF;
2947  
2948      -- populate sys.props$ with Day Light Saving Time (DST) props
2949      -- Only needed for releases before 11.2
2950      IF db_n_version IN (102, 111) THEN
2951        -- only if the database time zone file versions match.
2952        BEGIN
2953          -- remove all DST entries that we will then populate
2954          EXECUTE IMMEDIATE '
2955             DELETE sys.props$ WHERE name IN (''DST_UPGRADE_STATE'',
2956                                            ''DST_PRIMARY_TT_VERSION'',
2957                                            ''DST_SECONDARY_TT_VERSION'')';
2958          EXECUTE IMMEDIATE 'INSERT INTO sys.props$ (name, value$, comment$)
2959               VALUES (''DST_UPGRADE_STATE'', ''NONE'',
2960                     ''State of Day Light Saving Time Upgrade'')';
2961          EXECUTE IMMEDIATE 'INSERT INTO sys.props$ (name, value$, comment$)
2962               VALUES (''DST_PRIMARY_TT_VERSION'', TO_CHAR( :1, ''FM999''),
2963                     ''Version of primary timezone data file'')'
2964          USING db_tz_version;
2965          EXECUTE IMMEDIATE 'INSERT INTO sys.props$ (name, value$, comment$)
2966                VALUES (''DST_SECONDARY_TT_VERSION'', ''0'',
2967                      ''Version of secondary timezone data file'')';
2968          COMMIT;
2969        END;
2970      END IF;
2971    END IF;  -- DB read only and db_invalid state
2972  END tz_fixup;
2973  
2974  --
2975  -- Put a line out to the output file (or screen)
2976  --
2977  PROCEDURE DisplayLine (line VARCHAR2)
2978  IS
2979  BEGIN
2980    --
2981    -- If the package isn't inited yet (output from init routines)
2982    -- use dbms_output (output files would not be opened)
2983    --
2984    IF p_package_inited = FALSE OR pOutputDest = c_output_terminal THEN
2985      dbms_output.put_line (line);
2986    ELSE
2987      UTL_FILE.PUT_LINE (pOutputUFT,line);
2988    END IF;
2989  END DisplayLine;
2990  
2991  --
2992  -- Put a line of text directly to a file
2993  --
2994  PROCEDURE DisplayLine (uft UTL_FILE.FILE_TYPE, line IN VARCHAR2)
2995  IS
2996  BEGIN
2997    BEGIN
2998      UTL_FILE.PUT_LINE (uft,line);
2999    EXCEPTION
3000      WHEN OTHERS THEN NULL; -- utl_file.invalid_filehandle
3001    END;
3002  END DisplayLine;
3003  
3004  PROCEDURE DisplayDiagLine (line IN VARCHAR2)
3005  IS
3006  BEGIN
3007    IF pOutputType = c_output_xml THEN
3008      DisplayLine ('<!-- DBG: ' || line || ' -->');
3009    ELSE
3010      DisplayLine ('DBG: ' || line);
3011    END IF;
3012  END DisplayDiagLine;
3013  
3014  --
3015  -- Put a line out using put_line (no matter what)
3016  --
3017  PROCEDURE DisplayLinePL (line VARCHAR2)
3018  IS
3019  BEGIN
3020    dbms_output.put_line (line);
3021  END DisplayLinePL;
3022  
3023  FUNCTION CenterLine (line IN VARCHAR2) RETURN VARCHAR2
3024  IS
3025  BEGIN
3026    RETURN (LPAD(line,35+(length(line)/2)+1));
3027  END CenterLine;
3028  
3029  --
3030  -- Put a line of text to output AND to passed file but
3031  -- its wrapped around dbms_output.put_line (so text only)
3032  -- intended to be dumped out while the pre/post fixup scripts
3033  -- are being run.
3034  -- If the line parameter contains single quote characters, they will be doubled
3035  -- here as needed for the script output.
3036  --
3037  PROCEDURE DisplayLineBoth (uft UTL_FILE.FILE_TYPE, line IN VARCHAR2)
3038  IS
3039  BEGIN
3040    DisplayLine(line);
3041    IF pOutputFixupScripts THEN
3042      DisplayLine (uft, 'dbms_output.put_line (''' || replace(line, q'!'!', q'!''!') || ''');');
3043    END IF;
3044  END DisplayLineBoth;
3045  
3046  
3047  PROCEDURE DisplayBanner
3048  IS
3049  BEGIN
3050    DisplayLine('**********************************************************************');
3051  END DisplayBanner;
3052  
3053  --
3054  -- Overloaded version go to script file if we are creating one.
3055  --
3056  PROCEDURE DisplayBanner (uft UTL_FILE.FILE_TYPE)
3057  IS
3058  BEGIN
3059    DisplayLine('**********************************************************************');
3060    IF pOutputFixupScripts THEN
3061      DisplayLine (uft, 'dbms_output.put_line ('''
3062        || '**********************************************************************'
3063        || ''');');
3064    END IF;
3065  END DisplayBanner;
3066  
3067  --
3068  -- Put the passed line out, centering it in a field of 70 char (the length of the banner)
3069  --
3070  PROCEDURE DisplayCenter (line IN VARCHAR2)
3071  IS
3072  BEGIN
3073    DisplayLine(LPAD(line,35+(length(line)/2)+1));
3074  END DisplayCenter;
3075  
3076  --
3077  -- Overloaded, including dumping to script file (only TEXT to be
3078  -- displayed when the script file is executed)
3079  --
3080  PROCEDURE DisplayCenter (uft UTL_FILE.FILE_TYPE, line IN VARCHAR2)
3081  IS
3082  BEGIN
3083    DisplayLine(LPAD(line,35+(length(line)/2)+1));
3084    IF pOutputFixupScripts THEN
3085      DisplayLine (uft, 'dbms_output.put_line ('''
3086        || LPAD(line,35+(length(line)/2)+1)
3087        || ''');');
3088    END IF;
3089  END DisplayCenter;
3090  
3091  --
3092  -- Same as above, only use dbms_output.put_line only
3093  -- Intended to be used by fixup routine to better control
3094  -- format.
3095  --
3096  PROCEDURE DisplayCenterPL (line IN VARCHAR2)
3097  IS
3098  BEGIN
3099    dbms_output.put_line(LPAD(line,35+(length(line)/2)+1));
3100  END DisplayCenterPL;
3101  
3102  PROCEDURE DisplayInformation (text varchar2)
3103  IS
3104  BEGIN
3105    DisplayLine ('INFORMATION: --> ' || text);
3106  END DisplayInformation;
3107  
3108  PROCEDURE DisplayWarning (text varchar2)
3109  IS
3110  BEGIN
3111    DisplayLine ('WARNING: --> ' || text);
3112  END DisplayWarning;
3113  
3114  PROCEDURE DisplayError (text varchar2)
3115  IS
3116  BEGIN
3117    pCheckErrorCount := pCheckErrorCount + 1;
3118    DisplayLine ('ERROR: --> ' || text);
3119  END DisplayError;
3120  
3121  -- Put a blank line in a file (e.g., preupgrade fixup script)
3122  PROCEDURE DisplayBlankLine (uft UTL_FILE.FILE_TYPE)
3123  IS
3124  BEGIN
3125    DisplayLine (uft, ' ');
3126  END DisplayBlankLine;
3127  
3128  --
3129  --  Define what the output from this is going to be
3130  --  Text/XML are the only valid options.
3131  --  Defaulting to text
3132  -- If XML, call the procedure to output the header
3133  -- .
3134  PROCEDURE set_output_type (p_type VARCHAR2)
3135  IS
3136  BEGIN
3137    IF p_type = 'XML' THEN
3138      pOutputType := c_output_xml;
3139    ELSE
3140      -- Default to text
3141      pOutputType := c_output_text;
3142    END IF;
3143  END set_output_type;
3144  
3145  PROCEDURE set_output_file (p_on_off BOOLEAN)
3146  IS
3147  BEGIN
3148    IF p_on_off THEN
3149      IF pOutputDest = c_output_file THEN
3150        -- Already done.
3151        RETURN;
3152      END IF;
3153      set_output_file (c_output_fn);
3154    ELSE
3155      close_file;
3156    END IF;  -- on/off
3157  END set_output_file;
3158  
3159  --
3160  -- Overloaded version of set_output_file to include
3161  -- location.
3162  -- Note that p_location is assumed to be verified
3163  -- by the caller.
3164  --
3165  PROCEDURE set_output_file (p_location VARCHAR2, p_fn VARCHAR2)
3166  IS
3167  BEGIN
3168    -- Set local dirobject name then call set output
3169    pOutputLocation := p_location;
3170    pOutputVerified := TRUE;
3171    set_output_file(p_fn);
3172  END set_output_file;
3173  
3174  PROCEDURE set_output_file (p_fn VARCHAR2)
3175  IS
3176    openFailure BOOLEAN;
3177  
3178    invalidFileOperation  EXCEPTION;
3179    PRAGMA exception_init(invalidFileOperation, -29283);
3180  BEGIN
3181  
3182    IF (pOutputLocation IS NULL ) THEN
3183      verifyDefaultDirObj;
3184    END IF;
3185  
3186    -- if file type is TEXT, then file name is hardcoded as 'preupgrade.log'.
3187    -- if file type is XML, then file name had verbally been agreed on
3188    -- as 'upgrade.xml'.
3189    pOutputFName := p_fn;
3190  
3191    -- If file type is TEXT, then final destination output files (if
3192    -- not TERMINAL) are 'preupgrade.log', 'preupgrade_fixups.sql', and
3193    -- 'postupgrade_fixups.sql'.
3194    -- If file type is XML, then possible final destination output file is
3195    -- 'upgrade.xml'.
3196    --
3197    IF (pOutputType = c_output_text) THEN
3198      finalDestLogFn         := pOutputFName;      -- 'preupgrade.log'
3199      finalDestPreScriptFn   := pPreScriptFname;   -- 'preupgrade_fixups.sql'
3200      finalDestPostScriptFn  := pPostScriptFname;  -- 'postupgrade_fixups.sql'
3201    ELSIF (pOutputType = c_output_xml) THEN
3202      finalDestLogFn         := pOutputFName;      -- 'upgrade.xml'
3203      finalDestPreScriptFn   := ''; -- NULL
3204      finalDestPostScriptFn  := ''; -- NULL
3205    END IF;
3206  
3207    --
3208    -- determine pConcatToMainFile value:
3209    -- a) non-cdb and root will write directly to main destination file => FALSE
3210    -- b) if pdb and TEXT (not dbua) -> concat to main destination files => TRUE
3211    -- c) if pdb and XML (dbua) -> write directly to main destination file
3212    --    one by one => FALSE
3213    --
3214    IF (dbms_preup.is_db_noncdb OR dbms_preup.is_con_root) THEN
3215      pConcatToMainFile := FALSE;
3216    ELSE  -- if db is a seed or pdb
3217      IF (pOutputType = c_output_text) THEN
3218        -- will append pdb TEXT file to destination file
3219        pConcatToMainFile := TRUE;
3220      ELSIF (pOutputType = c_output_xml) THEN
3221        -- will not append pdb XML file to destination file
3222        pConcatToMainFile := FALSE;
3223      END IF;
3224    END IF;
3225  
3226    -- if output type is text and db is a pdb, then determine output file names.
3227    -- preupgrade.<con_name>.log
3228    -- preupgrade_fixups.<con_name>.sql
3229    -- postupgrade_fixups.<con_name>.sql
3230    -- note: above pdb files are first created in PREUPGRADE_DIR.
3231    -- note: after concat is done, then pdb files are moved to PDB_PREUPGRADE_DIR.
3232    --
3233    IF pConcatToMainFile THEN
3234      con_name := sys.dbms_preup.get_con_name;
3235  
3236      pOutputFName := c_text_log_base || con_name || c_text_log_suffix;
3237      pPreScriptFname  := c_pre_fixup_base || con_name || c_fixup_suffix;
3238      pPostScriptFname := c_post_fixup_base || con_name || c_fixup_suffix;
3239    END IF;
3240  
3241    IF tracing_on_xxx THEN
3242      dbms_output.put_line('XXX finalDestLogFn : ' || finalDestLogFn);
3243      dbms_output.put_line('XXX finalDestPreScriptFn : '|| finalDestPreScriptFn);
3244      dbms_output.put_line('XXX finalDestPostScriptFn : '||finalDestPostScriptFn);
3245      dbms_output.put_line('XXX pOutputFName : ' || pOutputFName);
3246      dbms_output.put_line('XXX pPreScriptFname : ' || pPreScriptFname);
3247      dbms_output.put_line('XXX pPostScriptFname : ' || pPostScriptFname);
3248    END IF;
3249  
3250    -- initialize: remove pdb text files in pdbfiles subdir
3251    IF pConcatToMainFile THEN
3252      BEGIN
3253        UTL_FILE.FREMOVE(c_pdb_dir_obj, pOutputFName);
3254      EXCEPTION WHEN OTHERS THEN NULL;
3255      END;
3256  
3257      BEGIN
3258        UTL_FILE.FREMOVE(c_pdb_dir_obj, pPreScriptFname);
3259      EXCEPTION WHEN OTHERS THEN NULL;
3260      END;
3261  
3262      BEGIN
3263        UTL_FILE.FREMOVE(c_pdb_dir_obj, pPostScriptFname);
3264      EXCEPTION WHEN OTHERS THEN NULL;
3265      END;
3266    END IF;
3267  
3268    -- remove lock (just in case it exists from a previous run) right at the
3269    -- begin of connect to either a non-cdb or cdb root
3270    IF (dbms_preup.is_db_noncdb OR dbms_preup.is_con_root) THEN
3271      BEGIN
3272        UTL_FILE.FREMOVE(pOutputLocation, c_wrlock_fname);
3273      EXCEPTION
3274        WHEN invalidFileOperation THEN NULL;
3275        WHEN OTHERS THEN NULL;
3276      END;
3277    END IF;
3278  
3279    openFailure := FALSE;
3280    IF pOutputVerified THEN
3281      BEGIN
3282  
3283        -- if log file is TEXT, then:
3284        --   if non-cdb OR if cdb$root, create preupgrade.log using 'W' mode
3285        --   if cdb and container is non-root, create file using 'A' mode
3286  
3287        -- if log file is XML, then:
3288        --   always create upgrade.xml using 'A' mode as DBUA will be writing
3289        --   lines to it prior to calling preupgrade tool
3290  
3291        IF (pOutputType = c_output_text) THEN
3292          -- preupgrade.log is opened in write mode
3293          -- preupgrade.<con_name>.log is also opened in write mode
3294          pOutputUFT :=
3295            UTL_FILE.FOPEN(pOutputLocation, pOutputFName, 'W', c_fopen_max_lsz);
3296          IF tracing_on_xxx = TRUE THEN
3297            dbms_output.put_line('XXX preupgrade log opened');
3298            dbms_output.put_line('XXX   out dir obj ' || pOutputLocation);
3299            dbms_output.put_line('XXX   pOutputFName ' || pOutputFName);
3300          END IF;
3301        ELSIF (pOutputType = c_output_xml) THEN
3302           -- upgrade.xml is always opened in append mode
3303           --
3304           -- note: if we were to support concat-ting pdb files to a the
3305           --       MAIN upgrade.xml for DBUA, then should pConcatToMainFile
3306           --       is equal to TRUE, the file open mode would be 'W', not 'A'.
3307           --
3308           pOutputUFT :=
3309             UTL_FILE.FOPEN(pOutputLocation, pOutputFName, 'A', c_fopen_max_lsz);
3310        END IF;
3311  
3312        EXCEPTION
3313          WHEN OTHERS THEN
3314            openFailure := TRUE;
3315      END;
3316      IF openFailure THEN
3317        DisplayLine ('WARNING: Failed to open ' || pOutputFName || ' in the directory ' || pOutputLocation || ' for write access');
3318        DisplayLine('    script will generate terminal output only');
3319        pOutputVerified := FALSE;
3320        pOutputLocation := NULL;
3321        pOutputDest       := c_output_terminal;
3322        -- if we are writing to terminal (for example, because the db is read
3323        -- only and directory object cannot be created, then we are not going
3324        -- to concat to main file)
3325        IF pConcatToMainFile = TRUE THEN
3326          pConcatToMainFile := FALSE;  -- reset to FALSE since writing to terminal
3327        END IF;
3328      ELSE
3329        pOutputDest := c_output_file;
3330      END IF;
3331    ELSE
3332      --
3333      -- Failed to verify the outputdir, default to
3334      -- terminal (verify routine will issue error)
3335      --
3336      pOutputDest := c_output_terminal;
3337  
3338      -- if we are writing to terminal, then we are not going to concat to
3339      -- main file
3340      IF pConcatToMainFile = TRUE THEN
3341        pConcatToMainFile := FALSE;  -- reset to FALSE since writing to terminal
3342      END IF;
3343    END IF;
3344  END set_output_file;
3345  
3346  -- display where the preupgrade results are located
3347  PROCEDURE output_results_location
3348  IS
3349    path     VARCHAR2(500);
3350  BEGIN
3351      path := get_output_path;
3352      DisplayLinePL(CenterLine('************************************************************'));
3353        DisplayLinePL('');
3354        DisplayLinePL(CenterLine('====>> PRE-UPGRADE RESULTS for ' || con_name || ' <<===='));
3355        DisplayLinePL('');
3356        DisplayLinePL('ACTIONS REQUIRED:');
3357        DisplayLinePL('');
3358        DisplayLinePL('1. Review results of the pre-upgrade checks:');
3359        DisplayLinePL(' ' || path || finalDestLogFn);
3360        DisplayLinePL('');
3361        DisplayLinePL('2. Execute in the SOURCE environment BEFORE upgrade:');
3362        DisplayLinePL(' ' || path || finalDestPreScriptFn);
3363        DisplayLinePL('');
3364        DisplayLinePL('3. Execute in the NEW environment AFTER upgrade:');
3365        DisplayLinePL(' ' || path || finalDestPostScriptFn);
3366        DisplayLinePL('');
3367      DisplayLinePL(CenterLine('************************************************************'));
3368  
3369  END output_results_location;
3370  
3371  PROCEDURE close_file
3372  IS
3373  BEGIN
3374  
3375    IF tracing_on_xxx THEN
3376      dbms_output.put_line('XXX in close_file');
3377    END IF;
3378  
3379    IF pOutputDest = c_output_file THEN
3380      IF (UTL_FILE.IS_OPEN(pOutputUFT)) THEN
3381        UTL_FILE.FCLOSE(pOutputUFT);
3382        IF tracing_on_xxx THEN
3383          dbms_output.put_line('XXX close log file');
3384        END IF;
3385      END IF;
3386      pOutputDest := c_output_terminal;
3387  
3388      IF (UTL_FILE.IS_OPEN(pPreScriptUFT)) THEN
3389        UTL_FILE.FCLOSE(pPreScriptUFT);
3390        IF tracing_on_xxx THEN
3391          dbms_output.put_line('XXX close preupgrade_fixups.sql');
3392        END IF;
3393      END IF;
3394  
3395      IF (UTL_FILE.IS_OPEN(pPostScriptUFT)) THEN
3396        UTL_FILE.FCLOSE(pPostScriptUFT);
3397        IF tracing_on_xxx THEN
3398          dbms_output.put_line('XXX close postupgrade_fixups.sql');
3399        END IF;
3400      END IF;
3401  
3402      IF tracing_on_xxx THEN
3403        dbms_output.put_line('XXX in close_file');
3404        dbms_output.put_line('XXX pTextLogDir is ' || pTextLogDir);
3405        dbms_output.put_line('XXX pOutputFName is ' || pOutputFName);
3406        dbms_output.put_line('XXX pOutputLocation is ' || pOutputLocation);
3407      END IF;
3408  
3409      IF pOutputFixupScripts = FALSE AND pCreatedDirObj THEN
3410        --
3411        -- Cleanup the directory if we created it, however the
3412        -- DBUA process deals with this so just ignore any
3413        -- drop error.
3414        --
3415        BEGIN
3416          EXECUTE IMMEDIATE 'DROP DIRECTORY :1' USING pOutputLocation;
3417        EXCEPTION WHEN OTHERS THEN NULL;
3418        END;
3419      END IF;
3420      -- We no longer have a pOutputFName and reset pOutputLocation
3421      pOutputFName := NULL;
3422      pOutputLocation := NULL;
3423    END IF;
3424  END close_file;
3425  
3426  --
3427  -- For manual mode, we need to output the path were the logs/scripts
3428  -- If we are not outputting files, return ''
3429  --
3430  FUNCTION get_output_path RETURN VARCHAR2
3431  IS
3432    path    VARCHAR2(4000);
3433  BEGIN
3434    IF pOutputFixupScripts = FALSE THEN
3435      RETURN '*** Scripts/Logs are not being Generated ***';
3436    END IF;
3437  
3438    BEGIN
3439      EXECUTE IMMEDIATE 'SELECT directory_path from SYS.DBA_DIRECTORIES where directory_name=:1'
3440      INTO path
3441      USING c_dir_obj;
3442      EXCEPTION WHEN NO_DATA_FOUND THEN
3443        -- Bug 18463200: workaround is to return the path that was used to
3444        -- create/replace the directory object if db is a pdb
3445        IF (dbms_preup.is_db_noncdb = TRUE OR       -- is a non-cdb
3446              dbms_preup.is_con_root = TRUE) THEN   -- OR cdb$root
3447          path := '*** PATH NOT DEFINED ***';
3448        ELSE -- this must be a pdb$seed or just a pdb
3449          IF pTextLogDir is NULL THEN  -- path is really not defined
3450            path := '*** PATH NOT DEFINED ***';
3451          ELSE
3452            -- pTextLogDir (due to enquote_literal) has single quotes around
3453            -- the string so remove them.
3454            path := ltrim(pTextLogDir, '''');
3455            path := rtrim(path, '''');
3456          END IF;
3457        END IF;
3458    END;
3459    RETURN path;
3460  END get_output_path;
3461  
3462  --
3463  -- note: this procedure is only called for when file type is text
3464  --
3465  PROCEDURE set_fixup_scripts (p_on_off BOOLEAN)
3466  IS
3467    openFailure BOOLEAN;
3468    timeinfo    VARCHAR2(60);
3469    genline     VARCHAR2(200);
3470  BEGIN
3471    IF p_on_off THEN  -- IF p_on_off is ON or TRUE
3472      IF pOutputFixupScripts THEN
3473        -- Already done.
3474        RETURN;
3475      END IF;
3476  
3477      IF tracing_on_xxx THEN
3478        dbms_output.put_line('XXX set_fixup_scripts: ON');
3479      END IF;
3480  
3481      --
3482      -- Make sure a directory object exists
3483      --
3484      verifyDefaultDirObj;
3485  
3486      IF pOutputVerified = FALSE THEN
3487        --
3488        -- We couldn't verify the directory object
3489        --
3490        pOutputFixupScripts := FALSE;
3491        RETURN;
3492      END IF;
3493  
3494      --
3495      -- Open both files and put some info out.
3496      -- Also dump out a begin/end output line - if there
3497      -- is no errors, these lines will stop the script from
3498      -- generating an error because the begin/end block would be
3499      -- empty.
3500      --
3501      openFailure := FALSE;
3502      BEGIN
3503        -- ALWAYS open PREupgrade fixup file in Write mode (not Append mode).
3504        -- Reasons:
3505        -- a) non-cdb: overwrite 'preupgrade_fixups.sql' if already exists
3506        -- b) cdb: Since ROOT writes to 'preupgrade_fixups.sql' and PDBs write
3507        --         to 'preupgrade_fixups.<con_name>.sql', each file will be
3508        --         overwritten if already exists
3509        pPreScriptUFT  := UTL_FILE.FOPEN(pOutputLocation, pPreScriptFname,
3510                                         'W', c_fopen_max_lsz);
3511  
3512        IF tracing_on_xxx THEN
3513          dbms_output.put_line('XXX opened file ' || pPreScriptFname);
3514        END IF;
3515  
3516        EXCEPTION
3517          WHEN OTHERS THEN
3518            openFailure := TRUE;
3519      END;
3520  
3521      IF openFailure THEN
3522        DisplayLine ('WARNING: Failed to open ' || pPreScriptFname || ' for write access');
3523      ELSE
3524        -- ALWAYS open POSTupgrade fixup file in Write mode (not Append mode).
3525        -- Reasons:
3526        -- a) non-cdb: overwrite 'postupgrade_fixups.sql' if already exists
3527        -- b) cdb: Since ROOT writes to 'postupgrade_fixups.sql' and PDBs write
3528        --         to 'postupgrade_fixups.<con_name>.sql', each file will be
3529        --         overwritten if already exists
3530        BEGIN
3531          pPostScriptUFT :=
3532            UTL_FILE.FOPEN(pOutputLocation, pPostScriptFname, 'W',
3533                           c_fopen_max_lsz);
3534  
3535          IF tracing_on_xxx THEN
3536            dbms_output.put_line('XXX opened file ' || pPostScriptFname);
3537          END IF;
3538  
3539          EXCEPTION
3540            WHEN OTHERS THEN
3541              openFailure := TRUE;
3542        END;
3543        IF openFailure THEN
3544          DisplayLine ('WARNING: Failed to open ' || pPostScriptFname || ' for write access');
3545        END IF;
3546      END IF;
3547  
3548      IF openFailure THEN
3549        DisplayLine('     script will not generate fixup scripts.');
3550        pOutputVerified := FALSE;
3551        pOutputLocation := NULL;
3552        pOutputFixupScripts := FALSE;
3553        RETURN;
3554      END IF;
3555  
3556      IF tracing_on_xxx THEN
3557        dbms_output.put_line('XXX preupgrade_fixup script opened');
3558        dbms_output.put_line('XXX   pOutputLocation ' || pOutputLocation);
3559        dbms_output.put_line('XXX   pPreScriptFname ' || pPreScriptFname);
3560        dbms_output.put_line('XXX postupgrade_fixup script opened');
3561        dbms_output.put_line('XXX   pOutputLocation ' || pOutputLocation);
3562        dbms_output.put_line('XXX   pPostScriptFname ' || pPostScriptFname);
3563      END IF;
3564  
3565      EXECUTE IMMEDIATE 'SELECT TO_CHAR(SYSTIMESTAMP,''YYYY-MM-DD HH24:MI:SS '') FROM SYS.DUAL'
3566      INTO timeinfo;
3567  
3568      --
3569      -- The linesize at 750 allows the buffering of some of the help text
3570      -- which can get long.  No data will be lost, the line will just be
3571      -- unnaturally wrapped.
3572      --
3573      -- a) If this is a cdb, the prefixup steps for multiple containers go into
3574      -- one prefixup file; and the postfixup steps for multiple containers go
3575      -- into one postfixup file.  In order to make this work, the fixup steps
3576      -- for a container will go into a IF stmt that gets executed if the
3577      -- container name for those fixup steps match the name of the current
3578      -- container connected to.
3579      -- b) For consistency between a non-cdb and cdb, we keep the same IF stmt
3580      -- format for the fixup steps for both non-cdbs and cdbs.  For
3581      -- non-cdbs, we match database names.  For cdbs, we match container names.
3582      --
3583      DisplayLine (pPreScriptUFT, 'REM Pre-Upgrade Script Generated on: ' || timeinfo);
3584      DisplayLine (pPreScriptUFT, 'REM Generated by Version: ' || c_version || ' Build: '
3585                                          || c_build);
3586      DisplayLine (pPreScriptUFT, 'SET ECHO OFF SERVEROUTPUT ON FORMAT WRAPPED TAB OFF LINESIZE 750;' || crlf);
3587      DisplayBlankLine (pPreScriptUFT);
3588  
3589      -- In a fixup script, there is a block with IF stmt for each database or
3590      -- container's fixup steps.
3591      DisplayLine (pPreScriptUFT, 'DECLARE');
3592      DisplayLine (pPreScriptUFT, 'con_name varchar2(40);');
3593      DisplayBlankLine (pPreScriptUFT);
3594      DisplayLine (pPreScriptUFT, 'BEGIN ');
3595      DisplayLine (pPreScriptUFT, 'execute immediate ');
3596      DisplayLine (pPreScriptUFT, '  ''select dbms_preup.get_con_name from sys.dual'' into con_name;');
3597  
3598      -- If the session currently connected to is of a database or container that
3599      -- matches the name in the IF stmt, then stay in the block and run the
3600      -- fixup steps.
3601      -- Else, if the names do not match, then continue on to the next block in
3602      -- the fixup script.
3603      EXECUTE IMMEDIATE
3604        'select dbms_preup.get_con_name from sys.dual' INTO con_name;
3605      DisplayBlankLine (pPreScriptUFT);
3606      DisplayLine (pPreScriptUFT, 'IF con_name = ''' || con_name || ''' THEN');
3607      DisplayBlankLine (pPreScriptUFT);
3608  
3609      -- In its own begin/end so the output gets out before
3610      -- the real work gets started.
3611      genline := 'Pre-Upgrade Fixup Script Generated on ' || timeinfo || ' Version: ' || c_version
3612          || ' Build: ' || c_build;
3613      DisplayLine (pPreScriptUFT, 'BEGIN');
3614      DisplayLine (pPreScriptUFT, 'dbms_output.put_line (''' || genline || ''');');
3615      DisplayLine (pPreScriptUFT, 'dbms_output.put_line (''Beginning Pre-Upgrade Fixups...'');');
3616      genline := 'Executing in container ' || con_name;
3617      DisplayLine (pPreScriptUFT, 'dbms_output.put_line (''' || genline || ''');');
3618      DisplayLine (pPreScriptUFT, 'END;');
3619      DisplayBlankLine (pPreScriptUFT);
3620      DisplayLine (pPreScriptUFT, 'BEGIN');
3621      DisplayLine (pPreScriptUFT, 'dbms_preup.clear_run_flag(TRUE);');
3622      DisplayLine (pPreScriptUFT, 'END;');
3623      DisplayBlankLine (pPreScriptUFT);
3624      --
3625      -- Now post...
3626      --
3627      DisplayLine (pPostScriptUFT, 'REM Post Upgrade Script Generated on: ' || timeinfo);
3628      DisplayLine (pPostScriptUFT, 'REM Generated by Version: ' || c_version || ' Build: '
3629                                          || c_build);
3630      DisplayLine (pPostScriptUFT, 'SET ECHO OFF SERVEROUTPUT ON FORMAT WRAPPED TAB OFF LINESIZE 750;' || crlf);
3631  
3632      -- In a fixup script, there is a block for each database or
3633      -- container's fixup steps.
3634      DisplayBlankLine (pPostScriptUFT);
3635      DisplayLine (pPostScriptUFT, 'DECLARE');
3636      DisplayLine (pPostScriptUFT, 'con_name varchar2(40);');
3637      DisplayBlankLine (pPostScriptUFT);
3638      DisplayLine (pPostScriptUFT, 'BEGIN ');
3639      DisplayLine (pPostScriptUFT, 'execute immediate ');
3640      DisplayLine (pPostScriptUFT, '  ''select dbms_preup.get_con_name from sys.dual'' into con_name;');
3641  
3642      -- If the session currently connected to is of a database or container that
3643      -- matches the name in the IF block, then stay in the loop and run the
3644      -- fixup steps.
3645      -- Else, if the names do not match, then continue on to the next block in
3646      -- the fixup script.
3647      EXECUTE IMMEDIATE
3648        'select dbms_preup.get_con_name from sys.dual' INTO con_name;
3649      DisplayBlankLine (pPostScriptUFT);
3650      DisplayLine (pPostScriptUFT, 'IF con_name = ''' || con_name || ''' THEN');
3651      DisplayBlankLine (pPostScriptUFT);
3652  
3653      genline := 'Post Upgrade Fixup Script Generated on ' || timeinfo || ' Version: ' || c_version
3654          || ' Build: ' || c_build;
3655      -- In its own begin/end so the output gets out before
3656      -- the real work gets started.
3657      DisplayLine (pPostScriptUFT, 'BEGIN');
3658      DisplayLine (pPostScriptUFT, 'dbms_output.put_line (''' || genline || ''');');
3659      DisplayLine (pPostScriptUFT, 'dbms_output.put_line (''Beginning Post-Upgrade Fixups...'');');
3660      DisplayLine (pPostScriptUFT, 'END;');
3661      DisplayBlankLine (pPostScriptUFT);
3662      DisplayLine (pPostScriptUFT, 'BEGIN');
3663      DisplayLine (pPostScriptUFT, 'dbms_preup.clear_run_flag(FALSE);');
3664      DisplayLine (pPostScriptUFT, 'END;');
3665      DisplayBlankLine (pPostScriptUFT);
3666      pOutputFixupScripts := TRUE;
3667  
3668    ELSE  -- ELSE IF p_on_off is OFF or FALSE
3669      IF pOutputFixupScripts THEN
3670        --
3671        -- Dump out a call to the routine to run through all the checks and report
3672        -- a summary of success/failures/user actions
3673        --
3674        DisplayLine (pPreScriptUFT, 'BEGIN dbms_preup.fixup_summary(TRUE); END;');
3675        DisplayBlankLine(pPreScriptUFT);
3676  
3677        DisplayLine (pPostScriptUFT, 'BEGIN dbms_preup.fixup_summary(FALSE); END;');
3678        DisplayBlankLine (pPostScriptUFT);
3679  
3680  
3681        EXECUTE IMMEDIATE 'SELECT TO_CHAR(SYSTIMESTAMP,''YYYY-MM-DD HH24:MI:SS '') FROM SYS.DUAL'
3682        INTO timeinfo;
3683  
3684        DisplayLine (pPreScriptUFT, 'BEGIN');
3685        DisplayLine (pPreScriptUFT,
3686            'dbms_output.put_line (''**************** Pre-Upgrade Fixup Script Complete *********************'');');
3687        DisplayLine (pPreScriptUFT, 'END;');
3688        DisplayBlankLine (pPreScriptUFT);
3689        -- end of prefixup steps for if container connected is same as con_name
3690        DisplayLine (pPreScriptUFT,'END IF;');
3691        DisplayBlankLine (pPreScriptUFT);
3692        DisplayLine (pPreScriptUFT,'END;');
3693        DisplayLine (pPreScriptUFT, '/');  -- NEEDED for end of this block
3694        DisplayLine (pPreScriptUFT, 'REM Pre-Upgrade Script Closed At: ' || timeinfo);
3695        DisplayLine (pPreScriptUFT, 'REM __________________________________________________________________________');
3696        DisplayBlankLine (pPreScriptUFT);
3697  
3698        DisplayLine (pPostScriptUFT, 'BEGIN');
3699        DisplayLine (pPostScriptUFT,
3700            'dbms_output.put_line (''*************** Post Upgrade Fixup Script Complete ********************'');');
3701        DisplayLine (pPostScriptUFT,'END;');
3702  
3703        IF tracing_on_xxx THEN
3704          dbms_output.put_line('XXX end post upgrade fixup file');
3705        END IF;
3706  
3707        DisplayBlankLine (pPostScriptUFT);
3708        -- end of prefixup steps for if container connected is same as con_name
3709        DisplayLine (pPostScriptUFT,'END IF;');
3710        DisplayBlankLine (pPostScriptUFT);
3711        DisplayLine (pPostScriptUFT,'END;');
3712        DisplayLine (pPostScriptUFT, '/');  -- NEEDED for after end of this block
3713        DisplayLine (pPostScriptUFT,'-- Post Upgrade Script Closed At: ' || timeinfo);
3714        DisplayLine (pPostScriptUFT, 'REM __________________________________________________________________________');
3715        DisplayBlankLine (pPostScriptUFT);
3716  
3717        pOutputFixupScripts := TRUE;
3718      END IF;
3719      IF pOutputDest = c_output_terminal AND pCreatedDirObj THEN
3720        --
3721        -- If we created the directory object, (and we are not outputting
3722        -- to a log file) drop the directory object (usually done in close_file
3723        -- but that will not be called if we are not outputting a log file)
3724        --
3725        BEGIN
3726          EXECUTE IMMEDIATE 'DROP DIRECTORY :1' USING pOutputLocation;
3727        EXCEPTION WHEN OTHERS THEN NULL;
3728        END;
3729  
3730        pOutputLocation := NULL;
3731      END IF;
3732  
3733    END IF;  -- on/off
3734  END set_fixup_scripts;
3735  
3736  PROCEDURE verifyDefaultDirObj
3737  --
3738  -- Bulk of this code started with a version in catbundle.sql
3739  -- The code creates a java package to create an actual
3740  -- directory on the server under cfgtoollogs/<dbid>/preupgrade
3741  -- and then also creates a directory object to point there.
3742  -- Note: If the directory object already exists, it will
3743  -- be used and no directory will be created.
3744  --
3745  -- The global value:
3746  --   pOutputVerified
3747  -- is set to TRUE if the directory object could be verified,
3748  -- otherwise FALSE.
3749  --
3750  -- Notes:
3751  --   This routine will dump out a warning should the directory object
3752  --   fail to be verified.
3753  --
3754  IS
3755    dummy       VARCHAR2(2500);
3756    tmp_varchar VARCHAR2(200);
3757    platform    v$database.platform_name%TYPE;
3758    uniqueName  VARCHAR2(100);
3759    logDir      VARCHAR2(4000);  -- the physical directory
3760    dirObjName  VARCHAR2(128);   -- the object name
3761    rdbmsLogDir VARCHAR2(500);
3762    homeDir     VARCHAR2(500);
3763    baseDir     VARCHAR2(500);
3764    useDir      VARCHAR2(500);
3765    pdbLogDir   VARCHAR2(4000);  -- path to pdb preupgrade output files
3766    tmp_dirpath VARCHAR2(4000);
3767    clearJava      BOOLEAN;
3768    clearJavaAgain BOOLEAN := FALSE;  -- Clear Java in 10.2.0.5.0
3769    status      NUMBER;
3770    javastatus  NUMBER := 0;
3771    javaOK      NUMBER;
3772    javaExitSession  VARCHAR2(500) :=
3773      'CREATE PROCEDURE PreupJavaExit(exitStatus NUMBER)
3774         AS LANGUAGE JAVA
3775         NAME ''java.lang.System.exit(int)'';';   -- Call Java System.exit
3776    javaCreate  VARCHAR2(500) :=
3777      'CREATE OR REPLACE FUNCTION PreupCreateDir(path VARCHAR2)
3778         RETURN NUMBER AS
3779         LANGUAGE JAVA
3780         NAME ''PreupCreateDir.create (java.lang.String) return java.lang.int'';';
3781    dummyCreate   VARCHAR2(500) :=
3782      'CREATE OR REPLACE FUNCTION PreupCreateDir(path VARCHAR2)
3783         RETURN NUMBER AS
3784       BEGIN
3785         RETURN 0;
3786       END PreupCreateDir;';
3787    createString  VARCHAR2(500);
3788  
3789    nameAlreadyExists  EXCEPTION;
3790    PRAGMA exception_init(nameAlreadyExists, -955);
3791  
3792    classInUse         EXCEPTION;
3793    PRAGMA EXCEPTION_INIT(classInUse, -29553);
3794  
3795    --
3796    -- Java Exceptions in 10.2.0.5.0 where dbms_java.endsession
3797    -- does not exit so we execute System.exit instead to end
3798    -- the java session.
3799    --
3800    exitCalledFromJava EXCEPTION;
3801    PRAGMA EXCEPTION_INIT(exitCalledFromJava, -29515);
3802  
3803    JavaStateCleared EXCEPTION;
3804    PRAGMA EXCEPTION_INIT(exitCalledFromJava, -29550);
3805    openMode v$database.open_mode%TYPE := '';
3806  
3807  BEGIN
3808  
3809    --
3810    -- If the database is readonly, then this code will not be able to create
3811    -- a directory... because it works by creating a java program in the DB and calling it.
3812    -- So just return and let downstream code deal with the implications.
3813    IF is_db_readonly = TRUE THEN
3814      pOutputLocation := c_dir_obj;
3815      pOutputVerified := TRUE;
3816      return;
3817    END IF;
3818  
3819    --
3820    -- >> BEGIN: CREATE DIRECTORY OBJECT
3821    -- Begin of constructing the path to directory object PREUPGRADE_DIR and
3822    -- creating this directory object.
3823    --
3824    -- We always want to recreate the directory object PREUPGRADE_DIR (whether
3825    -- it already exists or not) as its path (if directory object already
3826    -- exists) can contain a path left over from an older upgrade (i.e., the
3827    -- path can reference an older Oracle home).  So to be safe, lets
3828    -- re-derive the path and recreate the directory object.
3829    -- Note: Another reason to recreate the directory object -
3830      --
3831      -- IF db is a cdb, then directory object needs to be re-created in
3832      -- each container, whether it pre-exists or not, as we want all containers'
3833      -- directory objects to point to the same path.
3834    --
3835    --
3836    -- Code below figures out the path to create the
3837    -- target directory.  This directory (PREUPGRADE_DIR) is where we are going
3838    -- to put the log/scripts.
3839    --
3840    -- Determine ORACLE_HOME value
3841    EXECUTE IMMEDIATE 'SELECT NLS_UPPER(platform_name) FROM v$database'
3842       INTO platform;
3843  
3844    EXECUTE IMMEDIATE 'SELECT value FROM v$parameter where '
3845       || 'name=''db_unique_name'''
3846      INTO uniqueName;
3847  
3848    -- Default to $ORACLE_BASE/cfgtoollogs/<db-unique-name>/preupgrade
3849    --  if $ORACLE_BASE is not defined then use
3850    -- $ORACLE_HOME/cfgtoollogs/<db-unique-name>/preupgrade
3851    -- if $ORACLE_HOME is not defined then error
3852  
3853    DBMS_SYSTEM.GET_ENV('ORACLE_BASE', baseDir);
3854    DBMS_SYSTEM.GET_ENV('ORACLE_HOME', homeDir);
3855  
3856    IF homeDir IS NULL THEN
3857      pOutputLocation := NULL;
3858      pOutputVerified := FALSE;
3859      DisplayLine('Warning:  ORACLE_HOME is not defined');
3860      DisplayLine('          Terminal output only');
3861      RETURN;
3862    END IF;
3863  
3864    IF baseDir IS NOT NULL THEN
3865      useDir := baseDir;
3866    ELSE
3867      useDir := homeDir;
3868    END IF;
3869  
3870    --
3871    -- Setup logDir and rdbmsLogDir, starting with useDir as the
3872    -- default.
3873    --
3874    IF INSTR(platform, 'WINDOWS') != 0 THEN
3875      -- Windows, use '\'
3876      useDir := RTRIM(useDir, '\');  -- Remove any trailing slashes
3877      logDir := dbms_assert.enquote_literal(
3878              useDir
3879           || '\cfgtoollogs\'
3880           || uniqueName
3881           || '\preupgrade\');
3882      rdbmsLogDir := homeDir || '\rdbms\log\';
3883      pdbLogDir := dbms_assert.enquote_literal(
3884                  useDir
3885                  || '\cfgtoollogs\'
3886                  || uniqueName
3887                  || '\preupgrade\pdbfiles\');
3888    ELSIF INSTR(platform, 'VMS') != 0 THEN
3889      -- VMS, use [] and .
3890      logDir := dbms_assert.enquote_literal (REPLACE (
3891            useDir
3892         || '[cfgtoollogs.'
3893         ||  uniqueName
3894         || '.preupgrade]', '][', '.'));
3895      rdbmsLogDir := REPLACE(homeDir || '[rdbms.log]', '][', '.');
3896      pdbLogDir := dbms_assert.enquote_literal (REPLACE (
3897                  useDir
3898                  || '[cfgtoollogs.'
3899                  ||  uniqueName
3900                  || '.preupgrade'
3901                  || '.pdbfiles]', '][', '.'));
3902    ELSE
3903      -- Unix and z/OS, '/'
3904      useDir := RTRIM(useDir, '/');  -- Remove any trailing slashes
3905      logDir := dbms_assert.enquote_literal(
3906              useDir
3907           || '/cfgtoollogs/'
3908           || uniqueName
3909           || '/preupgrade/');
3910      rdbmsLogDir := homeDir || '/rdbms/log/';
3911      pdbLogDir := dbms_assert.enquote_literal(
3912                  useDir
3913                  || '/cfgtoollogs/'
3914                  || uniqueName
3915                  || '/preupgrade/pdbfiles/');
3916    END IF;
3917    -- >> END: CREATE DIRECTORY OBJECT
3918    --
3919    --
3920  
3921    --
3922    -- Load in the Java piece
3923    --
3924    status := 1;
3925    javaOK := 0;
3926  
3927    --
3928    -- If anything goes wrong with checking java assume
3929    -- java is invalid.  This was preventing us from
3930    -- running the pre-upgrade tool in the target database
3931    -- going from 12.1.0.1.0 to 12.1.0.2.0 when the
3932    -- data dictionary had not been upgraded.
3933    --
3934    BEGIN
3935      javastatus :=
3936          dbms_registry.is_valid('JAVAVM',dbms_registry.release_version);
3937    EXCEPTION WHEN OTHERS THEN javastatus := 0;
3938    END;
3939  
3940    IF javastatus = 1 THEN
3941      BEGIN
3942        -- Because of the dbms_assert checks we know we are getting a string with
3943        -- leading and trailing single quotes as the path.  We need to remove those
3944        -- single quotes before using the passed path variable.
3945        EXECUTE IMMEDIATE '
3946          CREATE OR REPLACE AND COMPILE JAVA SOURCE NAMED "PreupCreateDir" AS
3947            import java.lang.*;
3948            import java.util.*;
3949            import java.io.*;
3950  
3951            public class PreupCreateDir
3952            {
3953              public static int create (String path)
3954              {
3955                path = path.substring(1,path.length()-1); /* Take off leading/trailing quotes */
3956                File myFile = new File(path);
3957                if (myFile.exists())
3958                {
3959                  if (myFile.canWrite())
3960                    return 1;  /* Directory exists and is writable, OK */
3961                  else
3962                    return 2;  /* Directory exists and is not writable, NOT OK */
3963                }
3964                else
3965                {
3966                  if (myFile.mkdirs())
3967                    return 1;  /* Directory created, OK */
3968                  else
3969                    return 4;  /* Directory could not be created, NOT OK */
3970                }
3971              }
3972            }';
3973          javaOK := 1;
3974          EXCEPTION
3975            WHEN classInUse THEN javaOK := 1;  -- already created
3976            WHEN OTHERS THEN     javaOK := 0;
3977      END;
3978  
3979      IF javaOK = 1 THEN
3980        createString := javaCreate;
3981        --
3982        -- Create the jacket System.exit function. We
3983        -- don't replace or drop this function.
3984        -- I don't ever want to get into a JavaSession Cleared
3985        -- state the very problem I am trying to solve.
3986        --
3987        BEGIN
3988          EXECUTE IMMEDIATE javaExitSession;
3989          EXCEPTION
3990            WHEN nameAlreadyExists THEN NULL;
3991            WHEN classInUse THEN NULL;
3992            WHEN OTHERS THEN NULL;
3993        END;
3994      ELSE
3995        --  Create dummy version if the java create failed
3996        createString := dummyCreate;
3997      END IF;
3998    ELSE
3999      -- JavaVM is not present or in an invalid state
4000      --
4001      -- Create dummy version of PreupCreateDir so subsequent
4002      -- blocks will compile
4003      createString := dummyCreate;
4004    END IF;
4005    EXECUTE IMMEDIATE createString;
4006  
4007    IF javaOK = 1 THEN
4008      DECLARE
4009        --
4010        -- This exception is command and is handled by ending
4011        -- the session inside the loop.
4012        --
4013        JavaSessionCleared EXCEPTION;
4014        PRAGMA EXCEPTION_INIT(JavaSessionCleared, -29549);
4015      BEGIN
4016        clearJava := FALSE;
4017        status := 0;
4018        FOR tries IN 1..2 LOOP
4019          BEGIN
4020            EXECUTE IMMEDIATE 'CALL PreupCreateDir(:1) into :2'
4021            USING IN logDir, OUT status;
4022          EXCEPTION
4023            WHEN JavaSessionCleared THEN  clearJava := TRUE;
4024            WHEN OTHERS THEN
4025              -- note: what used to be "usingExistingDef = FALSE"
4026              logDir := dbms_assert.enquote_literal(rdbmsLogDir);
4027          END;
4028  
4029          IF clearJava THEN
4030            --
4031            -- Clear state and try again
4032            -- Use dynamic SQL since dbms_java may not be installed
4033            -- dbms_java.endsession is not Available in 10.2.0.5.0
4034            -- We will try to endsession using System.exit in Java if
4035            -- dbms_java.endsession is not present.
4036            --
4037            BEGIN
4038              EXECUTE IMMEDIATE 'BEGIN :1 := dbms_java.endsession; END;'
4039              USING OUT dummy;
4040              EXCEPTION WHEN OTHERS THEN clearJavaAgain := TRUE;
4041            END;
4042            --
4043            -- If not successful with dbms_java.endsession or not present
4044            -- then try clearing the session state with System.exit.
4045            --
4046            IF clearJavaAgain THEN
4047              BEGIN
4048                EXECUTE IMMEDIATE 'BEGIN PreupJavaExit(0); END; ';
4049                EXCEPTION
4050                  WHEN exitCalledFromJava THEN NULL;
4051                  WHEN JavaStateCleared THEN NULL;
4052                  WHEN OTHERS THEN NULL;
4053              END;
4054            END IF;
4055  
4056          ELSIF status = 1 THEN
4057            -- Success, exit loop
4058            EXIT;
4059          ELSIF status = 2 THEN
4060            --
4061            -- Directory exists, not writeable
4062            --
4063              --
4064              -- We said where to create the dir, and it failed,
4065              -- try the rdbmdLogDir area
4066              -- note: what used to be "usingExistingDef = FALSE"
4067              logDir := dbms_assert.enquote_literal(rdbmsLogDir);
4068          ELSE
4069            --
4070            -- status = 4 = could not create the directory
4071            --
4072            EXIT;
4073          END IF;
4074        END LOOP;
4075      END;
4076      --
4077      -- done with the java, clean it up
4078      --
4079      BEGIN
4080        EXECUTE IMMEDIATE 'DROP JAVA SOURCE "PreupCreateDir"';
4081      EXCEPTION WHEN OTHERS THEN NULL;
4082      END;
4083  
4084      --
4085      -- end the session
4086      --
4087      BEGIN
4088        EXECUTE IMMEDIATE 'BEGIN :1 := dbms_java.endsession; END;'
4089        USING OUT dummy;
4090      EXCEPTION WHEN OTHERS THEN NULL;
4091      END;
4092    END IF;
4093  
4094    --
4095    -- Even if we failed to verify things, try to create the
4096    -- default directory.
4097    --
4098    -- >> BEGIN: CREATE DIRECTORY OBJECT PREUPGRADE_DIR
4099      --
4100      -- Try to create the directory object for the actual directory
4101      -- the javascript created or verified existed
4102      --
4103      BEGIN
4104        EXECUTE IMMEDIATE
4105          'CREATE OR REPLACE DIRECTORY ' || c_dir_obj || ' AS ' || logDir ;
4106        EXCEPTION
4107          WHEN nameAlreadyExists THEN pCreatedDirObj := FALSE;
4108          WHEN OTHERS THEN status := 0;
4109      END;
4110  
4111      IF status = 0 THEN
4112        pOutputLocation := NULL;
4113        pOutputVerified := FALSE;
4114        DisplayLine('WARNING: Unable to create required directory object');
4115        DisplayLine('         Terminal output only');
4116        RETURN;
4117      END IF;
4118      BEGIN
4119        -- 10.n gives an error on granting to sys, just ignore it.
4120        EXECUTE IMMEDIATE
4121         'GRANT READ,WRITE ON DIRECTORY ' || c_dir_obj || ' TO SYS';
4122        EXCEPTION WHEN OTHERS THEN NULL;
4123      END;
4124    -- >> END: CREATE DIRECTORY OBJECT PREUPGRADE_DIR
4125  
4126    -- create pdbfiles PDB_PREUPGRADE_DIR if:
4127    --   a) pOutputLocation is not NULL, which means not writing to terminal
4128    --   and
4129    --   b) this db is a non-root container
4130    IF (pOutputLocation is NOT NULL) AND
4131       (dbms_preup.is_db_noncdb = FALSE AND dbms_preup.is_con_root = FALSE) THEN
4132    BEGIN
4133      EXECUTE IMMEDIATE
4134        'CREATE OR REPLACE DIRECTORY ' || c_pdb_dir_obj || ' AS ' || pdbLogDir ;
4135      IF tracing_on_xxx THEN
4136        dbms_output.put_line('XXX created directory object ' || c_pdb_dir_obj);
4137      END IF;
4138  
4139      EXECUTE IMMEDIATE
4140       'GRANT READ, WRITE ON DIRECTORY ' || c_pdb_dir_obj || ' TO SYS';
4141      IF tracing_on_xxx THEN
4142        dbms_output.put_line('XXX granted permissions to c_pdb_dir_obj');
4143      END IF;
4144  
4145      IF tracing_on_xxx THEN
4146        dbms_output.put_line('XXX pdb dir obj created');
4147      END IF;
4148  
4149      pCreatedPdbDirObj := TRUE;  -- pdb dir obj created
4150    EXCEPTION
4151      WHEN OTHERS THEN
4152        dbms_output.put_line('');
4153        dbms_output.put_line(
4154          'Error when trying to create and/or grant permissions on ' ||
4155          'directory object PDB_PREUPGRADE_DIR.  ' ||
4156          'Please fix the error before rerunning the preupgrade tool.');
4157        dbms_output.put_line('');
4158        RAISE_APPLICATION_ERROR(-20000, 'Error: ' || SQLERRM);
4159    END;
4160    END IF;
4161  
4162    IF status != 1 THEN
4163      --
4164      -- something went wrong with the java (or it was not even executed)
4165      --
4166      pOutputLocation := NULL;
4167      pOutputVerified := FALSE;
4168  
4169      IF status = 2 THEN
4170        -- A two means we can't write to the area.
4171        tmp_varchar := 'Unable to write to  directory ';
4172      ELSIF status = 4 THEN
4173        -- Only other is a 4 which means we couldn't create the dir
4174        tmp_varchar := 'Unable to create directory ';
4175      ELSE
4176        -- 0 ?  Could not verify/create because of JAVA
4177        tmp_varchar := 'Unable to verify or create directory ';
4178      END IF;
4179  
4180      --
4181      -- We failed to create the directory that we want
4182      --
4183      DisplayLine('WARNING: ' || tmp_varchar || logDir
4184                  || ' for Directory Object: ' || c_dir_obj);
4185  
4186      --
4187      -- Finish it off and get out.
4188      --
4189      DisplayLine('     script will generate terminal output only');
4190      RETURN;
4191    END IF;
4192  
4193    -- save paths of PREUPGRADE_DIR and PDB_PREUPGRADE_DIR for display messages
4194    -- no need to save the path for the xml dir obj as DBUA controls that
4195    pTextLogDir:= logDir;     -- PREUPGRADE_DIR
4196    pPdbLogDir := pdbLogDir;  -- PDB_PREUPGRADE_DIR
4197  
4198    --
4199    -- Set the package variable (will be used for utl_file)
4200    --
4201    pOutputLocation := c_dir_obj;
4202    pOutputVerified := TRUE;
4203  
4204  END verifyDefaultDirObj;
4205  
4206  PROCEDURE start_xml_document
4207  IS
4208  BEGIN
4209    -- Let's start an xml document IF one of the following is TRUE:
4210    -- (a) this db is NOT a cdb
4211    -- OR
4212    -- (b) if this db is a cdb and current container is CDB$ROOT
4213    if (dbms_preup.is_db_noncdb OR dbms_preup.is_con_root) then
4214      init_package;
4215  
4216      -- This line will be written by DBUA prior to running the preugprade tool:
4217      -- DisplayLine ('<UPGRADE>');
4218  
4219    end if;
4220  END start_xml_document;
4221  
4222  PROCEDURE end_xml_document
4223  IS
4224  misc   NUMBER;
4225  BEGIN
4226  
4227    -- DBUA will append the following line to xml document upgrade.xml after
4228    -- preupgrade tool is finished:
4229    -- DisplayLine ('</UPGRADE>');
4230  
4231    -- Cannot have an empty procedure, so just do a dummy stmt to keep this
4232    -- procedure here.
4233    misc := 1;
4234  
4235  END end_xml_document;
4236  
4237  -- ****************************************************************************
4238  -- Run a specific check, but don't generate any fixup script or output
4239  -- Do that by setting the 'pCheckOnly' package level variable then execute
4240  -- the check
4241  -- ****************************************************************************
4242  FUNCTION run_check_simple (check_name VARCHAR2) RETURN check_record_t
4243  IS
4244    t_check_rec    check_record_t;
4245    execute_failed BOOLEAN := FALSE;
4246    idx            NUMBER;
4247    retval         NUMBER;
4248    check_stmt     VARCHAR2(100);
4249    r_text         VARCHAR2(1000);
4250  
4251  BEGIN
4252    init_package;
4253  
4254    IF check_names.EXISTS(check_name) = FALSE
4255    THEN
4256      EXECUTE IMMEDIATE 'BEGIN
4257        RAISE_APPLICATION_ERROR (-20000,
4258              ''Pre-Upgrade Package Requested Check does not exist''); END;';
4259        RETURN (NULL);
4260    END IF;
4261    idx := check_names(check_name).idx;
4262  
4263    pCheckOnly := TRUE;
4264  
4265    IF check_table(idx).always_fail THEN
4266      --
4267      -- We want to fail this check, set the global
4268      -- so the package checks know to fail
4269      --
4270      pDBGFailCheck := TRUE;
4271    END IF;
4272  
4273    -- Clear out the info about the check before
4274    -- executing it (only an issue during re-run)
4275    --
4276    check_table(idx).passed         := FALSE;
4277    check_table(idx).skipped        := FALSE;
4278    check_table(idx).executed       := FALSE;
4279    check_table(idx).execute_failed := FALSE;
4280    check_table(idx).fixup_executed := FALSE;
4281    check_table(idx).fixup_failed   := FALSE;
4282    check_table(idx).always_fail    := FALSE;
4283  
4284    check_stmt := 'BEGIN :r1 := dbms_preup.'
4285       || dbms_assert.simple_sql_name(check_table(idx).f_name_prefix)
4286       ||  '_check (:rtxt); END;';
4287  
4288    BEGIN
4289      EXECUTE IMMEDIATE check_stmt
4290         USING OUT retval, IN OUT r_text;
4291      EXCEPTION WHEN OTHERS THEN
4292        execute_failed := TRUE;
4293    END;
4294  
4295    --
4296    -- Save away the results of the check
4297    --
4298    t_check_rec.executed := TRUE;
4299  
4300    IF execute_failed = TRUE
4301    THEN
4302      -- Passed is already FALSE
4303      t_check_rec.execute_failed := TRUE;
4304    ELSE
4305      IF retval = c_status_success THEN
4306        t_check_rec.passed := TRUE;
4307      ELSIF retval = c_status_not_for_this_version THEN
4308        t_check_rec.passed := TRUE;
4309        t_check_rec.skipped := TRUE;
4310      ELSE
4311        -- Passed is already FALSE
4312        t_check_rec.result_text := r_text;
4313      END IF;
4314    END IF;
4315  
4316    --
4317    -- Always turn these off
4318    --
4319    pDBGFailCheck := FALSE;
4320    pCheckOnly := FALSE;
4321  
4322    return t_check_rec;
4323  END run_check_simple;
4324  
4325  -- ****************************************************************************
4326  -- Same as run_check_simple only return true/false
4327  -- ****************************************************************************
4328  FUNCTION condition_exists (check_name VARCHAR2) RETURN BOOLEAN
4329  IS
4330    t_check_rec    check_record_t := NULL;
4331    execute_failed BOOLEAN := FALSE;
4332    idx            NUMBER;
4333    retval         NUMBER;
4334    check_stmt     VARCHAR2(100);
4335    r_text         VARCHAR2(1000);
4336  
4337  BEGIN
4338    init_package;
4339  
4340    t_check_rec := dbms_preup.run_check_simple(check_name);
4341  
4342    IF t_check_rec.passed THEN
4343      RETURN FALSE;
4344    ELSE
4345      RETURN TRUE;
4346    END IF;
4347  END condition_exists;
4348  
4349  
4350  FUNCTION run_check (check_name VARCHAR2) RETURN check_record_t
4351  IS
4352    execute_failed    BOOLEAN := FALSE;
4353    idx               NUMBER;
4354    retval            NUMBER;
4355    check_stmt        VARCHAR2(100);
4356    r_text            VARCHAR2(1000);
4357  
4358  BEGIN
4359  
4360    init_package;
4361  
4362    IF check_names.EXISTS(check_name) = FALSE
4363    THEN
4364      EXECUTE IMMEDIATE 'BEGIN
4365        RAISE_APPLICATION_ERROR (-20000,
4366              ''Pre-Upgrade Package Requested Check does not exist''); END;';
4367        return (NULL);
4368    END IF;
4369    idx := check_names(check_name).idx;
4370  
4371    IF check_table(idx).always_fail THEN
4372      --
4373      -- We want to fail this check, set the global
4374      -- so the package checks know to fail
4375      --
4376      pDBGFailCheck := TRUE;
4377    END IF;
4378  
4379    -- Clear out the info about the check before
4380    -- executing it (only an issue during re-run)
4381    --
4382    check_table(idx).passed         := FALSE;
4383    check_table(idx).skipped        := FALSE;
4384    check_table(idx).executed       := FALSE;
4385    check_table(idx).execute_failed := FALSE;
4386    check_table(idx).fixup_executed := FALSE;
4387    check_table(idx).fixup_failed   := FALSE;
4388    check_table(idx).always_fail    := FALSE;
4389  
4390    --
4391    -- This executes the check procedure
4392    -- An example would be
4393    --
4394    --  BEGIN :r1 := purge_recyclebin_check(r_text); END;
4395    --
4396  
4397    check_stmt := 'BEGIN :r1 := dbms_preup.'
4398        || dbms_assert.simple_sql_name(check_table(idx).f_name_prefix)
4399        ||  '_check (:rtxt); END;';
4400  
4401    BEGIN
4402      EXECUTE IMMEDIATE check_stmt
4403         USING OUT retval, IN OUT r_text;
4404      EXCEPTION WHEN OTHERS THEN
4405        execute_failed := TRUE;
4406    END;
4407  
4408    --
4409    -- Save away the results of the check
4410    --
4411    check_table(idx).executed := TRUE;
4412  
4413    if execute_failed = TRUE
4414    THEN
4415      check_table(idx).execute_failed := TRUE;
4416      check_table(idx).passed := FALSE;
4417    ELSE
4418      IF retval = c_status_success THEN
4419        check_table(idx).passed := TRUE;
4420      ELSIF retval = c_status_not_for_this_version THEN
4421        check_table(idx).passed := TRUE;
4422        check_table(idx).skipped := TRUE;
4423      ELSE
4424        check_table(idx).passed := FALSE;
4425        check_table(idx).result_text := r_text;
4426      END IF;
4427    END IF;
4428    --
4429    -- Always turn this off
4430    --
4431    pDBGFailCheck := FALSE;
4432    return (check_table(idx));
4433  END run_check;
4434  
4435  --
4436  -- Run a check, dump out the results, no script created
4437  --
4438  PROCEDURE run_check (check_name VARCHAR2)
4439  IS
4440    t_check_rec     check_record_t;
4441    execute_failed  BOOLEAN := FALSE;
4442    checkonly       BOOLEAN;
4443    idx             NUMBER;
4444    retval          NUMBER;
4445    check_stmt      VARCHAR2(100);
4446    r_text          VARCHAR2(1000);
4447  
4448  BEGIN
4449  
4450    init_package;
4451  
4452    IF check_names.EXISTS(check_name) = FALSE
4453    THEN
4454      EXECUTE IMMEDIATE 'BEGIN
4455        RAISE_APPLICATION_ERROR (-20000,
4456              ''Pre-Upgrade Package Requested Check does not exist''); END;';
4457        return;
4458    END IF;
4459  
4460    checkonly := pCheckOnly;
4461    pCheckOnly := TRUE;
4462  
4463    idx := check_names(check_name).idx;
4464  
4465    --
4466    -- Because the info is not recorded in our check_table,
4467    -- the run status fields do not need to be cleared)
4468    --
4469  
4470    --
4471    -- This executes the check procedure
4472    -- An example would be
4473    --
4474    --  BEGIN :r1 := purge_recyclebin_check(r_text); END;
4475    --
4476    check_stmt := 'BEGIN :r1 := dbms_preup.'
4477      || dbms_assert.simple_sql_name(check_table(idx).f_name_prefix)
4478      ||  '_check (:rtxt); END;';
4479  
4480    BEGIN
4481      EXECUTE IMMEDIATE check_stmt
4482         USING OUT retval, IN OUT r_text;
4483      EXCEPTION WHEN OTHERS THEN
4484        execute_failed := TRUE;
4485    END;
4486  
4487    DisplayLinePL('');
4488    DisplayLinePL('**********************************************************************');
4489    DisplayLinePL('Check Tag:       ' || check_table(idx).name);
4490    DisplayLinePL('Check Summary:   ' || check_table(idx).descript);
4491    DisplayLinePL('Check Help Text: ');
4492    DisplayLinePL('  ' || getHelp(check_table(idx).name,c_help_overview));
4493    DisplayLinePL('Fixup Summary: ');
4494    DisplayLinePL('  ' || getHelp(check_table(idx).name,c_help_fixup));
4495    DisplayLinePL('');
4496  
4497  
4498    IF execute_failed = TRUE THEN
4499      DisplayLinePL(CenterLine('**** Check Failed to Execute ****'));
4500    ELSE
4501      IF retval = c_status_success THEN
4502        DisplayLinePL('++++ Check Passed');
4503      ELSIF retval = c_status_not_for_this_version THEN
4504        DisplayLinePL('++++ Check Not Valid from your current release.');
4505      ELSE
4506        DisplayLinePL('++++ Check Failed:');
4507        DisplayLinePL('   ' || r_text);
4508      END IF;
4509    END IF;
4510    --
4511    -- Restore setting
4512    --
4513    pCheckOnly := checkonly;
4514  END run_check;
4515  
4516  PROCEDURE run_fixup_and_report (check_name VARCHAR2)
4517  IS
4518    --
4519    -- Run a check and dump any errors out to stdout.
4520    -- This procedure is used by the fixup scripts.
4521    -- "set server output on" must be executed before and
4522    -- must be connected as SYS
4523    --
4524    -- NOTE:
4525    --   This function is intended to be run OUTSIDE of the preupgrade
4526    --   checks, therefore, its output is displayed to the terminal or
4527    --   redirected location specified (spool) and not to the preupgrade
4528    --   log file.
4529    --
4530    idx          NUMBER;
4531    retval       NUMBER;
4532    r_sqlcode    NUMBER := 0;
4533    check_stmt   VARCHAR2(100);
4534    r_text       VARCHAR2(1500);
4535  
4536  BEGIN
4537    init_package;
4538  
4539    IF check_names.EXISTS(check_name) = FALSE
4540    THEN
4541      RAISE_APPLICATION_ERROR (-20000,
4542              'Pre-Upgrade Package Requested Fixup: ' ||
4543              check_name || ' does not exist');
4544      RETURN;
4545    END IF;
4546    idx := check_names(check_name).idx;
4547  
4548    --
4549    -- This executes the fixup procedure,
4550    -- An example would be
4551    --
4552    --  BEGIN :r1 := purge_recyclebin_fixup(r_text, r_sqlcode); END;
4553    --
4554  
4555    check_stmt := 'BEGIN :r1 := dbms_preup.'
4556       || dbms_assert.simple_sql_name(check_table(idx).f_name_prefix)
4557       || '_fixup (:rtxt, :rsqlcode); END;';
4558  
4559    --
4560    -- No exception catching here, let the lower levels catch
4561    -- and return the problems.
4562    --
4563    DisplayLinePL('');
4564    DisplayLinePL('**********************************************************************');
4565    DisplayLinePL('Check Tag:     ' || check_table(idx).name);
4566    DisplayLinePL('Check Summary: ' || check_table(idx).descript);
4567    DisplayLinePL('Fix Summary:   ' || getHelp(check_table(idx).name,c_help_fixup));
4568    DisplayLinePL('**********************************************************************');
4569  
4570    --
4571    -- Clear out the existing values
4572    --
4573    check_table(idx).fixup_executed := FALSE;
4574    check_table(idx).result_text    := '';
4575    check_table(idx).sqlcode        := 0;
4576  
4577    EXECUTE IMMEDIATE check_stmt
4578       USING OUT retval, IN OUT r_text, IN OUT r_sqlcode;
4579  
4580    --
4581    -- Save away the results of the fixup
4582    --
4583    check_table(idx).fixup_executed := TRUE;
4584    check_table(idx).result_text    := r_text;
4585    check_table(idx).sqlcode        := r_sqlcode;
4586    check_table(idx).fixup_status   := retval;
4587  
4588    IF retval = c_fixup_status_success THEN
4589      check_table(idx).fixup_failed := FALSE;
4590      DisplayLinePL('Fixup Succeeded');
4591    ELSIF retval = c_fixup_status_info THEN
4592      -- The fixup wants to return some text, display it here
4593      check_table(idx).fixup_failed := FALSE;
4594      DisplayLinePL('Fixup Returned Information:');
4595      DisplayLinePL(check_table(idx).result_text);
4596    ELSE
4597      check_table(idx).fixup_failed := TRUE;
4598      DisplayLinePL('Fixup Failed:');
4599      DisplayLinePL  (check_table(idx).result_text);
4600      DisplayLinePL  ('SQL Code: ' || check_table(idx).sqlcode);
4601    END IF;
4602    DisplayLinePL('**********************************************************************');
4603    DisplayLinePL('');
4604    return;
4605  END run_fixup_and_report;
4606  
4607  
4608  PROCEDURE run_fixup_info (check_name VARCHAR2)
4609  IS
4610    --
4611    -- Run a check, and instead of returning a record with the info
4612    -- on the run (which is what run_check does), This grabs the return
4613    -- text from the fixup routine and displays it.
4614    -- This is only used for those fixup functions that can not do
4615    -- anything for the existing issue, but we need to display some
4616    -- text.
4617    --
4618    -- NOTE:
4619    --   This function is intended to be run OUTSIDE of the preupgrade
4620    --   checks, therefore, its output is displayed to the terminal or
4621    --   redirected location specified and not to the preupgrade
4622    --   log file.
4623    --
4624    idx          NUMBER;
4625    retval       NUMBER;
4626    r_sqlcode    NUMBER := 0;
4627    check_stmt   VARCHAR2(100);
4628    r_text       VARCHAR2(1000);
4629  
4630  BEGIN
4631    init_package;
4632  
4633    IF check_names.EXISTS(check_name) = FALSE
4634    THEN
4635      RAISE_APPLICATION_ERROR (-20000,
4636              'Pre-Upgrade Package Requested Fixup: ' ||
4637              check_name || ' does not exist');
4638      RETURN;
4639    END IF;
4640    idx := check_names(check_name).idx;
4641  
4642    --
4643    -- This executes the fixup procedure,
4644    -- An example would be
4645    --
4646    --  BEGIN :r1 := purge_recyclebin_fixup(r_text, r_sqlcode); END;
4647    --
4648  
4649    check_stmt := 'BEGIN :r1 := dbms_preup.'
4650       || dbms_assert.simple_sql_name(check_table(idx).f_name_prefix)
4651       || '_fixup (:rtxt, :rsqlcode); END;';
4652  
4653    --
4654    -- No exception catching here, let the lower levels catch
4655    -- and return the problems.
4656    --
4657  
4658    dbms_output.put_line ('------- ---------- Executing Fixup  ------------ ----------');
4659    dbms_output.put_line ('------- ' || RPAD (check_table(idx).name, 40) || ' ----------');
4660  
4661    EXECUTE IMMEDIATE check_stmt
4662       USING OUT retval, IN OUT r_text, IN OUT r_sqlcode;
4663  
4664    --
4665    -- Save away the results of the fixup
4666    --
4667    check_table(idx).fixup_executed := TRUE;
4668    check_table(idx).result_text    := r_text;
4669    check_table(idx).sqlcode        := r_sqlcode;
4670    --
4671    -- don't care about the return status
4672    --
4673    check_table(idx).fixup_failed := FALSE;
4674    dbms_output.put_line ('------- ------------ Fixup Succeeded ----------- ----------');
4675    dbms_output.put_line ('------- ------- Informational Text Returned ---- ----------');
4676    dbms_output.put_line (check_table(idx).result_text);
4677    dbms_output.put_line ('------- ---------------------------------------- ----------');
4678  END run_fixup_info;
4679  
4680  
4681  FUNCTION run_fixup (check_name VARCHAR2) RETURN check_record_t
4682  IS
4683    idx          NUMBER;
4684    retval       NUMBER;
4685    r_sqlcode    NUMBER := 0;
4686    check_stmt   VARCHAR2(100);
4687    r_text       VARCHAR2(1000);
4688  
4689  BEGIN
4690    init_package;
4691  
4692    IF check_names.EXISTS(check_name) = FALSE
4693    THEN
4694      EXECUTE IMMEDIATE 'BEGIN
4695        RAISE_APPLICATION_ERROR (-20000,
4696              ''Pre-Upgrade Package Requested Fixup: '' ||
4697              check_name || '' does not exist''); END;';
4698        return (NULL);
4699    END IF;
4700    idx := check_names(check_name).idx;
4701  
4702    -- This executes the fixup procedure
4703    -- An example would be
4704    --
4705    --  BEGIN :r1 := purge_recyclebin_fixup(r_text, r_sqlcode); END;
4706    --
4707  
4708    check_stmt := 'BEGIN :r1 := dbms_preup.'
4709      || dbms_assert.simple_sql_name(check_table(idx).f_name_prefix)
4710      || '_fixup (:rtxt, :rsqlcode); END;';
4711  
4712    --
4713    -- No exception catching here, let the lower levels catch
4714    -- and return the problems.
4715    --
4716    EXECUTE IMMEDIATE check_stmt
4717       USING OUT retval, IN OUT r_text, IN OUT r_sqlcode;
4718  
4719    --
4720    -- Save away the results of the fixup
4721    --
4722    check_table(idx).fixup_executed := TRUE;
4723    check_table(idx).result_text    := r_text;
4724    check_table(idx).sqlcode        := r_sqlcode;
4725  
4726    IF retval = 1
4727    THEN
4728      check_table(idx).fixup_failed := FALSE;
4729    ELSE
4730      check_table(idx).fixup_failed := TRUE;
4731    END IF;
4732  
4733    return (check_table(idx));
4734  END run_fixup;
4735  
4736  -- ****************************************************************************
4737  --    Debug Functions/Procedures
4738  -- ****************************************************************************
4739  
4740  --
4741  -- Set always_fail for a specific check, causing the check to not
4742  -- actually execute the specific check, but cause it to 'fail'
4743  --
4744  PROCEDURE dbg_check (check_name VARCHAR2)
4745  IS
4746    execute_failed    BOOLEAN := FALSE;
4747    idx               NUMBER;
4748    retval            NUMBER;
4749    check_stmt        VARCHAR2(100);
4750  
4751  BEGIN
4752    init_package;
4753  
4754    IF check_names.EXISTS(check_name) = FALSE
4755    THEN
4756      EXECUTE IMMEDIATE 'BEGIN
4757        RAISE_APPLICATION_ERROR (-20000,
4758              ''Pre-Upgrade Package Requested Check does not exist''); END;';
4759    END IF;
4760    idx := check_names(check_name).idx;
4761    check_table(idx).always_fail := TRUE;
4762  END dbg_check;
4763  
4764  --
4765  -- Set All the checks always_fail to TRUE
4766  --
4767  PROCEDURE dbg_all_checks
4768  IS
4769  BEGIN
4770    init_package;
4771  
4772    FOR i IN 1..pCheckCount LOOP
4773      check_table(i).always_fail := TRUE;
4774    END LOOP;
4775    pDBGFailAll := TRUE;
4776  END dbg_all_checks;
4777  
4778  --
4779  -- Turn on or off the output of space information into
4780  -- the log
4781  --
4782  PROCEDURE dbg_space_resources (onoff BOOLEAN)
4783  IS
4784  BEGIN
4785    init_package;
4786    pDBGSizeResources := onoff;
4787  END dbg_space_resources;
4788  
4789  --
4790  -- Turn on or off the output of resource information
4791  -- (as if there is an issue with each resource)
4792  --
4793  PROCEDURE dbg_all_resources (onoff BOOLEAN)
4794  IS
4795  BEGIN
4796    init_package;
4797    pDBGAllResources := onoff;
4798  END dbg_all_resources;
4799  
4800  --
4801  -- Output the result text of a check
4802  --
4803  PROCEDURE  display_check_text (check_record check_record_t )
4804  IS
4805  BEGIN
4806     DisplayLine (check_record.result_text);
4807  END display_check_text;
4808  
4809  -- ****************************************************************************
4810  --    General utility functions
4811  -- ****************************************************************************
4812  
4813  --------------------------- pvalue_to_number --------------------------------
4814  -- This function converts a parameter string to a number. The function takes
4815  -- into account that the parameter string may have a 'K' or 'M' multiplier
4816  -- character.
4817  FUNCTION pvalue_to_number (value_string VARCHAR2) RETURN NUMBER
4818  IS
4819    ilen NUMBER;
4820    pvalue_number NUMBER;
4821  
4822  BEGIN
4823      -- How long is the input string?
4824      ilen := LENGTH ( value_string );
4825  
4826      -- Is there a 'K' or 'M' in last position?
4827      IF SUBSTR(UPPER(value_string), ilen, 1) = 'K' THEN
4828           RETURN (c_kb * TO_NUMBER (SUBSTR (value_string, 1, ilen-1)));
4829  
4830      ELSIF SUBSTR(UPPER(value_string), ilen, 1) = 'M' THEN
4831           RETURN (c_mb * TO_NUMBER (SUBSTR (value_string, 1, ilen-1)));
4832      END IF;
4833  
4834      -- A multiplier wasn't found. Simply convert this string to a number.
4835      RETURN (TO_NUMBER (value_string));
4836  END pvalue_to_number;
4837  
4838  PROCEDURE store_oldval (minvp  IN OUT MINVALUE_TABLE_T)
4839  IS
4840    c_value   VARCHAR2(80);
4841    i         INTEGER;
4842  BEGIN
4843    FOR i IN 1..max_minvp LOOP
4844      BEGIN
4845        EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE name =
4846           LOWER(:1)'
4847        INTO c_value
4848        USING minvp(i).name;
4849        minvp(i).oldvalue := pvalue_to_number(c_value);
4850      EXCEPTION WHEN NO_DATA_FOUND THEN
4851           minvp(i).oldvalue := NULL;
4852      END;
4853    END LOOP;
4854  
4855    -- After getting init ora values:
4856    -- Parameter streams_pool_size is not available in 92. Set old value to 0.
4857    IF (db_n_version = 920) THEN
4858      minvp(str_idx).oldvalue := 0;
4859    END IF;
4860  END store_oldval;
4861  
4862  PROCEDURE store_renamed (i   IN OUT BINARY_INTEGER,
4863                           old VARCHAR2,
4864                           new VARCHAR2)
4865  IS
4866  BEGIN
4867    i:= i+1;
4868    rp(i).oldname:=old;
4869    rp(i).newname:=new;
4870  END store_renamed;
4871  
4872  PROCEDURE store_removed (i IN OUT BINARY_INTEGER,
4873                           name       VARCHAR2,
4874                           version    VARCHAR2,
4875                           deprecated BOOLEAN)
4876  IS
4877  BEGIN
4878    i:=i+1;
4879    op(i).name:=name;
4880    op(i).version:=version;
4881    op(i).deprecated:=deprecated;
4882  END store_removed;
4883  
4884  PROCEDURE store_special (i    IN OUT BINARY_INTEGER,
4885                           old  VARCHAR2,
4886                           oldv VARCHAR2,
4887                           new  VARCHAR2,
4888                           newv VARCHAR2)
4889  IS
4890  BEGIN
4891    i:= i+1;
4892    sp(i).oldname      := old;
4893    sp(i).oldvalue     := oldv;
4894    sp(i).newname      := new;
4895    sp(i).newvalue     := newv;
4896    sp(i).db_match     := FALSE;
4897    sp(i).dbua_OutInUpdate := FALSE;
4898  END store_special;
4899  
4900  PROCEDURE store_required (i    IN OUT BINARY_INTEGER,
4901                           name  VARCHAR2,
4902                           newvn NUMBER,
4903                           newvs VARCHAR2,
4904                           dtype NUMBER)
4905  --
4906  -- Pass a 0, or '', for the newvn (new value numeric) or
4907  -- that you are not setting.
4908  --    store_required(idx, 'foo', 0, 'bar', 2);
4909  -- would mean a string value of 'bar' is expected
4910  --
4911  IS
4912  BEGIN
4913    i:= i+1;
4914    reqp(i).name:=name;
4915    reqp(i).newnumbervalue:=newvn;
4916    reqp(i).newstringvalue:=newvs;
4917    reqp(i).type:= dtype;
4918    reqp(i).db_match:=FALSE;
4919  END store_required;
4920  
4921  PROCEDURE find_newval (minvp  IN OUT MINVALUE_TABLE_T,
4922                         dbbit  NUMBER)
4923  IS
4924    extra    NUMBER;
4925  BEGIN
4926  
4927    IF minvp(tg_idx).oldvalue != 0 THEN  -- SGA_TARGET in use
4928      find_sga_mem_values(minvp, dbbit);
4929  
4930      IF minvp(tg_idx).newvalue > minvp(tg_idx).oldvalue THEN
4931        minvp(tg_idx).display := TRUE;
4932      END IF;
4933  
4934      -- do not set display to TRUE for these params: sga_target,
4935      -- memory_target, db_cache_size, java_pool_size,
4936      -- shared_pool_size, large_pool_size, and streams_pool_size
4937      FOR i IN 1..max_minvp LOOP
4938        IF i NOT IN (tg_idx,mt_idx,cs_idx,jv_idx,sp_idx,lp_idx,str_idx) AND
4939            (minvp(i).oldvalue IS NULL OR
4940            minvp(i).oldvalue < minvp(i).minvalue) THEN
4941          minvp(i).display := TRUE;
4942          minvp(i).newvalue := minvp(i).minvalue;
4943        END IF;
4944      END LOOP;
4945    ELSE -- pool sizes included
4946      FOR i IN 1..max_minvp LOOP
4947        -- don't print recommendations for sga_target, memory_target,
4948        -- large_pool_size, and streams_pool_size
4949        IF i NOT IN (tg_idx,mt_idx,lp_idx,str_idx) AND
4950            (minvp(i).oldvalue IS NULL OR
4951             minvp(i).oldvalue < minvp(i).minvalue) THEN
4952          minvp(i).display := TRUE;
4953          minvp(i).newvalue := minvp(i).minvalue;
4954        END IF;
4955      END LOOP;
4956    END IF;
4957  
4958    -- For 11.1 and up check if MEMORY_TARGET is set and NON-ZERO
4959    -- then check that MEMORY_TARGET is at least 12M greater than
4960    -- sga_target + pga_target (for cases where SGA_TARGET is in use)
4961    IF (db_n_version >= 111) AND
4962         db_memory_target AND (minvp(mt_idx).oldvalue != 0) THEN
4963      find_sga_mem_values(minvp, dbbit);
4964  
4965      -- If the newvalue is greater than the old value set the display TRUE
4966      IF minvp(mt_idx).newvalue > minvp(mt_idx).oldvalue THEN
4967        minvp(mt_idx).display := TRUE;
4968        -- Loop through other pool sizes to ignore warnings
4969        -- If displaying MEMORY_TARGET warning then the other
4970        -- pool sizes do not need warnings
4971      END IF;
4972  
4973      -- If a minimum value is required for MEMORY_TARGET then
4974      -- do not output a minimum value for sga_target or pga_aggregate
4975      -- or shared_pool_size or java_pool_size or db_cache_size or
4976      -- large_pool_size or streams_pool_size as these values
4977      -- are no longer considered once MEMORY_TARGET value is set.
4978      -- i.e., for params listed above, set display to FALSE if memory_target
4979      -- is set.
4980      FOR i IN 1..max_minvp LOOP
4981        IF i IN (tg_idx,pg_idx,sp_idx,jv_idx,cs_idx,lp_idx,str_idx) AND minvp(i).display THEN
4982          minvp(i).display := FALSE;
4983        END IF;
4984      END LOOP;
4985    END IF; -- Greater than or equal to 11.1 db and memory_target in use
4986  END find_newval;
4987  
4988  --------------------------- find_sga_mem_values -------------------------------
4989  -- This is called when sga_target or memory_target is used.
4990  
4991  PROCEDURE find_sga_mem_values (minvp  IN OUT MINVALUE_TABLE_T,
4992                                 dbbit  NUMBER)
4993  IS
4994    cpucalc   NUMBER;
4995    extra     NUMBER;
4996    mtgval    NUMBER;
4997  BEGIN
4998  
4999    -- We're here because sga_target/memory_target is used.
5000    -- Need to find new values for sga_target.
5001  
5002    -- First, reset min values for pools related to sga_target.
5003  
5004    -- If db_cpus is < 12, then calculate sga_target using 12 cpus.
5005    -- If db_cpus is >= 12, then calculate sga_target using cpu_count.
5006    -- If db_cpus is >= 64, then calculate sga_target using 64 cpus.
5007    -- At this point, we don't have enough data to size for greater than 64 cpus.
5008    IF (db_cpus >= 64) THEN
5009      cpucalc := 64;
5010    ELSIF (db_cpus >= 12) THEN
5011      cpucalc := db_cpus;
5012    ELSIF (db_cpus < 12) THEN
5013      cpucalc := 12;
5014    END IF;
5015  
5016    minvp(cs_idx).minvalue := cpucalc*4 * c_mb;
5017    minvp(str_idx).minvalue := 0;  -- 0M
5018  
5019    IF dbbit = 32 THEN
5020      minvp(jv_idx).minvalue := 64 * c_mb;
5021      minvp(sp_idx).minvalue := 180 * c_mb;
5022      minvp(lp_idx).minvalue := (cpucalc*2*2 * .5) * c_mb;
5023      extra := (8 + 32 + 56) * c_mb;  -- 96M
5024    ELSE
5025      minvp(jv_idx).minvalue := 100 * c_mb;
5026      minvp(sp_idx).minvalue := 280 * c_mb;
5027      minvp(lp_idx).minvalue := (cpucalc*2*2 * .5) * c_mb;
5028      extra := (8*2+32*2+28+20+16) * c_mb;  -- 144M
5029    END IF;
5030  
5031    minvp(tg_idx).minvalue :=
5032      minvp(cs_idx).minvalue + minvp(jv_idx).minvalue +
5033      minvp(sp_idx).minvalue + minvp(lp_idx).minvalue +
5034      minvp(str_idx).minvalue + extra;
5035  
5036    minvp(mt_idx).minvalue :=
5037      minvp(cs_idx).minvalue + minvp(jv_idx).minvalue +
5038      minvp(sp_idx).minvalue + minvp(lp_idx).minvalue +
5039      minvp(str_idx).minvalue + minvp(pg_idx).minvalue + extra;
5040  
5041    -- buffer cache (cs)
5042    IF minvp(cs_idx).oldvalue > minvp(cs_idx).minvalue THEN
5043      minvp(cs_idx).diff := minvp(cs_idx).oldvalue - minvp(cs_idx).minvalue;
5044    END IF;
5045  
5046    -- java pool (jv)
5047    IF minvp(jv_idx).oldvalue > minvp(jv_idx).minvalue THEN
5048      minvp(jv_idx).diff := minvp(jv_idx).oldvalue - minvp(jv_idx).minvalue;
5049    END IF;
5050  
5051    -- shared pool (sp)
5052    IF minvp(sp_idx).oldvalue > minvp(sp_idx).minvalue THEN
5053      minvp(sp_idx).diff := minvp(sp_idx).oldvalue - minvp(sp_idx).minvalue;
5054    END IF;
5055  
5056    -- large pool (lp)
5057    IF minvp(lp_idx).oldvalue > minvp(lp_idx).minvalue THEN
5058      minvp(lp_idx).diff := minvp(lp_idx).oldvalue - minvp(lp_idx).minvalue;
5059    END IF;
5060  
5061    -- streams pool (str)
5062    IF minvp(str_idx).oldvalue > minvp(str_idx).minvalue THEN
5063      minvp(str_idx).diff :=
5064        minvp(str_idx).oldvalue - minvp(str_idx).minvalue;
5065    END IF;
5066  
5067    -- pga_aggregate_target (pg)
5068    IF minvp(pg_idx).oldvalue > minvp(pg_idx).minvalue THEN
5069      minvp(pg_idx).diff :=
5070        minvp(pg_idx).oldvalue - minvp(pg_idx).minvalue;
5071    END IF;
5072  
5073    -- calculate sga_target 'newvalue' (new derived minimum) based on
5074    -- tg_idx.minvalue and user-specified pool sizes
5075    minvp(tg_idx).newvalue :=
5076        minvp(tg_idx).minvalue + minvp(cs_idx).diff
5077        + minvp(jv_idx).diff + minvp(sp_idx).diff
5078        + minvp(lp_idx).diff + minvp(str_idx).diff;
5079  
5080    -- calculate memory_target 'newvalue' (new derived minimum) based on
5081    -- mt_idx.minvalue and user-specified pool sizes
5082    minvp(mt_idx).newvalue :=
5083      minvp(mt_idx).minvalue + minvp(cs_idx).diff
5084      + minvp(jv_idx).diff + minvp(sp_idx).diff
5085      + minvp(lp_idx).diff + minvp(str_idx).diff + minvp(pg_idx).diff;
5086    IF (minvp(tg_idx).oldvalue != 0) THEN -- SGA_TARGET in use
5087      -- calculate 'newvalue' (new derived minimum) based on user-set sga_target
5088      -- and user-set pga_aggregate_target.  also add 12M to this calculation
5089      -- for memory_target if sga_target is also set.
5090      mtgval := minvp(tg_idx).oldvalue + minvp(pg_idx).oldvalue + 12*c_mb;
5091      -- set 'newvalue' to the larger of the two new derived minimums (see above)
5092      IF (mtgval > minvp(mt_idx).newvalue) THEN
5093        minvp(mt_idx).newvalue := mtgval;
5094      END IF;
5095    END IF;
5096  
5097    -- Note: Although sga_target and memory_target values are found here, we
5098    -- don't set DISPLAY in minvp in this procedure.  This setting is done
5099    -- in find_newval.
5100  
5101  END find_sga_mem_values;
5102  
5103  --------------------------- store_minvalue --------------------------------
5104  PROCEDURE store_minvalue (i     BINARY_INTEGER,
5105                            name  VARCHAR2,
5106                            minv  NUMBER,
5107                            minvp IN OUT MINVALUE_TABLE_T)
5108  IS
5109  BEGIN
5110     minvp(i).name := name;
5111     minvp(i).minvalue := minv;
5112     minvp(i).display := FALSE;
5113     minvp(i).diff := 0;
5114  END store_minvalue;
5115  
5116  --------------------------- store_minval_dbbit -----------------------------
5117  PROCEDURE store_minval_dbbit  (dbbit  NUMBER,
5118                                 i      IN OUT BINARY_INTEGER,
5119                                 name   VARCHAR2,
5120                                 minv   NUMBER)
5121  IS
5122  BEGIN
5123     i:= i+1;
5124     IF dbbit = 32 THEN  -- set values for 32-bit
5125       store_minvalue(i, name, minv, minvp_db32);
5126     ELSIF dbbit = 64 THEN  -- set values for 64-bit
5127       store_minvalue(i, name, minv, minvp_db64);
5128     ELSE -- if 0 (or anything but 32 and 64), then set values for both db bits
5129       store_minvalue(i, name, minv, minvp_db32);
5130       store_minvalue(i, name, minv, minvp_db64);
5131     END IF;
5132  
5133  END store_minval_dbbit;
5134  
5135  --------------------------- store_comp -----------------------------------
5136  PROCEDURE store_comp (i       BINARY_INTEGER,
5137                        schema  VARCHAR2,
5138                        version VARCHAR2,
5139                        status  NUMBER)
5140  IS
5141  BEGIN
5142     cmp_info(i).processed := TRUE;
5143     IF status = 0 THEN
5144        cmp_info(i).status := 'INVALID';
5145     ELSIF status = 1 THEN
5146        cmp_info(i).status := 'VALID';
5147     ELSIF status = 2 THEN
5148        cmp_info(i).status := 'LOADING';
5149     ELSIF status = 3 THEN
5150        cmp_info(i).status := 'LOADED';
5151     ELSIF status = 4 THEN
5152        cmp_info(i).status := 'UPGRADING';
5153     ELSIF status = 5 THEN
5154        cmp_info(i).status := 'UPGRADED';
5155     ELSIF status = 6 THEN
5156        cmp_info(i).status := 'DOWNGRADING';
5157     ELSIF status = 7 THEN
5158        cmp_info(i).status := 'DOWNGRADED';
5159     ELSIF status = 8 THEN
5160        cmp_info(i).status := 'REMOVING';
5161     ELSIF status = 9 THEN
5162        cmp_info(i).status := 'OPTION OFF';
5163     ELSIF status = 10 THEN
5164        cmp_info(i).status := 'NO SCRIPT';
5165     ELSIF status = 99 THEN
5166        cmp_info(i).status := 'REMOVED';
5167     ELSE
5168        cmp_info(i).status := NULL;
5169     END IF;
5170     cmp_info(i).version   := version;
5171     cmp_info(i).schema    := schema;
5172     EXECUTE IMMEDIATE
5173        'SELECT default_tablespace FROM sys.dba_users WHERE username =:1'
5174     INTO cmp_info(i).def_ts
5175     USING schema;
5176  EXCEPTION
5177     WHEN NO_DATA_FOUND THEN NULL;
5178  END store_comp;
5179  
5180  -------------------------- is_comp_tablespace ------------------------------------
5181  -- returns TRUE if some existing component has the tablespace as a default
5182  
5183  FUNCTION is_comp_tablespace (tsname VARCHAR2) RETURN BOOLEAN
5184  IS
5185  BEGIN
5186    FOR i IN 1..max_components LOOP
5187      IF cmp_info(i).processed AND
5188         tsname = cmp_info(i).def_ts THEN
5189        RETURN TRUE;
5190      END IF;
5191    END LOOP;
5192    RETURN FALSE;
5193  END is_comp_tablespace;
5194  
5195  -------------------------- ts_has_queues ---------------------------------
5196  -- returns TRUE if there is at least one queue in the tablespace
5197  FUNCTION ts_has_queues (tsname VARCHAR2) RETURN BOOLEAN
5198  IS
5199    t_null CHAR(1);
5200  BEGIN
5201    EXECUTE IMMEDIATE 'SELECT NULL FROM sys.dba_tables t
5202        WHERE EXISTS
5203        (SELECT 1 FROM sys.dba_queues q
5204           WHERE q.queue_table = t.table_name AND q.owner = t.owner)
5205        AND t.tablespace_name = :1 AND rownum <= 1'
5206        INTO t_null
5207        USING tsname;
5208      RETURN TRUE;
5209    EXCEPTION
5210      WHEN NO_DATA_FOUND THEN RETURN FALSE;
5211  END ts_has_queues;
5212  
5213  -------------------------- ts_is_SYS_temporary ---------------------------------
5214  -- returns TRUE if there is at least one queue in the tablespace
5215  
5216  FUNCTION ts_is_SYS_temporary (tsname VARCHAR2) RETURN BOOLEAN
5217  IS
5218    t_null CHAR(1);
5219  BEGIN
5220    EXECUTE IMMEDIATE 'SELECT NULL FROM sys.dba_users
5221          WHERE username = ''SYS'' AND temporary_tablespace = :1'
5222      INTO t_null
5223      USING tsname;
5224    RETURN TRUE;
5225  EXCEPTION
5226    WHEN NO_DATA_FOUND THEN RETURN FALSE;
5227  END ts_is_SYS_temporary;
5228  
5229  --
5230  -- Note:  There could be a verify function on
5231  -- the params passed in, but for now, we assume the
5232  -- caller is passing something DBUA knows how to handle
5233  --
5234  FUNCTION genDBUAXMLCheck (
5235       name       VARCHAR2,
5236       eseverity  NUMBER,
5237       etext      VARCHAR2,
5238       ecause     VARCHAR2,
5239       action     VARCHAR2,
5240       detailtype VARCHAR2,
5241       detailinfo VARCHAR2,
5242       fixuptype  VARCHAR2,
5243       fixupstage VARCHAR2 ) RETURN VARCHAR2
5244  IS
5245    t_severity   VARCHAR2(10);
5246  
5247  --  name
5248  --    Text name that MUST BE KNOWN BY DBUA.  They use it to key off of.
5249  --
5250  --  eseverity
5251  --    c_check_level_warning, _error, _info - tells the DBUA how to handle
5252  --    the condition.
5253  --
5254  --  etext
5255  --    Text of the error (if DBUA has a translated message, they will
5256  --      use that, otherwise, this will be displayed)
5257  --
5258  --  ecause
5259  --    Details of what causes this issue.
5260  --
5261  --  action
5262  --    Action to be taken to resolve the issue.
5263  --
5264  --                         detailtype/info
5265  --    Detail is the details for the issue being reported.  What check
5266  --    was run that caused this issue to be reported.
5267  --
5268  --  detailtype
5269  --    c_dbua_detail_type_text or _sql.  If _text, the DBUA will display
5270  --    it when displaying information about this issue.  If _sql, the
5271  --    DBUA will execute it, grab the output and display it.  Make
5272  --    sure the SQL generates approporate output.
5273  --
5274  --  detailinfo
5275  --   If _text, a description of what the issue is, if _sql, then
5276  --   its the SQL command to execute to generate output that will be
5277  --   displayed by the DBUA.
5278  --
5279  --  fixuptype
5280  --    c_dbua_fixup_type_auto _manual
5281  --    _auto =  there is a fixup function to solve the issue which
5282  --      can be executed to resolve the issue.
5283  --    _manual = There may still be a fixup function, but it must
5284  --      either confirmed, or executed manually (complex issue, or
5285  --      possible data manupulation).
5286  --
5287  --  fixupstage
5288  --    c_dbua_fixup_stage_pre, _post, _now
5289  --     _pre = Should be fixed before the upgrade is executed, usually
5290  --       right before the upgrade is started.
5291  --     _post = Should be fixed after the upgrade is executed
5292  --     _now = Can be solved right now, no need to wait until right
5293  --       before upgrade is executed.
5294  --
5295  BEGIN
5296    IF (eseverity = c_check_level_warning) THEN
5297      t_severity := c_check_level_warning_txt;
5298    ELSIF (eseverity = c_check_level_error) THEN
5299      t_severity := c_check_level_error_txt;
5300    ELSIF (eseverity = c_check_level_info) THEN
5301      t_severity := c_check_level_info_txt;
5302    ELSE
5303      t_severity := c_check_level_success_txt;
5304    END IF;
5305    return ('<PreUpgradeCheck ID="' || name ||
5306     '" Status="'  || t_severity  || '">' ||
5307     '<Message><Text>'         || etext      || '</Text>'   ||
5308              '<Cause>'        || ecause     || '</Cause>'  ||
5309              '<Action>'       || action     || '</Action>' ||
5310              '<Detail Type="' || detailtype || '">'  ||
5311                 detailinfo || '</Detail>' ||
5312     '</Message>' ||
5313     '<FixUp Type="' || fixuptype  || '" FixAtStage="' || fixupstage || '"/>' ||
5314     '</PreUpgradeCheck>');
5315  END genDBUAXMLCheck;
5316  
5317  
5318  FUNCTION htmlentities (intxt varchar2) RETURN VARCHAR2
5319    --
5320    -- Replace chars which DBUA/XML will parse into
5321    -- their HTML equivalents
5322    --
5323  IS
5324    rstr VARCHAR2(4000);
5325  BEGIN
5326    --
5327    -- Because we can't depend on the env turing DEFINE off,
5328    -- use chr(38) for the ampersand character.
5329    --
5330    rstr := replace(intxt, chr(38), chr(38) || 'amp;');
5331    rstr := replace(rstr, '<',      chr(38) || 'lt;');
5332    return replace(rstr, '>',      chr(38) || 'gt;');
5333    -- dbua testing showed that the ' and " did not need
5334    -- replacing
5335  END htmlentities;
5336  
5337  --
5338  -- Output a 'fixup' to the passed file.
5339  -- This is a call to the dbms_preup.run_fixup_and_report
5340  -- routine.  That routine will run the fixup and report
5341  -- the problem.
5342  --
5343  PROCEDURE genFixup (name VARCHAR2 )
5344  IS
5345    idx     NUMBER;
5346    rstr    VARCHAR2(400);
5347    tlevel  VARCHAR2(30);
5348    taction VARCHAR2(50);
5349    tfile   UTL_FILE.FILE_TYPE;
5350  
5351  BEGIN
5352    IF pCheckOnly THEN
5353      return;
5354    END IF;
5355  
5356    idx := check_names(name).idx;
5357  
5358    rstr := 'dbms_preup.run_fixup_and_report(''' || name || ''');';
5359  
5360    IF check_table(idx).fix_type IN (c_fix_source_manual,
5361                                     c_fix_source_auto,
5362                                     c_fix_target_manual_pre,
5363                                     c_fix_target_auto_pre) THEN
5364      tfile := pPreScriptUFT;
5365    ELSE
5366      tfile := pPostScriptUFT;
5367    END IF;
5368  
5369    If check_table(idx).fix_type IN (c_fix_source_manual,
5370                                     c_fix_target_manual_pre,
5371                                     c_fix_target_manual_post) THEN
5372      taction := pActionRequired;
5373    ELSE
5374      taction := 'Fixup routine';
5375    END IF;
5376  
5377    IF check_table(idx).level = c_check_level_info THEN
5378      tlevel := 'Informational';
5379    ELSIF check_table(idx).level = c_check_level_warning THEN
5380      tlevel := 'Warning';
5381    ELSIF check_table(idx).level = c_check_level_error THEN
5382      tlevel := 'Error';
5383    ELSIF check_table(idx).level = c_check_level_recommend THEN
5384      tlevel := 'Recommendation';
5385    END IF;
5386  
5387    DisplayLine (tfile, 'BEGIN');
5388    DisplayLine (tfile, '-- *****************  Fixup Details ***********************************');
5389    DisplayLine (tfile, '-- Name:        ' || name);
5390    DisplayLine (tfile, '-- Description: ' || check_table(idx).descript);
5391    DisplayLine (tfile, '-- Severity:    ' || tlevel);
5392    DisplayLine (tfile, '-- Action:      ' || taction);
5393    DisplayLine (tfile, '-- Fix Summary: ');
5394    DisplayLine (tfile, '--     ' || GetHelp(name, c_help_fixup));
5395    DisplayLine (tfile, '');
5396    DisplayLine (tfile, rstr);
5397    DisplayLine (tfile, 'END;');
5398    DisplayBlankLine (tfile);  -- we now move '/' to end of block with IF stmt
5399  
5400  END genFixup;
5401  
5402  -- **********************************************************************************
5403  --   Output routines for each phase of the preupgrade checks
5404  -- **********************************************************************************
5405  PROCEDURE output_summary
5406  IS
5407    t_varchar   VARCHAR2(40);
5408  BEGIN
5409    init_package;
5410  
5411    --
5412    -- header output to preupgrade.log, preupgrade.<con_name>.log, and upgrade.xml
5413    --
5414    dbms_output.put_line('');
5415    dbms_output.put_line('***************************************************************************');
5416    dbms_output.put_line ('Executing Pre-Upgrade Checks in ' || dbms_preup.get_con_name || '...');
5417    dbms_output.put_line('***************************************************************************');
5418    dbms_output.put_line('');
5419  
5420  
5421    IF pOutputType = c_output_xml
5422    THEN
5423      -- TODO:  DBUA may need to know if this is a
5424      -- restart.
5425      --
5426      -- update info to be passed to dbua now that we support cdbs
5427      DisplayLine ('<RDBMSUP xmlns="http://www.oracle.com/Upgrade" version="'
5428                   || c_version || '">');
5429      DisplayLine ('<SupportedOracleVersions value="' || c_supported_versions
5430                   || '"/>');
5431      DisplayLine ('<OracleVersion value="'           || db_version || '"/>');
5432      DisplayLine ('<Database Name="'  || db_name
5433               || '" ContainerName="' || con_name
5434               || '" ContainerId="' || con_id
5435               || '" Version=" ' || db_version
5436               || '" Compatibility="' || db_compat  || '"/>');
5437      IF pDBGFailAll THEN
5438        DisplayDiagLine (' ***** DEBUG MODE *****');
5439      END IF;
5440    ELSE
5441      IF pDBGFailAll THEN
5442        t_varchar := ' ***** DEBUG MODE *****';
5443      ELSE
5444        t_varchar := '';
5445      END IF;
5446      DisplayLine('Oracle Database Pre-Upgrade Information Tool ' || TO_CHAR(SYSDATE, 'MM-DD-YYYY HH24:MI:SS'));
5447      DisplayLine('Script Version: ' || c_version || c_patchset ||
5448                              ' Build: ' || c_build || t_varchar);
5449      DisplayBanner;
5450      DisplayLine ('   Database Name:  ' || db_name );
5451      IF con_id = 0 and db_version < c_NA_ver THEN
5452        -- Container info is 'Not Applicable' for pre-12.1 databases
5453        DisplayLine ('  Container Name:  ' || c_NA_str);
5454        DisplayLine ('    Container ID:  ' || c_NA_str);
5455      ELSE
5456        DisplayLine ('  Container Name:  ' || con_name );
5457        DisplayLine ('    Container ID:  ' || con_id );
5458      END IF;
5459      DisplayLine ('         Version:  ' || db_version );
5460      DisplayLine ('      Compatible:  ' || db_compat );
5461      DisplayLine ('       Blocksize:  ' || db_block_size );
5462      DisplayLine ('        Platform:  ' || db_platform );
5463      DisplayLine ('   Timezone file:  V' || db_tz_version );
5464      IF is_db_readonly = TRUE THEN
5465        DisplayLine ('        ReadOnly:  TRUE');
5466      END IF;
5467      IF db_is_XE THEN
5468        DisplayLine ('         Edition:  ' || 'XE' );
5469      END IF;
5470    END IF;
5471  END output_summary;
5472  
5473  PROCEDURE output_xml_initparams (minvp IN MINVALUE_TABLE_T)
5474  IS
5475    i       NUMBER;
5476  BEGIN
5477    DisplayLine ('<Update>');
5478    FOR i IN 1..max_minvp LOOP
5479      IF minvp(i).display THEN
5480        IF NOT (i = jv_idx and NOT cmp_info(javavm).processed) THEN
5481          IF NOT (i = mt_idx and minvp(i).oldvalue IS NULL) THEN
5482             DisplayLine('<Parameter name="' ||
5483                minvp(i).name ||
5484              '" atleast="' || TO_CHAR(ROUND(minvp(i).newvalue)) ||
5485              '" atleast_32="' || TO_CHAR(ROUND(minvp_db32(i).newvalue)) ||
5486              '" atleast_64="' || TO_CHAR(ROUND(minvp_db64(i).newvalue)) ||
5487              '" type="NUMBER"/>');
5488          END IF;
5489        END IF;
5490      END IF;
5491    END LOOP;
5492  
5493    IF db_compat_majorver < c_compat_min_num THEN
5494      --
5495      -- Display the minimum compatibility (manual mode has
5496      -- actual check)
5497      --
5498      DisplayLine (
5499        '<Parameter name="compatible" atleast="' || c_compat_min || '" type="VERSION"/>');
5500    END IF;
5501  
5502    --
5503    -- Check the special list for any values that
5504    -- need to be updated and dumped out inside the <update> tags for the DBUA
5505    --
5506    FOR i IN 1..max_sp LOOP
5507      IF sp(i).dbua_OutInUpdate THEN
5508        IF sp(i).db_match = TRUE AND
5509          sp(i).newvalue IS NOT NULL THEN
5510          -- <parameter name="Audit_Trail" newValue="NONE"/>
5511          DisplayLine('<Parameter name="' || sp(i).oldname ||
5512              '" newValue="' || sp(i).newvalue || '" type="STRING"/>');
5513        ELSIF pDBGAllResources THEN
5514          DisplayLine('<Parameter name="' || sp(i).oldname ||
5515              '" newValue="' || sp(i).newvalue || '" type="STRING"/>');
5516        END IF;
5517      END IF;
5518    END LOOP;
5519    DisplayLine ('</Update>');
5520  END output_xml_initparams;
5521  
5522  PROCEDURE output_manual_initparams (minvp IN MINVALUE_TABLE_T,
5523                                      bis64bit IN BOOLEAN)
5524  IS
5525    i           NUMBER  := 0;
5526    bChangesReq BOOLEAN := FALSE;
5527    bDisplayStartBanner BOOLEAN := FALSE;
5528    bDisplayEndBanner   BOOLEAN := FALSE;
5529    bis32bit    BOOLEAN := FALSE;
5530    cBit        VARCHAR(8) := '64-bit, ';
5531  
5532  BEGIN
5533  
5534    --
5535    -- Initialize
5536    --
5537    IF (bis64bit) THEN
5538        bDisplayEndBanner   := TRUE;
5539    ELSE
5540        bDisplayStartBanner := TRUE;
5541        cBit := '32-bit, ';
5542    END IF;
5543  
5544  
5545    --
5546    -- Display Section Banner only Once
5547    --
5548    IF bDisplayStartBanner THEN
5549          DisplayBanner;
5550          DisplayCenter('[Update parameters]');
5551    END IF;
5552  
5553    --
5554    -- Display the parameters
5555    --
5556    bChangesReq := FALSE;
5557    FOR i IN 1..max_minvp LOOP
5558      IF minvp(i).display THEN
5559        IF NOT (i = jv_idx and NOT cmp_info(javavm).processed) THEN
5560          IF NOT (i = mt_idx and minvp(i).oldvalue IS NULL) THEN
5561             IF NOT (bChangesReq) THEN
5562               IF bDisplayStartBanner THEN
5563                   DisplayCenter('[Update Oracle Database ' || db_version ||
5564                                ' init.ora or spfile]');
5565               END IF;
5566               DisplayLine(' ');
5567               DisplayLine('--> If Target Oracle is ' || cBit ||
5568                          'refer here for Update Parameters:');
5569             END IF;
5570             bChangesReq := TRUE;
5571             DisplayLine('WARNING: --> "' || minvp(i).name ||
5572                         '" needs to be increased to at least ' ||
5573                         TO_CHAR(ROUND(minvp(i).newvalue)));
5574          END IF;
5575        END IF;
5576      END IF;
5577    END LOOP;
5578  
5579    --
5580    -- Display End Banner Info
5581    --
5582    IF bDisplayEndBanner THEN
5583      IF NOT bChangesReq THEN
5584          DisplayCenter('[No parameters to update]');
5585      END IF;
5586      DisplayBanner;
5587    END IF;
5588  
5589  END output_manual_initparams;
5590  
5591  PROCEDURE output_initparams
5592  IS
5593    changes_req BOOLEAN;
5594    def_or_obs  VARCHAR2(15);
5595    result_txt  VARCHAR2(200);
5596    tmp_str     VARCHAR2(80);
5597    deprecated_str VARCHAR2(5);
5598    minvp       MINVALUE_TABLE_T;
5599  BEGIN
5600    init_package;
5601  
5602  
5603    IF db_64bit THEN
5604      minvp := minvp_db64;
5605    ELSE
5606      minvp := minvp_db32;
5607    END IF;
5608  
5609    IF db_invalid_state = TRUE THEN
5610      IF pOutputType = c_output_xml THEN
5611        --
5612        -- Although the DBUA will ensure the db is
5613        -- opended correctly, leave this error output
5614        --
5615        result_txt:= genDBUAXMLCheck('DATABASE_NOT_OPEN',
5616          c_check_level_error,
5617          'Database must be in "OPEN" state.',
5618          'Database is not in OPEN state',
5619          'SELECT status from V$INSTANCE',
5620           c_dbua_detail_type_text,
5621          'Close the database and reopen it using OPEN as the state',
5622          c_dbua_fixup_type_manual,
5623          c_dbua_fixup_stage_pre );
5624      ELSE
5625        DisplayLine ('Database not in OPEN state.');
5626        DisplayLine ('   Database must be in OPEN state for script to execute correctly.');
5627      END IF;
5628      return;
5629    END IF;
5630  
5631    IF (pOutputType = c_output_xml)
5632    THEN
5633      DisplayLine ('<InitParams>');
5634  
5635      output_xml_initparams(minvp);
5636  
5637      -- Migration tag was here
5638  
5639      DisplayLine ('<NonHandled>');
5640      --  DisplayLine ('<Parameter name="remote_listener"/>');
5641      DisplayLine ('</NonHandled>');
5642  
5643      DisplayLine ('<Rename>');
5644      FOR i IN 1..max_rp LOOP
5645        IF rp(i).db_match = TRUE THEN
5646          DisplayLine(
5647          '<Parameter name="' || rp(i).oldname ||
5648                    '" newName="' || rp(i).newname || '"/>');
5649        ELSIF pDBGAllResources THEN
5650          DisplayLine(
5651          '<Parameter name="' || rp(i).oldname ||
5652                    '" newName="' || rp(i).newname || '"/>');
5653        END IF;
5654      END LOOP;
5655  
5656      -- Display parameters that have a new name and a new value
5657      FOR i IN 1..max_sp LOOP
5658        IF sp(i).db_match = TRUE AND
5659          sp(i).newvalue IS NOT NULL AND
5660          sp(i).dbua_OutInUpdate = FALSE THEN
5661          DisplayLine('<Parameter name="' || sp(i).oldname ||
5662              '" newName="' || sp(i).newname ||
5663              '" newValue="' || sp(i).newvalue || '"/>');
5664        ELSIF pDBGAllResources THEN
5665          IF sp(i).dbua_OutInUpdate = FALSE THEN
5666            DisplayLine('<Parameter name="' || sp(i).oldname ||
5667                '" newName="' || sp(i).newname ||
5668                '" newValue="' || sp(i).newvalue || '"/>');
5669          END IF;
5670        END IF;
5671      END LOOP;
5672      DisplayLine ('</Rename>');
5673  
5674      DisplayLine('<Remove>');
5675      FOR i IN 1..max_op LOOP
5676        IF op(i).deprecated = TRUE THEN
5677           deprecated_str := 'TRUE';
5678        ELSE
5679           deprecated_str := 'FALSE';
5680        END IF;
5681        IF op(i).db_match = TRUE THEN
5682           DisplayLine('<Parameter name="' ||
5683             op(i).name || '" deprecated="' || deprecated_str || '"/>');
5684        ELSIF pDBGAllResources THEN
5685           DisplayLine('<Parameter name="' ||
5686             op(i).name || '" deprecated="' || deprecated_str || '"/>');
5687        END IF;
5688      END LOOP;
5689      DisplayLine('</Remove>');
5690      DisplayLine ('</InitParams>');
5691    ELSE
5692  
5693      output_manual_initparams(minvp_db32, FALSE);
5694      output_manual_initparams(minvp_db64, TRUE);
5695      --
5696      -- Text output
5697      --
5698      --
5699      -- compat check is done as an actual check
5700      -- since it can stop the DB from starting up
5701      --
5702      DisplayBanner;
5703      DisplayCenter('[Renamed Parameters]');
5704      changes_req := FALSE;
5705  
5706      FOR i IN 1..max_rp LOOP
5707        IF rp(i).db_match = TRUE THEN
5708          changes_req := TRUE;
5709          DisplayWarning('"' || rp(i).oldname ||
5710              '" new name is "' || rp(i).newname || '"');
5711        ELSIF pDBGAllResources THEN
5712          DisplayWarning('"' || rp(i).oldname ||
5713              '" new name is "' || rp(i).newname || '"');
5714        END IF;
5715      END LOOP;
5716  
5717      -- Display parameters that have a new name and a new value
5718  
5719      FOR i IN 1..max_sp LOOP
5720        IF sp(i).db_match = TRUE AND
5721            sp(i).newvalue IS NOT NULL
5722        THEN
5723          changes_req := TRUE;
5724          IF sp(i).oldvalue IS NULL
5725          THEN
5726            DisplayWarning('"' || sp(i).oldname ||
5727                '" new name is "' || sp(i).newname ||
5728                '" new value is "' || sp(i).newvalue || '"');
5729          ELSE
5730            DisplayLine('"' || sp(i).oldname ||
5731               '" old value was "' || sp(i).oldvalue || '";');
5732            DisplayLine('         --> new name is "' ||
5733                sp(i).newname || '", new value is "' || sp(i).newvalue || '"');
5734          END IF;
5735        ELSIF pDBGAllResources THEN
5736          IF sp(i).newvalue IS NULL THEN
5737            tmp_str := 'NULL';
5738          ELSE
5739            tmp_str := sp(i).newvalue;
5740          END IF;
5741          IF sp(i).oldvalue IS NULL  THEN
5742            DisplayWarning('"' || sp(i).oldname ||
5743                '" new name is "' || sp(i).newname ||
5744                '" new value is "' || tmp_str || '"');
5745          ELSE
5746            DisplayLine('"' || sp(i).oldname ||
5747               '" old value was "' || sp(i).oldvalue || '";');
5748            DisplayLine('         --> new name is "' ||
5749                sp(i).newname || '", new value is "' || tmp_str || '"');
5750          END IF;
5751        END IF;
5752      END LOOP;
5753  
5754      IF changes_req THEN
5755        DisplayLine('');
5756        DisplayCenter ('[Changes required in Oracle Database init.ora or spfile]');
5757        DisplayLine('');
5758      ELSE
5759        DisplayCenter('[No Renamed Parameters in use]');
5760      END IF;
5761      DisplayBanner;
5762  
5763      changes_req := FALSE;
5764      DisplayBanner;
5765      DisplayCenter ('[Obsolete/Deprecated Parameters]');
5766  
5767      FOR i IN 1..max_op LOOP
5768        IF op(i).deprecated = TRUE
5769        THEN
5770          def_or_obs := 'DESUPPORTED';
5771        ELSE
5772          def_or_obs := 'OBSOLETE';
5773        END IF;
5774  
5775        IF op(i).db_match = TRUE THEN
5776          changes_req := TRUE;
5777  
5778          IF op(i).name NOT IN ('background_dump_dest','user_dump_dest')
5779          THEN
5780            DisplayLine(
5781              '--> ' || rpad(op(i).name, 28) || ' ' ||
5782                       rpad(op(i).version, 10) || ' ' ||
5783                       rpad(def_or_obs, 12));
5784          ELSE
5785            -- bdump, udump deprecated by diagnostic_dest
5786            -- If core_dump_dest gets back onto this list, it goes here (and above)
5787            DisplayLine (
5788              '--> ' || rpad(op(i).name, 28) || ' ' ||
5789                       rpad(op(i).version, 10) || ' ' ||
5790                       rpad(def_or_obs, 12) ||
5791                       ' replaced by  "diagnostic_dest"');
5792          END IF;
5793        ELSIF pDBGAllResources THEN
5794          DisplayLine(
5795              '--> ' || rpad(op(i).name, 28) || ' ' ||
5796                       rpad(op(i).version, 10) || ' ' ||
5797                       rpad(def_or_obs, 12));
5798        END IF;
5799      END LOOP;
5800  
5801      IF changes_req THEN
5802        DisplayLine('');
5803        DisplayCenter('[Changes required in Oracle Database init.ora or spfile]');
5804        DisplayLine('');
5805      ELSE
5806        DisplayCenter ('[No Obsolete or Desupported Parameters in use]');
5807      END IF;
5808    END IF;  -- check for terminal output
5809  END output_initparams;
5810  
5811  PROCEDURE output_components
5812  IS
5813    post_list_info VARCHAR2(300) := '';
5814    tmp_varchar    VARCHAR2(30);
5815    ui             VARCHAR2(10);
5816  
5817  BEGIN
5818    init_package;
5819  
5820    IF db_invalid_state = TRUE THEN
5821      return;
5822    END IF;
5823  
5824    IF  pOutputType = c_output_xml
5825    THEN
5826      IF (cmp_info(catalog).status = 'VALID' AND cmp_info(catproc).status = 'VALID') THEN
5827        tmp_varchar := cmp_info(catalog).status;
5828      ELSE
5829        tmp_varchar := 'INVALID';
5830      END IF;
5831      DisplayLine ('<Components>');
5832        --
5833        -- For Server status, use Catalog status (catalog and catproc are
5834        -- skipped in the below loop)
5835        --
5836        DisplayLine ('<Component id ="Oracle Server" type="SERVER" cid="RDBMS" version="'
5837                  || db_version || '" status="' || tmp_varchar || '"/>');
5838        --
5839        -- Note:
5840        --      1,2 are catalog and catproc which are skipped
5841        --
5842        FOR i IN 3 .. max_components LOOP
5843          IF cmp_info(i).processed and NOT (cmp_info(i).cid = 'WK') THEN
5844            IF (cmp_info(i).status = NULL) THEN
5845              -- If we get a NULL value, don't dump out the status
5846              tmp_varchar := '';
5847            ELSE
5848              -- Create the status= entry
5849              tmp_varchar := ' status="' || cmp_info(i).status || '"';
5850            END IF;
5851            DisplayLine ('<Component id="'   || cmp_info(i).cname   ||
5852                              '" cid="'     || cmp_info(i).cid     ||
5853                              '" script="'  || cmp_info(i).script  ||
5854                              '" version="' || cmp_info(i).version ||
5855                              '"' || tmp_varchar || '/>');
5856          END IF;
5857        END LOOP;
5858     DisplayLine('</Components>');
5859    ELSE
5860      DisplayBanner;
5861      DisplayCenter ('[Component List]');
5862      DisplayBanner;
5863  
5864      FOR i IN 1..max_components LOOP
5865        IF cmp_info(i).processed THEN
5866          IF cmp_info(i).install THEN ui := '[install]';
5867          ELSE                        ui := '[upgrade]';
5868          END IF;
5869          DisplayLine(
5870             '--> ' || rpad(cmp_info(i).cname, 38) || ' ' ||
5871                       rpad(ui, 10) || ' ' ||
5872                       rpad(cmp_info(i).status, 10));
5873          IF ((cmp_info(i).cid  = 'OLS') AND
5874                  NOT cmp_info(dv).processed) THEN
5875            post_list_info := post_list_info  || crlf
5876                || 'To successfully upgrade Oracle Label Security, choose ' || crlf
5877                || '''Select Options'' in Oracle installer and then select ' || crlf
5878                || 'Oracle Label Security.';
5879          END IF;
5880        END IF;
5881      END LOOP;
5882      IF (length(post_list_info) != 0) THEN
5883        DisplayLine (post_list_info);
5884      END IF;
5885    END IF;
5886  END output_components;
5887  
5888  PROCEDURE output_resources
5889  --
5890  -- This calls all the resource routines
5891  --
5892  IS
5893  BEGIN
5894    init_package;
5895  
5896    --
5897    -- Make sure resources are set before so
5898    -- everything is re-calculated.
5899    --
5900    init_resources;
5901  
5902    IF db_invalid_state = TRUE THEN
5903      RETURN;
5904    END IF;
5905    output_tablespaces;
5906    output_rollback_segs;
5907    output_flashback;
5908  END output_resources;
5909  
5910  PROCEDURE output_tablespaces
5911  IS
5912    resourcenum    NUMBER (38);
5913    changes_req BOOLEAN := FALSE;
5914  BEGIN
5915    IF pOutputType = c_output_xml
5916    THEN
5917      DisplayLine('<SystemResource>');
5918  
5919      FOR i IN 1..max_ts LOOP
5920        DisplayLine (
5921           '<Tablespace name="' || ts_info(i).name ||
5922           '" additional_size="' ||
5923               TO_CHAR(ROUND(ts_info(i).addl)) || '"/>');
5924  
5925        IF pDBGSizeResources THEN
5926          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5927                            ' used =                    ' || LPAD(ts_info(i).inuse,10));
5928          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5929                           ' delta=                    ' || LPAD(ts_info(i).delta,10));
5930          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5931                           ' total req=                ' || LPAD(ts_info(i).min,10));
5932          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5933                            ' alloc=                    ' || LPAD(ts_info(i).alloc,10));
5934          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5935                            ' auto_avail=               ' || LPAD(ts_info(i).auto,10));
5936          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5937                            ' total avail=              ' ||  LPAD(ts_info(i).avail,10));
5938          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5939                            ' additional space needed = ' || LPAD(ts_info(i).addl,10));
5940          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5941                            ' increment by =            ' || LPAD(ts_info(i).inc_by,10));
5942          DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5943                            ' total avail=              ' ||  LPAD(ts_info(i).avail,10));
5944        END IF;
5945      END LOOP;
5946      --
5947      -- ArchiveLogs and Flashback info
5948      --
5949      -- bug 18038240:
5950      -- note: pMinArchiveLogGen and pMinFlashbackLogGen are in Kb
5951      -- note: DBUA expects these sizes to be in Mb (not Kb)
5952      -- note: so if we divide these variables by c_kb, then they will be in Mb
5953      --
5954      IF db_log_mode = 'ARCHIVELOG' OR pDBGSizeResources THEN
5955        resourcenum := pMinArchiveLogGen / c_kb;
5956      ELSE
5957        resourcenum := 0;
5958      END IF;
5959      DisplayLine (
5960        '<ArchiveLogs name="ArchiveLogs" additional_size="' ||
5961           resourcenum || '" />');
5962  
5963      IF db_flashback_on OR pDBGSizeResources THEN
5964        resourcenum := pMinFlashbackLogGen / c_kb;
5965      ELSE
5966        resourcenum := 0;
5967      END IF;
5968      DisplayLine (
5969        '<FlashbackLogs name="FlasbackLogs" additional_size="' ||
5970          resourcenum || '" />');
5971  
5972      DisplayLine('</SystemResource>');
5973    ELSE
5974      DisplayBanner;
5975      IF pUnsupportedUpgrade THEN
5976        DisplayCenter('[ Unsupported Upgrade: Tablespace Data Suppressed ]');
5977      ELSE
5978        DisplayCenter('[Tablespaces]');
5979      END IF;
5980      DisplayBanner;
5981  
5982      IF max_ts > 0 and pUnsupportedUpgrade = FALSE THEN
5983        FOR i IN 1..max_ts LOOP
5984          --
5985          -- For debugging, dump out the allocated and used info
5986          --
5987          IF pDBGSizeResources THEN
5988            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5989                            ' used =                    ' || LPAD(ts_info(i).inuse,10));
5990            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5991                            ' delta=                    ' || LPAD(ts_info(i).delta,10));
5992            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5993                           ' total req=                ' || LPAD(ts_info(i).min,10));
5994            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5995                            ' alloc=                    ' || LPAD(ts_info(i).alloc,10));
5996            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5997                            ' auto_avail=               ' || LPAD(ts_info(i).auto,10));
5998            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
5999                            ' total avail=              ' ||  LPAD(ts_info(i).avail,10));
6000            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
6001                            ' additional space needed = ' || LPAD(ts_info(i).addl,10));
6002            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
6003                            ' increment by =            ' || LPAD(ts_info(i).inc_by,10));
6004            DisplayDiagLine(RPAD(ts_info(i).name,10) ||
6005                            ' total avail=              ' ||  LPAD(ts_info(i).avail,10));
6006          END IF;
6007  
6008          IF ts_info(i).inc_by = 0 THEN
6009            DisplayLine(
6010              '--> ' || ts_info(i).name ||
6011                   ' tablespace is adequate for the upgrade.');
6012            DisplayLine(
6013              '     minimum required size: ' ||
6014              TO_CHAR(ROUND(ts_info(i).min)) || ' MB');
6015          ELSE
6016            --
6017            -- need more space in tablespace
6018            --
6019            changes_req := TRUE;
6020            DisplayError(ts_info(i).name ||
6021                        ' tablespace is not large enough for the upgrade.');
6022            DisplayLine(
6023               '     currently allocated size: ' ||
6024                TO_CHAR(ROUND(ts_info(i).alloc)) || ' MB');
6025            DisplayLine(
6026               '     minimum required size: ' ||
6027                TO_CHAR(ROUND(ts_info(i).min)) || ' MB');
6028            DisplayLine(
6029               '     increase current size by: ' ||
6030                TO_CHAR(ROUND(ts_info(i).inc_by)) || ' MB');
6031  
6032            IF ts_info(i).fauto THEN
6033               DisplayLine(
6034                 '     tablespace is AUTOEXTEND ENABLED.');
6035            ELSE
6036               DisplayLine(
6037                '     tablespace is NOT AUTOEXTEND ENABLED.');
6038            END IF;
6039          END IF;
6040        END LOOP;
6041      END IF;
6042  
6043      IF pUnsupportedUpgrade = FALSE THEN
6044          DisplayLine('');
6045        IF changes_req THEN
6046          DisplayCenter('[make adjustments in the current environment]');
6047        ELSE
6048          DisplayCenter('[No adjustments recommended]');
6049        END IF;
6050        DisplayLine('');
6051        DisplayBanner;
6052      END IF;
6053    END IF;   -- output type text
6054  END output_tablespaces;
6055  
6056  PROCEDURE output_rollback_segs
6057  IS
6058    auto VARCHAR2(3);
6059  BEGIN
6060    IF pOutputType = c_output_xml THEN
6061      RETURN;
6062    END IF;
6063  
6064    IF max_rs > 0 THEN
6065      DisplayBanner;
6066      DisplayLine('Rollback Segments: [make adjustments ' ||
6067                        'immediately prior to upgrading]');
6068      DisplayBanner;
6069      -- Loop through the rs_info table
6070      FOR i IN 1..max_rs LOOP
6071        IF rs_info(i).auto > 0 THEN
6072          auto:='ON';
6073        ELSE
6074          auto:='OFF';
6075        END IF;
6076        DisplayLine(
6077              '--> ' || rs_info(i).seg_name || ' in tablespace ' ||
6078                        rs_info(i).tbs_name || ' is ' ||
6079                        rs_info(i).status ||
6080                        '; AUTOEXTEND is ' || auto);
6081        DisplayLine(
6082              '     currently allocated: ' || rs_info(i).inuse
6083                    || 'K');
6084        DisplayLine(
6085              '     next extent size: ' || rs_info(i).next
6086                    || 'K; max extents: ' || rs_info(i).max_ext);
6087      END LOOP;
6088      DisplayWarning('For the upgrade, use a large (minimum 70M) ' ||
6089                           'public rollback segment');
6090      IF max_rs > 1 THEN
6091        DisplayWarning('Take smaller public rollback segments OFFLINE');
6092      END IF;
6093      DisplayLine ('');
6094    END IF;
6095  END output_rollback_segs;
6096  
6097  PROCEDURE output_flashback
6098  IS
6099    min_fra_size number;  -- minimum flashback recovery area size suggested
6100                          -- for the upgrade
6101  BEGIN
6102  
6103    IF pDBGSizeResources THEN
6104      FOR i in 1..max_comps LOOP
6105        IF cmp_info(i).processed THEN
6106          DisplayDiagLine ('Archivelog:   ' || rpad(cmp_info(i).cid,10) || ' ' ||
6107                           lpad(cmp_info(i).archivelog_kbytes,10));
6108          DisplayDiagLine ('Flashbacklog: ' || rpad(cmp_info(i).cid,10) || ' ' ||
6109                  lpad(cmp_info(i).flashbacklog_kbytes,10));
6110        END IF;
6111      END LOOP;
6112    END IF;
6113  
6114    IF pOutputType = c_output_xml THEN
6115      RETURN;
6116    END IF;
6117  
6118    IF flashback_info.active OR pDBGAllResources THEN
6119  
6120      -- calculate min_fra_size or minimum flashback recovery area size (in Mb)
6121      -- note: pMinArchiveLogGen and pMinFlashbackLogGen are in Kb
6122      -- note: the sum of the 2 variables above is saved into min_fra_size
6123      -- note: so if we divide min_fra_size by c_kb, then min_fra_size is in Mb
6124      min_fra_size :=
6125        ROUND( (pMinArchiveLogGen + pMinFlashbackLogGen) / c_kb );
6126  
6127      DisplayBanner;
6128      IF pUnsupportedUpgrade THEN
6129        DisplayCenter('[ Unsupported Upgrade: Flashback Data Suppressed ]');
6130      ELSE
6131        DisplayCenter('[Flashback Information]');
6132      END IF;
6133      DisplayBanner;
6134      DisplayLine ('--> name:          ' || flashback_info.name );
6135      DisplayLine ('--> limit:         ' || TO_CHAR( (flashback_info.limit / c_mb))          || ' MB');
6136      DisplayLine ('--> used:          ' || TO_CHAR( round((flashback_info.used / c_mb ),0))  || ' MB');
6137      DisplayLine ('--> size:          ' || TO_CHAR( (flashback_info.dsize / c_mb ))       || ' MB');
6138      DisplayLine ('--> reclaim:       ' || TO_CHAR( (flashback_info.reclaimable / c_mb)) || ' MB');
6139      DisplayLine ('--> files:         ' || TO_CHAR(flashback_info.files));
6140      DisplayLine ('');
6141  
6142      IF (flashback_info.used/c_mb + min_fra_size >= flashback_info.dsize / c_mb) THEN
6143          pCheckWarningCount := pCheckWarningCount + 1;
6144          DisplayError ('Flashback Database is enabled and the flash recovery area is estimated');
6145          DisplayLine  ('     not to be large enough for an upgrade.');
6146          DisplayLine  ('     Ensure adequate disk space exists in the flash recovery area');
6147          DisplayLine  ('     before performing the upgrade.');
6148      ELSE
6149          pCheckInfoCount := pCheckInfoCount + 1;
6150          DisplayInformation ('Flashback Database is enabled.  At present, the flash recovery area');
6151          DisplayLine        ('     is large enough to handle the bare minimum estimated for the upgrade.');
6152          DisplayLine        ('     Ensure adequate disk space exists in the flash recovery area');
6153          DisplayLine        ('     just before performing the upgrade.');
6154      END IF;
6155  
6156      -- bug 17545700: display the minimum FRA size ONLY if size is
6157      -- more than 0Mb
6158      IF (min_fra_size > 0) THEN
6159        DisplayLine ('');
6160        DisplayLine ('     It is recommended that the recovery area have '
6161                    || 'at least ' || TO_CHAR(min_fra_size)
6162                    || ' MB -');
6163        DisplayLIne ('     or greater - of free space.');
6164      END IF;
6165  
6166      DisplayBanner;
6167    END IF;
6168  END output_flashback;
6169  
6170  PROCEDURE output_recommendations
6171  --
6172  -- Output both the pre and post recommendations
6173  --
6174  IS
6175  BEGIN
6176    init_package;
6177  
6178    IF db_invalid_state = TRUE OR pOutputType = c_output_xml THEN
6179      RETURN;
6180    END IF;
6181    DisplayLine(pPreScriptUFT, 'BEGIN');
6182    DisplayLineBoth(pPreScriptUFT, '');
6183    DisplayBanner(pPreScriptUFT);
6184    DisplayCenter(pPreScriptUFT, '[Pre-Upgrade Recommendations]');
6185    DisplayBanner(pPreScriptUFT);
6186    DisplayLineBoth(pPreScriptUFT, '');
6187    DisplayLine(pPreScriptUFT, 'END;');
6188    DisplayBlankLine(pPreScriptUFT);
6189  
6190    --
6191    -- Dump the pre recommendations
6192    --
6193    run_all_recommend (c_type_recommend_pre);
6194  
6195    DisplayLine(pPostScriptUFT, 'BEGIN');
6196    DisplayLineBoth(pPostScriptUFT, '');
6197    DisplayBanner(pPostScriptUFT);
6198    DisplayCenter(pPostScriptUFT, '[Post-Upgrade Recommendations]');
6199    DisplayBanner(pPostScriptUFT);
6200    DisplayLineBoth(pPostScriptUFT, '');
6201    DisplayLine(pPostScriptUFT, 'END;');
6202    DisplayBlankLine(pPostScriptUFT);
6203  
6204    --
6205    -- Dump the post recommendations
6206    --
6207    run_all_recommend (c_type_recommend_post);
6208    DisplayBanner;
6209  END output_recommendations;
6210  
6211  --
6212  -- A quick summary of the checks - this is the last thing
6213  -- seen in the log file.
6214  --
6215  -- The thought is, this may be the last thing seen so
6216  -- if there are things we REALLY need them to know, it should
6217  -- be output here.
6218  --
6219  -- This is ONLY for TEXT output.
6220  --
6221  PROCEDURE output_prolog
6222  IS
6223    toutput VARCHAR2(1000);
6224    tstr    VARCHAR2(30);
6225  BEGIN
6226    init_package;
6227  
6228    IF pOutputType = c_output_text THEN
6229      --
6230      -- Only output for non XML display
6231      --
6232      DisplayLine (CenterLine('************  Summary  ************'));
6233      DisplayLine ('');
6234  
6235      tstr := ' ERRORS';
6236      toutput := ' exist that must be addressed prior to performing your upgrade.';
6237      IF (pCheckErrorCount = 1) THEN
6238        tstr := ' ERROR';
6239      ELSIF pCheckErrorCount = 0 THEN
6240        toutput := ' exist in your database.';
6241      END IF;
6242      DisplayLine (LPAD(pCheckErrorCount,2) || tstr  || toutput);
6243  
6244      tstr := ' WARNINGS';
6245      toutput := ' that Oracle suggests are addressed to improve database performance.';
6246      IF (pCheckWarningCount = 1) THEN
6247        tstr := ' WARNING';
6248      ELSIF pCheckWarningCount = 0 THEN
6249        toutput := ' exist in your database.';
6250      END IF;
6251      DisplayLine (LPAD(pCheckWarningCount,2) || tstr  || toutput);
6252  
6253      tstr := ' INFORMATIONAL messages';
6254      toutput := ' that should be reviewed prior to your upgrade.';
6255      If pCheckInfoCount = 1 THEN
6256        tstr := ' INFORMATIONAL message';
6257      ELSIF (pCheckInfoCount = 0) THEN
6258        toutput := ' messages have been reported.';
6259      END IF;
6260      DisplayLine (LPAD(pCheckInfoCount,2) || tstr || toutput);
6261  
6262      toutput :=
6263           crlf || ' After your database is upgraded and open in normal mode you must run '
6264        || crlf || ' rdbms/admin/catuppst.sql which executes several required tasks and completes'
6265        || crlf || ' the upgrade process.'
6266        || crlf || crlf ||
6267                   ' You should follow that with the execution of rdbms/admin/utlrp.sql, and a'
6268        || crlf || ' comparison of invalid objects before and after the upgrade using'
6269        || crlf || ' rdbms/admin/utluiobj.sql'
6270        || crlf || crlf ||
6271                   ' If needed you may want to upgrade your timezone data using the process'
6272        || crlf || ' described in My Oracle Support note 1509653.1'
6273        || crlf || CenterLine('***********************************');
6274      DisplayLine(toutput);
6275    END IF;
6276  END output_prolog;
6277  
6278  PROCEDURE output_preup_checks
6279  IS
6280  BEGIN
6281    IF db_invalid_state = TRUE THEN
6282      return;
6283    END IF;
6284  
6285    IF pOutputType = c_output_xml THEN
6286      DisplayLine ('<PreUpgradeChecks>');
6287    ELSE
6288      DisplayBanner;
6289      DisplayCenter('[Pre-Upgrade Checks]');
6290      DisplayBanner;
6291    END IF;
6292  
6293    FOR i IN 1..pCheckCount LOOP
6294      --
6295      -- Dump out the results of the Normal checks only
6296      -- if they failed (and if there is something to display)
6297      --
6298      IF (check_table(i).passed = FALSE AND
6299          ( check_table(i).type = c_type_check OR
6300            check_table(i).type = c_type_check_interactive_only)) THEN
6301        DisplayLine (check_table(i).result_text);
6302        DisplayLine ('');
6303      END IF;
6304    END LOOP;
6305  
6306    IF pOutputType = c_output_xml THEN
6307      DisplayLine ('</PreUpgradeChecks>');
6308      DisplayLine ('</RDBMSUP>');
6309      IF pOutputFixupScripts THEN
6310        DisplayLinePL (CenterLine('[Pre and Post Upgrade Fixup Scripts Have been Generated]'));
6311        DisplayLinePL (CenterLine('[Location: ' || get_output_path || ' ]'));
6312      END IF;
6313    END IF;
6314  
6315  END output_preup_checks;
6316  
6317  --
6318  -- Dump out a summary of the checks that were run
6319  -- and also if there are any errors that require user
6320  -- action.
6321  --
6322  -- This output to TO THE TEMRINAL no matter what.
6323  --
6324  PROCEDURE output_check_summary
6325  IS
6326    path     VARCHAR2(500);
6327    tsuccess NUMBER  := 0;
6328    tfailed  NUMBER  := 0;
6329    terrors  NUMBER  := 0;
6330    ttotal   NUMBER  := 0;
6331  
6332  BEGIN
6333    IF db_invalid_state = TRUE THEN
6334      RETURN;
6335    END IF;
6336  
6337    init_package;
6338    IF pOutputType = c_output_text THEN
6339      FOR i IN 1..pCheckCount LOOP
6340        IF (check_table(i).executed) THEN
6341          IF check_table(i).passed THEN
6342            tsuccess := tsuccess +1;
6343          ELSE
6344            tfailed := tfailed +1;
6345          END IF;
6346          IF check_table(i).level = c_check_level_error THEN
6347            terrors := terrors + 1;
6348          END IF;
6349        END IF;
6350      END LOOP;
6351  
6352      path := get_output_path;
6353  
6354      IF terrors != 0 THEN
6355        DisplayLinePL('');
6356        DisplayLinePL(CenterLine('************************************************************'));
6357        DisplayLinePL('');
6358        DisplayLinePL(CenterLine('====>> ERRORS FOUND for ' || con_name || ' <<===='));
6359        DisplayLinePL('');
6360        --
6361        -- Centerline cuts off long lines so if you are changing this line,
6362        -- be careful of its lenght.
6363        --
6364        DisplayLinePL(CenterLine('The following are *** ERROR LEVEL CONDITIONS *** that must be addressed'));
6365        DisplayLinePl(CenterLine('prior to attempting your upgrade.'));
6366        DisplayLinePL(CenterLine('Failure to do so will result in a failed upgrade.'));
6367        DisplayLinePL('');
6368  
6369        FOR i IN 1..pCheckCount LOOP
6370          IF (check_table(i).executed         AND
6371              check_table(i).passed  = FALSE  AND
6372              check_table(i).level = c_check_level_error) THEN
6373            ttotal := ttotal + 1;
6374            DisplayLinePL('');
6375            DisplayLinePL(LPAD(ttotal,2) || ') Check Tag:    ' || check_table(i).name);
6376            DisplayLinePL('    Check Summary: ' || check_table(i).descript);
6377            DisplayLinePL('    Fixup Summary: ');
6378            DisplayLinePL('     "' || getHelp(check_table(i).name,c_help_fixup) || '"');
6379            --
6380            -- Then let them know when the manual action is required.
6381            --
6382            IF (check_table(i).fix_type = c_fix_source_manual) THEN
6383              DisplayLinePL('    +++ Source Database Manual Action Required +++');
6384            ELSIF (check_table(i).fix_type = c_fix_target_manual_pre) THEN
6385              DisplayLinePL('   +++ Post Upgraded Database Manual Action Required +++');
6386            END IF;
6387            DisplayLinePL ('');
6388          END IF;
6389        END LOOP;
6390  
6391        IF ttotal = 1 THEN
6392          DisplayLinePL(CenterLine('You MUST resolve the above error prior to upgrade'));
6393        ELSE
6394          DisplayLinePL(CenterLine('You MUST resolve the above errors prior to upgrade'));
6395        END IF;
6396        DisplayLinePL('');
6397        DisplayLinePL(CenterLine('************************************************************'));
6398        DisplayLinePL('');
6399      END IF;
6400    END IF;  -- output type
6401  END output_check_summary;
6402  
6403  --
6404  -- This is called from the pre and post fixup routines to clear out
6405  -- the 'fixup_run' flag (in case the fixups are run multiple times).
6406  --
6407  -- If preup is TRUE, this is the summary for the
6408  -- preupgrade script.
6409  --
6410  PROCEDURE clear_run_flag (preup BOOLEAN)
6411  IS
6412  BEGIN
6413    init_package;
6414    FOR i IN 1..pCheckCount LOOP
6415      check_table(i).fixup_executed := FALSE;
6416    END LOOP;
6417  END clear_run_flag;
6418  
6419  --
6420  -- Walk through all the checks and provide a summary of how
6421  -- the fixup routines did.
6422  --
6423  -- This is intended to be run AFTER the fixup (pre or post)
6424  -- scripts have been executed (and is called from those
6425  -- scripts).
6426  --
6427  -- If preup is TRUE, this is the summary for the
6428  -- preupgrade script.
6429  --
6430  PROCEDURE fixup_summary (preup BOOLEAN)
6431  IS
6432    tinfo    NUMBER  := 0;
6433    tsuccess NUMBER  := 0;
6434    tfailed  NUMBER  := 0;
6435    terrors   NUMBER := 0;
6436    ttotal   NUMBER  := 0;
6437    tinfoerrors NUMBER := 0;
6438  
6439  BEGIN
6440    IF p_package_inited = FALSE THEN
6441      EXECUTE IMMEDIATE 'BEGIN
6442        RAISE_APPLICATION_ERROR (-20000,
6443              ''Pre-Upgrade Package Fixup Summary called prior to fixups being executed''); END;';
6444        RETURN;
6445    END IF;
6446  
6447    FOR i IN 1..pCheckCount LOOP
6448      --
6449      IF (check_table(i).fixup_executed) THEN
6450        ttotal := ttotal+ 1;
6451        IF check_table(i).fixup_status = c_fixup_status_success THEN
6452          tsuccess := tsuccess +1;
6453        ELSIF check_table(i).fixup_status = c_fixup_status_info THEN
6454          IF check_table(i).level = c_check_level_error  THEN
6455            --
6456            -- Fixup returned some info, but its an error level
6457            --
6458            tinfoerrors := tinfoerrors+1;
6459          ELSE
6460            tinfo := tinfo + 1;
6461          END IF;
6462        ELSIF check_table(i).fixup_status = c_fixup_status_failure THEN
6463          tfailed := tfailed + 1;
6464        END IF;
6465        IF (check_table(i).level = c_check_level_error AND
6466            check_table(i).fixup_status != c_fixup_status_success) THEN
6467          --
6468          -- This is an error level (must be fixed), that did not
6469          -- succeed,
6470          -- at the end of this routine, dump out a list of
6471          -- these so they know they need to resolve these prior to upgrade
6472          --
6473          terrors := terrors+1;
6474        END IF;
6475      END IF;
6476    END LOOP;
6477    --
6478    -- Output counts.
6479    --
6480    DisplayLinePL('');
6481    DisplayLinePL(CenterLine('**************************************************'));
6482    DisplayLinePL(CenterLine('************* Fixup Summary ************'));
6483    DisplayLinePL('');
6484    IF ttotal = 0 THEN
6485      DisplayLinePL('No fixup routines were executed.');
6486      DisplayLinePL('');
6487      DisplayLinePL(CenterLine('**************************************************'));
6488      RETURN;
6489    END IF;
6490  
6491    IF tsuccess = 1 THEN
6492  
6493      DisplayLinePL(' 1 fixup routine was successful.');
6494  
6495    ELSIF tsuccess = 0 THEN
6496      --
6497      -- If all we had was 'info' routines, then displaying
6498      -- that none were successful doesn't sound correct
6499      -- so take that into account here by seeing if infocount
6500      -- is the same as total.
6501      --
6502      IF ttotal = tinfo THEN
6503  
6504        IF tinfo = 1 THEN
6505          DisplayLinePL(' 1 fixup routine generated an INFORMATIONAL message that should be reviewed.');
6506        ELSE
6507          -- we know its not zero.
6508          DisplayLinePL(LPAD(tinfo,2) || ' fixup routines generated INFORMATIONAL messages that should be reviewed.');
6509        END IF;
6510      END IF;
6511  
6512    ELSE
6513      DisplayLinePL(LPAD(tsuccess,2) || ' fixup routines were successful.');
6514    END IF;
6515  
6516    IF tinfo != ttotal THEN
6517      --
6518      -- If they are equal, the message is taken care of
6519      -- in the tsuccess block above (all that ran returned info messages.
6520      --
6521      IF tinfo = 1 THEN
6522        DisplayLinePL(' 1 fixup routine returned INFORMATIONAL text that should be reviewed.');
6523      ELSE
6524        DisplayLinePL(LPAD(tinfo,2) || ' fixup routines returned INFORMATIONAL text that should be reviewed.');
6525      END IF;
6526    END IF;
6527  
6528    IF tinfoerrors != 0 THEN
6529      IF tinfoerrors = 1 THEN
6530        DisplayLinePL(' 1 ERROR LEVEL check returned INFORMATION that must be acted on prior to upgrade.');
6531      ELSE
6532        DisplayLinePL(LPAD(tinfoerrors,2) || ' ERROR LEVEL checks returned INFORMATION that must be acted on prior to upgrade.');
6533      END IF;
6534    END IF;
6535  
6536    IF tfailed = 1 THEN
6537      DisplayLinePL(' 1 fixup routine failed to execute. The output must be reviewed.');
6538    ELSIF tfailed != 0 THEN
6539      DisplayLinePL(LPAD(tfailed,2) || ' fixup routines failed to execute. The output must be reviewed.');
6540    END IF;
6541  
6542    --
6543    -- If there is an error level check that was run and did not succeed,
6544    -- make sure we report that they MUST RESOLVE this.
6545    --
6546    IF terrors != 0 THEN
6547      DisplayLinePL('');
6548      DisplayLinePL(CenterLine('************************************************************'));
6549      DisplayLinePL(CenterLine('====>> USER ACTION REQUIRED  <<===='));
6550      DisplayLinePL(CenterLine('************************************************************'));
6551  
6552      ttotal := 0;  -- reuse this variable.
6553      FOR i IN 1..pCheckCount LOOP
6554        --
6555        IF (check_table(i).level = c_check_level_error AND
6556            check_table(i).fixup_status != c_fixup_status_success) THEN
6557          --
6558          -- Report this as a MUST FIX
6559          --
6560          ttotal := ttotal + 1;
6561          DisplayLinePL('');
6562          DisplayLinePL(LPAD(ttotal,2) || ') Check Tag:    ' || check_table(i).name || ' failed.');
6563          DisplayLinePL('    Check Summary: ' || check_table(i).descript);
6564          DisplayLinePL('    Fixup Summary: ');
6565          DisplayLinePL('     "' || getHelp(check_table(i).name,c_help_fixup) || '"');
6566          IF check_table(i).fix_type IN (c_fix_source_manual,
6567                                         c_fix_target_manual_pre,
6568                                         c_fix_target_manual_post) THEN
6569            --
6570            -- If this is a manual situation, let them know they have
6571            -- something to do (may be redundant given the block we are in but...)
6572            --
6573            DisplayLinePL('    ' || pActionRequired);
6574          END IF;
6575        END IF;
6576      END LOOP;
6577  
6578      DisplayLinePL('');
6579      DisplayLinePL(CenterLine('**************************************************'));
6580      IF ttotal = 1 THEN
6581        DisplayLinePL(CenterLine('You MUST resolve the above error prior to upgrade'));
6582      ELSE
6583        DisplayLinePL(CenterLine('You MUST resolve the above errors prior to upgrade'));
6584      END IF;
6585      DisplayLinePL(CenterLine('**************************************************'));
6586      DisplayLinePL('');
6587    END IF;
6588    DisplayLinePL('');
6589  END fixup_summary;
6590  
6591  -- ***************************************************************************
6592  --                             Specific Check Area
6593  -- ***************************************************************************
6594  
6595  
6596  -- *****************************************************************
6597  --     AMD_EXISTS Section
6598  -- *****************************************************************
6599  FUNCTION amd_exists_check (result_txt OUT VARCHAR2) RETURN number
6600  IS
6601    n_status NUMBER := -1;
6602  BEGIN
6603    --
6604    -- Is AMD around?
6605    --
6606    BEGIN
6607      EXECUTE IMMEDIATE
6608         'SELECT  status FROM sys.registry$ WHERE cid=''AMD''
6609            AND namespace=''SERVER'''
6610         INTO n_status;
6611    EXCEPTION
6612        WHEN OTHERS THEN NULL; -- AMD not in registry
6613    END;
6614  
6615    IF n_status = -1 AND pDBGFailCheck = FALSE OR pOutputType = c_output_xml THEN
6616      -- AMD not in registry
6617      -- or output is XML, return success
6618      RETURN c_status_success;
6619    END IF;
6620  
6621    --
6622    -- This is a manual only check
6623    --
6624    result_txt := amd_exists_gethelp(c_help_overview);
6625  
6626    IF pOutputFixupScripts THEN
6627        genFixup ('AMD_EXISTS');
6628    END IF;
6629    RETURN c_status_failure;
6630  
6631  END amd_exists_check ;
6632  
6633  FUNCTION amd_exists_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
6634  IS
6635  BEGIN
6636    IF HelpType = c_help_overview THEN
6637      return 'INFORMATION: --> OLAP Catalog(AMD) exists in database' || crlf
6638       || crlf || '     Starting with Oracle Database 12c, OLAP Catalog component is desupported.'
6639       || crlf || '     If you are not using the OLAP Catalog component and want'
6640       || crlf || '     to remove it, then execute the '
6641       || crlf || '     ORACLE_HOME/olap/admin/catnoamd.sql script before or '
6642       || crlf || '     after the upgrade.';
6643    ELSIF HelpType = c_help_fixup THEN
6644      return 'Manually execute ORACLE_HOME/oraolap/admin/catnoamd.sql script to remove OLAP.';
6645    END IF;
6646  END amd_exists_gethelp;
6647  --
6648  PROCEDURE amd_exists_fixup
6649  IS
6650    result   VARCHAR2(1000);
6651    status   NUMBER;
6652    tSqlcode  NUMBER;
6653  BEGIN
6654    -- Call fixup and throw away the result
6655    status := amd_exists_fixup (result, tSqlcode);
6656  END amd_exists_fixup;
6657  
6658  FUNCTION amd_exists_fixup (
6659           result_txt IN OUT VARCHAR2,
6660           pSqlcode    IN OUT NUMBER) RETURN number
6661  IS
6662  BEGIN
6663     result_txt := amd_exists_gethelp(c_help_overview);
6664     pSqlcode := 0;
6665     return c_fixup_status_info;
6666  END amd_exists_fixup;
6667  
6668  
6669  -- *****************************************************************
6670  --     AUDIT_ADMIN_ROLE_PRESENT Section
6671  -- *****************************************************************
6672  FUNCTION AAR_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
6673  IS
6674    roll_exists NUMBER := 1;
6675    t_null      CHAR(1);
6676    status      NUMBER;
6677  BEGIN
6678    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
6679      return c_status_not_for_this_version;
6680    END IF;
6681  
6682    BEGIN
6683      EXECUTE IMMEDIATE
6684       'SELECT NULL FROM sys.user$ WHERE name=''AUDIT_ADMIN'''
6685        INTO t_null;
6686      EXCEPTION
6687        WHEN NO_DATA_FOUND then roll_exists := 0;
6688    END;
6689  
6690    IF (roll_exists = 0 AND pDBGFailCheck = FALSE)
6691    THEN
6692      RETURN c_status_success;
6693    ELSE
6694      IF pOutputType = c_output_xml THEN
6695        result_txt:= genDBUAXMLCheck('AUDIT_ADMIN_ROLE_PRESENT',
6696          c_check_level_error,
6697          'A user or role named "AUDIT_ADMIN" found in the database.',
6698          'A user or role named "AUDIT_ADMIN" found in the database.',
6699          '"AUDIT_ADMIN" role or user must be dropped prior to upgrading.',
6700           c_dbua_detail_type_text,
6701          'To drop the role "AUDIT_ADMIN", use the command: '||
6702          ' DROP ROLE AUDIT_ADMIN,' || ' and To drop user "AUDIT_ADMIN"'||
6703          ' use the command: DROP USER AUDIT_ADMIN CASCADE',
6704          c_dbua_fixup_type_manual,
6705          c_dbua_fixup_stage_pre );
6706      ELSE
6707        result_txt := AAR_PRESENT_gethelp(c_help_overview);
6708      END IF;
6709      IF pOutputFixupScripts THEN
6710        genFixup ('AUDIT_ADMIN_ROLE_PRESENT');
6711      END IF;
6712      RETURN c_status_failure;
6713     END IF;
6714  END AAR_PRESENT_check;
6715  
6716  FUNCTION AAR_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
6717  IS
6718  BEGIN
6719    IF HelpType = c_help_overview THEN
6720      return 'ERROR: --> A user or role with the name "AUDIT_ADMIN" found in the database.' || crlf
6721        || crlf || '     This is an Oracle defined role.'
6722        || crlf || '     You must drop this role or user prior to upgrading.';
6723    ELSIF HelpType = c_help_fixup THEN
6724      return 'The AUDIT_ADMIN roll must be dropped prior to upgrading.';
6725    END IF;
6726  END AAR_PRESENT_gethelp;
6727  --
6728  -- Fixup (Procedure and function)
6729  --
6730  PROCEDURE AAR_PRESENT_fixup
6731  IS
6732    result  VARCHAR2(1000);
6733    status  NUMBER;
6734    tSqlcode NUMBER;
6735  BEGIN
6736    -- Call fixup and throw away the result
6737    status := AAR_PRESENT_fixup (result, tSqlcode);
6738  END AAR_PRESENT_fixup;
6739  
6740  FUNCTION AAR_PRESENT_fixup (
6741           result_txt IN OUT VARCHAR2,
6742           pSqlcode    IN OUT NUMBER) RETURN number
6743  IS
6744  BEGIN
6745    result_txt :=  AAR_PRESENT_gethelp(c_help_overview);
6746    pSqlcode := 0;
6747    return c_fixup_status_info;
6748  END AAR_PRESENT_fixup;
6749  -- *****************************************************************
6750  --     APPQOSSYS_USER_PRESENT Section
6751  -- *****************************************************************
6752  FUNCTION APPQOSSYS_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
6753  IS
6754    user_exists BOOLEAN;
6755    tmp_num1    NUMBER;
6756    t_null      CHAR(1);
6757    status      NUMBER;
6758  
6759  BEGIN
6760    user_exists := TRUE;  -- Assume its around
6761  
6762    IF (db_n_version NOT IN (102,111) AND pDBGFailCheck = FALSE) THEN
6763      return c_status_not_for_this_version;
6764    END IF;
6765  
6766    BEGIN
6767      EXECUTE IMMEDIATE 'SELECT user# FROM sys.user$ WHERE name=''APPQOSSYS'''
6768        INTO tmp_num1;
6769      EXCEPTION
6770        WHEN NO_DATA_FOUND then user_exists := FALSE;
6771    END;
6772  
6773    IF user_exists THEN
6774      BEGIN
6775        EXECUTE IMMEDIATE
6776         'SELECT NULL FROM sys.obj$ WHERE owner# = (SELECT user# from SYS.USER$
6777           WHERE name=''APPQOSSYS'') AND
6778             name =''WLM_METRICS_STREAM'' AND  type# = 2'
6779        INTO t_null;
6780      EXCEPTION
6781        WHEN NO_DATA_FOUND then user_exists := TRUE;
6782      END;
6783    END IF;
6784  
6785    IF user_exists = FALSE AND pDBGFailCheck = FALSE
6786    THEN
6787     RETURN c_status_success; -- No issue
6788    ELSE
6789      IF pOutputType = c_output_xml THEN
6790        result_txt:= genDBUAXMLCheck('APPQOSSYS_USER_PRESENT',
6791          c_check_level_warning,
6792          'User APPQOSSYS present in database',
6793          'User APPQOSSYS present in database',
6794          'Remove APPQOSYS user from database.',
6795           c_dbua_detail_type_text,
6796          'The APPQOSSYS user exists in the database.'
6797            || ' This is an internal account and should be '
6798            || ' removed prior to upgrading your database',
6799          c_dbua_fixup_type_auto,
6800          c_dbua_fixup_stage_pre);
6801      ELSE
6802        result_txt := appqossys_user_present_gethelp (c_help_overview);
6803      END IF;
6804      IF pOutputFixupScripts THEN
6805        genFixup ('APPQOSSYS_USER_PRESENT');
6806      END IF;
6807      RETURN c_status_failure;
6808     END IF;
6809  END APPQOSSYS_USER_PRESENT_check;
6810  
6811  FUNCTION APPQOSSYS_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
6812  IS
6813  BEGIN
6814    IF HelpType = c_help_overview THEN
6815      return 'WARNING: --> "APPQOSSYS" user found in database.' || crlf
6816        || crlf || '     This is an internal account used by '
6817        || crlf || '     Oracle Application Quality of Service Management. '
6818        || crlf || '     Please drop this user prior to upgrading.';
6819    ELSIF HelpType = c_help_fixup THEN
6820      return 'The APPQOSSYS user will will be dropped.';
6821    END IF;
6822  END APPQOSSYS_USER_PRESENT_gethelp;
6823  --
6824  -- Fixup (Procedure and function)
6825  --
6826  PROCEDURE APPQOSSYS_USER_PRESENT_fixup
6827  IS
6828    result  VARCHAR2(1000);
6829    status  NUMBER;
6830    tSqlcode NUMBER;
6831  BEGIN
6832    -- Call fixup and throw away the result
6833    status := APPQOSSYS_USER_PRESENT_fixup (result, tSqlcode);
6834  END APPQOSSYS_USER_PRESENT_fixup;
6835  
6836  FUNCTION APPQOSSYS_USER_PRESENT_fixup (
6837           result_txt IN OUT VARCHAR2,
6838           pSqlcode    IN OUT NUMBER) RETURN number
6839  IS
6840  BEGIN
6841     return execute_sql_statement ('DROP USER APPQOSSYS CASCADE', result_txt, pSqlcode);
6842  END APPQOSSYS_USER_PRESENT_fixup;
6843  -- *****************************************************************
6844  --     AUDSYS_USER_PRESENT Section
6845  -- *****************************************************************
6846  FUNCTION AUDSYS_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
6847  IS
6848    user_exists NUMBER := 1;
6849    t_null      CHAR(1);
6850    status      NUMBER;
6851  BEGIN
6852    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
6853      return c_status_not_for_this_version;
6854    END IF;
6855  
6856    BEGIN
6857      EXECUTE IMMEDIATE
6858       'SELECT NULL FROM sys.user$ WHERE name = ''AUDSYS'''
6859        INTO t_null;
6860      EXCEPTION
6861        WHEN NO_DATA_FOUND then user_exists := 0;
6862    END;
6863    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
6864    THEN
6865      RETURN c_status_success;
6866    ELSE
6867      IF pOutputType = c_output_xml THEN
6868        result_txt:= genDBUAXMLCheck('AUDSYS_USER_PRESENT',
6869          c_check_level_error,
6870          'A user or role named "AUDSYS" found in the database.',
6871          'A user or role named "AUDSYS" found in the database.',
6872          '"AUDSYS" user or role must be dropped prior to upgrading.',
6873           c_dbua_detail_type_text,
6874          'To drop the user "AUDSYS", use the command: '||
6875          'DROP USER AUDSYS CASCADE'||', and To drop the role "AUDSYS", use the'||
6876          'command: DROP ROLE AUDSYS',
6877          c_dbua_fixup_type_manual,
6878          c_dbua_fixup_stage_pre );
6879      ELSE
6880        result_txt := AUDSYS_USER_PRESENT_gethelp(c_help_overview);
6881      END IF;
6882      IF pOutputFixupScripts THEN
6883        genFixup ('AUDSYS_USER_PRESENT');
6884      END IF;
6885      RETURN c_status_failure;
6886     END IF;
6887  END AUDSYS_USER_PRESENT_check;
6888  
6889  FUNCTION AUDSYS_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
6890  IS
6891  BEGIN
6892    IF HelpType = c_help_overview THEN
6893      return 'ERROR: --> A user or role with the name "AUDSYS" found in the database.' || crlf
6894        || crlf || '     This is an internal account used by Oracle Database Auditing.'
6895        || crlf || '     You must drop this user or role prior to upgrading.';
6896    ELSIF HelpType = c_help_fixup THEN
6897      return 'The AUDSYS user or roll must be dropped prior to upgrading.';
6898    END IF;
6899  END AUDSYS_USER_PRESENT_gethelp;
6900  --
6901  -- Fixup (Procedure and function)
6902  --
6903  PROCEDURE AUDSYS_USER_PRESENT_fixup
6904  IS
6905    result  VARCHAR2(1000);
6906    status  NUMBER;
6907    tSqlcode NUMBER;
6908  BEGIN
6909    -- Call fixup and throw away the result
6910    status := AUDSYS_USER_PRESENT_fixup (result, tSqlcode);
6911  END AUDSYS_USER_PRESENT_fixup;
6912  
6913  FUNCTION AUDSYS_USER_PRESENT_fixup (
6914           result_txt IN OUT VARCHAR2,
6915           pSqlcode    IN OUT NUMBER) RETURN number
6916  IS
6917  BEGIN
6918    result_txt  := AUDSYS_USER_PRESENT_gethelp(c_help_overview);
6919    pSqlcode := 0;
6920    return c_fixup_status_info;
6921  END AUDSYS_USER_PRESENT_fixup;
6922  
6923  -- *****************************************************************
6924  --     AUDIT_VIEWER Section
6925  -- *****************************************************************
6926  FUNCTION AUDIT_VIEWER_check (result_txt OUT VARCHAR2) RETURN number
6927  IS
6928    roll_exists NUMBER := 1;
6929    t_null      CHAR(1);
6930    status      NUMBER;
6931  BEGIN
6932  
6933    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
6934      return c_status_not_for_this_version;
6935    END IF;
6936  
6937    BEGIN
6938      EXECUTE IMMEDIATE
6939       'SELECT NULL FROM sys.user$ WHERE NAME = ''AUDIT_VIEWER'''
6940        INTO t_null;
6941      EXCEPTION
6942        WHEN NO_DATA_FOUND then roll_exists := 0;
6943    END;
6944  
6945    IF (roll_exists = 0 AND pDBGFailCheck = FALSE)
6946    THEN
6947      RETURN c_status_success;
6948    ELSE
6949      IF pOutputType = c_output_xml THEN
6950        result_txt:= genDBUAXMLCheck('AUDIT_VIEWER',
6951          c_check_level_error,
6952          'A user or role named "AUDIT_VIEWER" found in the database.',
6953          'A user or role named "AUDIT_VIEWER" found in the database.',
6954          '"AUDIT_VIEWER" role or user must be dropped prior to upgrading.',
6955           c_dbua_detail_type_text,
6956          'To drop the role "AUDIT_VIEWER", use the command:'
6957          || ' DROP ROLE AUDIT_VIEWER' || ', and To drop the user "AUDIT_VIEWER"'
6958          || ' use the command: DROP USER AUDIT_VIEWER CASCADE',
6959          c_dbua_fixup_type_manual,
6960          c_dbua_fixup_stage_pre );
6961      ELSE
6962        result_txt := AUDIT_VIEWER_gethelp(c_help_overview);
6963      END IF;
6964      IF pOutputFixupScripts THEN
6965        genFixup ('AUDIT_VIEWER');
6966      END IF;
6967      RETURN c_status_failure;
6968     END IF;
6969  END AUDIT_VIEWER_check;
6970  
6971  FUNCTION AUDIT_VIEWER_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
6972  IS
6973  BEGIN
6974    IF HelpType = c_help_overview THEN
6975      return 'ERROR: --> A user or role with the name "AUDIT_VIEWER" found in the database.' || crlf
6976        || crlf || '     This is an Oracle defined role.'
6977        || crlf || '     You must drop this role or user prior to upgrading.';
6978    ELSIF HelpType = c_help_fixup THEN
6979      return 'The AUDIT_VIEWER roll or user must be dropped prior to upgrading.';
6980    END IF;
6981  END AUDIT_VIEWER_gethelp;
6982  --
6983  -- Fixup (Procedure and function)
6984  --
6985  PROCEDURE AUDIT_VIEWER_fixup
6986  IS
6987    result  VARCHAR2(1000);
6988    status  NUMBER;
6989    tSqlcode NUMBER;
6990  BEGIN
6991    -- Call fixup and throw away the result
6992    status := AUDIT_VIEWER_fixup (result, tSqlcode);
6993  END AUDIT_VIEWER_fixup;
6994  
6995  FUNCTION AUDIT_VIEWER_fixup (
6996           result_txt IN OUT VARCHAR2,
6997           pSqlcode    IN OUT NUMBER) RETURN number
6998  IS
6999  BEGIN
7000    result_txt := AUDIT_VIEWER_gethelp(c_help_overview);
7001    pSqlcode := 0;
7002    return c_fixup_status_info;
7003  END AUDIT_VIEWER_fixup;
7004  
7005  -- *****************************************************************
7006  --     SYSBACKUP_USER_PRESENT Section
7007  -- *****************************************************************
7008  FUNCTION SYSBACKUP_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7009  IS
7010    user_exists NUMBER := 1;
7011    t_null      CHAR(1);
7012    status      NUMBER;
7013  BEGIN
7014  
7015    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7016      return c_status_not_for_this_version;
7017    END IF;
7018  
7019    BEGIN
7020      EXECUTE IMMEDIATE
7021       'SELECT NULL FROM sys.user$ WHERE NAME = ''SYSBACKUP'''
7022        INTO t_null;
7023      EXCEPTION
7024        WHEN NO_DATA_FOUND then user_exists := 0;
7025    END;
7026  
7027    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
7028    THEN
7029      RETURN c_status_success;
7030    ELSE
7031      IF pOutputType = c_output_xml THEN
7032        result_txt:= genDBUAXMLCheck('SYSBACKUP',
7033          c_check_level_error,
7034          'A user or role named "SYSBACKUP" found in the database.',
7035          'A user or role named "SYSBACKUP" found in the database.',
7036          '"SYSBACKUP" user or role must be dropped prior to upgrading.',
7037           c_dbua_detail_type_text,
7038          'To drop the role "SYSBACKUP", use the command:'
7039          || ' DROP ROLE SYSBACKUP' || ', and To drop the user "SYSBACKUP"'
7040          || ' use the command: DROP USER SYSBACKUP CASCADE',
7041          c_dbua_fixup_type_manual,
7042          c_dbua_fixup_stage_pre );
7043      ELSE
7044        result_txt := SYSBACKUP_USER_PRESENT_gethelp(c_help_overview);
7045      END IF;
7046      IF pOutputFixupScripts THEN
7047        genFixup ('SYSBACKUP_USER_PRESENT');
7048      END IF;
7049      RETURN c_status_failure;
7050     END IF;
7051  END SYSBACKUP_USER_PRESENT_check;
7052  
7053  FUNCTION SYSBACKUP_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7054  IS
7055  BEGIN
7056    IF HelpType = c_help_overview THEN
7057      return 'ERROR: --> A user or role with the name "SYSBACKUP" found in the database.' || crlf
7058        || crlf || '     This is an Oracle defined user.'
7059        || crlf || '     You must drop this user or role prior to upgrading.';
7060    ELSIF HelpType = c_help_fixup THEN
7061      return 'The SYSBACKUP user or role must be dropped prior to upgrading.';
7062    END IF;
7063  END SYSBACKUP_USER_PRESENT_gethelp;
7064  --
7065  -- Fixup (Procedure and function)
7066  --
7067  PROCEDURE SYSBACKUP_USER_PRESENT_fixup
7068  IS
7069    result  VARCHAR2(1000);
7070    status  NUMBER;
7071    tSqlcode NUMBER;
7072  BEGIN
7073    -- Call fixup and throw away the result
7074    status := SYSBACKUP_USER_PRESENT_fixup (result, tSqlcode);
7075  END SYSBACKUP_USER_PRESENT_fixup;
7076  
7077  FUNCTION SYSBACKUP_USER_PRESENT_fixup (
7078           result_txt IN OUT VARCHAR2,
7079           pSqlcode    IN OUT NUMBER) RETURN number
7080  IS
7081  BEGIN
7082    result_txt := SYSBACKUP_USER_PRESENT_gethelp(c_help_overview);
7083    pSqlcode := 0;
7084    return c_fixup_status_info;
7085  END SYSBACKUP_USER_PRESENT_fixup;
7086  
7087  -- *****************************************************************
7088  --     SYSDG_USER_PRESENT Section
7089  -- *****************************************************************
7090  FUNCTION SYSDG_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7091  IS
7092    user_exists NUMBER := 1;
7093    t_null      CHAR(1);
7094    status      NUMBER;
7095  BEGIN
7096  
7097    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7098      return c_status_not_for_this_version;
7099    END IF;
7100  
7101    BEGIN
7102      EXECUTE IMMEDIATE
7103       'SELECT NULL FROM sys.user$ WHERE NAME = ''SYSDG'''
7104        INTO t_null;
7105      EXCEPTION
7106        WHEN NO_DATA_FOUND then user_exists := 0;
7107    END;
7108  
7109    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
7110    THEN
7111      RETURN c_status_success;
7112    ELSE
7113      IF pOutputType = c_output_xml THEN
7114        result_txt:= genDBUAXMLCheck('SYSDG',
7115          c_check_level_error,
7116          'A user or role named "SYSDG" found in the database.',
7117          'A user or role named "SYSDG" found in the database.',
7118          '"SYSDG" user or role must be dropped prior to upgrading.',
7119           c_dbua_detail_type_text,
7120          'To drop the role "SYSDG", use the command:'
7121          || ' DROP ROLE SYSDG' || ', and To drop the user "SYSDG"'
7122          || ' use the command: DROP USER SYSDG CASCADE',
7123          c_dbua_fixup_type_manual,
7124          c_dbua_fixup_stage_pre );
7125      ELSE
7126        result_txt := SYSDG_USER_PRESENT_gethelp(c_help_overview);
7127      END IF;
7128      IF pOutputFixupScripts THEN
7129        genFixup ('SYSDG_USER_PRESENT');
7130      END IF;
7131      RETURN c_status_failure;
7132     END IF;
7133  END SYSDG_USER_PRESENT_check;
7134  
7135  FUNCTION SYSDG_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7136  IS
7137  BEGIN
7138    IF HelpType = c_help_overview THEN
7139      return 'ERROR: --> A user or role with the name "SYSDG" found in the database.' || crlf
7140        || crlf || '     This is an Oracle defined user.'
7141        || crlf || '     You must drop this user or role prior to upgrading.';
7142    ELSIF HelpType = c_help_fixup THEN
7143      return 'The SYSDG role or user must be dropped prior to upgrading.';
7144    END IF;
7145  END SYSDG_USER_PRESENT_gethelp;
7146  --
7147  -- Fixup (Procedure and function)
7148  --
7149  PROCEDURE SYSDG_USER_PRESENT_fixup
7150  IS
7151    result  VARCHAR2(1000);
7152    status  NUMBER;
7153    tSqlcode NUMBER;
7154  BEGIN
7155    -- Call fixup and throw away the result
7156    status := SYSDG_USER_PRESENT_fixup (result, tSqlcode);
7157  END SYSDG_USER_PRESENT_fixup;
7158  
7159  FUNCTION SYSDG_USER_PRESENT_fixup (
7160           result_txt IN OUT VARCHAR2,
7161           pSqlcode    IN OUT NUMBER) RETURN number
7162  IS
7163  BEGIN
7164    result_txt := SYSDG_USER_PRESENT_gethelp(c_help_overview);
7165    pSqlcode := 0;
7166    return c_fixup_status_info;
7167  END SYSDG_USER_PRESENT_fixup;
7168  
7169  -- *****************************************************************
7170  --     SYSKM_USER_PRESENT Section
7171  -- *****************************************************************
7172  FUNCTION SYSKM_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7173  IS
7174    user_exists NUMBER := 1;
7175    t_null      CHAR(1);
7176    status      NUMBER;
7177  BEGIN
7178  
7179    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7180      return c_status_not_for_this_version;
7181    END IF;
7182  
7183    BEGIN
7184      EXECUTE IMMEDIATE
7185       'SELECT NULL FROM sys.user$ WHERE NAME = ''SYSKM'''
7186        INTO t_null;
7187      EXCEPTION
7188        WHEN NO_DATA_FOUND then user_exists := 0;
7189    END;
7190  
7191    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
7192    THEN
7193      RETURN c_status_success;
7194    ELSE
7195      IF pOutputType = c_output_xml THEN
7196        result_txt:= genDBUAXMLCheck('SYSKM',
7197          c_check_level_error,
7198          'A user or role named "SYSKM" found in the database.',
7199          'A user or role named "SYSKM" found in the database.',
7200          '"SYSKM" user or role must be dropped prior to upgrading.',
7201           c_dbua_detail_type_text,
7202          'To drop the role "SYSKM", use the command:'
7203          || ' DROP ROLE SYSKM' || ', and To drop the user "SYSKM"'
7204          || ' use the command: DROP USER SYSKM CASCADE',
7205          c_dbua_fixup_type_manual,
7206          c_dbua_fixup_stage_pre );
7207      ELSE
7208        result_txt := SYSKM_USER_PRESENT_gethelp(c_help_overview);
7209      END IF;
7210      IF pOutputFixupScripts THEN
7211        genFixup ('SYSKM_USER_PRESENT');
7212      END IF;
7213      RETURN c_status_failure;
7214     END IF;
7215  END SYSKM_USER_PRESENT_check;
7216  
7217  FUNCTION SYSKM_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7218  IS
7219  BEGIN
7220    IF HelpType = c_help_overview THEN
7221      return 'ERROR: --> A user or role with the name "SYSKM" found in the database.' || crlf
7222        || crlf || '     This is an Oracle defined user.'
7223        || crlf || '     You must drop this user or role prior to upgrading.';
7224    ELSIF HelpType = c_help_fixup THEN
7225      return 'The SYSKM user or role must be dropped prior to upgrading.';
7226    END IF;
7227  END SYSKM_USER_PRESENT_gethelp;
7228  --
7229  -- Fixup (Procedure and function)
7230  --
7231  PROCEDURE SYSKM_USER_PRESENT_fixup
7232  IS
7233    result  VARCHAR2(1000);
7234    status  NUMBER;
7235    tSqlcode NUMBER;
7236  BEGIN
7237    -- Call fixup and throw away the result
7238    status := SYSKM_USER_PRESENT_fixup (result, tSqlcode);
7239  END SYSKM_USER_PRESENT_fixup;
7240  
7241  FUNCTION SYSKM_USER_PRESENT_fixup (
7242           result_txt IN OUT VARCHAR2,
7243           pSqlcode    IN OUT NUMBER) RETURN number
7244  IS
7245  BEGIN
7246    result_txt := SYSKM_USER_PRESENT_gethelp(c_help_overview);
7247    pSqlcode := 0;
7248    return c_fixup_status_info;
7249  END SYSKM_USER_PRESENT_fixup;
7250  
7251  -- *****************************************************************
7252  --     CAPT_ADM_ROLE_PRESENT Section
7253  -- *****************************************************************
7254  FUNCTION CAPT_ADM_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7255  IS
7256    role_exists NUMBER := 1;
7257    t_null      CHAR(1);
7258    status      NUMBER;
7259  BEGIN
7260  
7261    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7262      return c_status_not_for_this_version;
7263    END IF;
7264  
7265    BEGIN
7266      EXECUTE IMMEDIATE
7267       'SELECT NULL FROM sys.user$ WHERE NAME = ''CAPTURE_ADMIN'''
7268        INTO t_null;
7269      EXCEPTION
7270        WHEN NO_DATA_FOUND then role_exists := 0;
7271    END;
7272  
7273    IF (role_exists = 0 AND pDBGFailCheck = FALSE)
7274    THEN
7275      RETURN c_status_success;
7276    ELSE
7277      IF pOutputType = c_output_xml THEN
7278        result_txt:= genDBUAXMLCheck('CAPTURE_ADMIN',
7279          c_check_level_error,
7280          'A user or role named "CAPTURE_ADMIN" found in the database.',
7281          'A user or role named "CAPTURE_ADMIN" found in the database.',
7282          '"CAPTURE_ADMIN" user or role must be dropped prior to upgrading.',
7283           c_dbua_detail_type_text,
7284          'To drop the role "CAPTURE_ADMIN", use the command:'
7285          || ' DROP ROLE CAPTURE_ADMIN' || ', and To drop the user "CAPTURE_ADMIN"'
7286          || ' use the command: DROP USER CAPTURE_ADMIN CASCADE',
7287          c_dbua_fixup_type_manual,
7288          c_dbua_fixup_stage_pre );
7289      ELSE
7290        result_txt := CAPT_ADM_ROLE_PRESENT_gethelp(c_help_overview);
7291      END IF;
7292      IF pOutputFixupScripts THEN
7293        genFixup ('CAPT_ADM_ROLE_PRESENT');
7294      END IF;
7295      RETURN c_status_failure;
7296     END IF;
7297  END CAPT_ADM_ROLE_PRESENT_check;
7298  
7299  FUNCTION CAPT_ADM_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7300  IS
7301  BEGIN
7302    IF HelpType = c_help_overview THEN
7303      return 'ERROR: --> A user or role with the name "CAPTURE_ADMIN" found in the database.' || crlf
7304        || crlf || '     This is an Oracle defined role.'
7305        || crlf || '     You must drop this user or role prior to upgrading.';
7306    ELSIF HelpType = c_help_fixup THEN
7307      return 'The CAPTURE_ADMIN user or role must be dropped prior to upgrading.';
7308    END IF;
7309  END CAPT_ADM_ROLE_PRESENT_gethelp;
7310  --
7311  -- Fixup (Procedure and function)
7312  --
7313  PROCEDURE CAPT_ADM_ROLE_PRESENT_fixup
7314  IS
7315    result  VARCHAR2(1000);
7316    status  NUMBER;
7317    tSqlcode NUMBER;
7318  BEGIN
7319    -- Call fixup and throw away the result
7320    status := CAPT_ADM_ROLE_PRESENT_fixup (result, tSqlcode);
7321  END CAPT_ADM_ROLE_PRESENT_fixup;
7322  
7323  FUNCTION CAPT_ADM_ROLE_PRESENT_fixup (
7324           result_txt IN OUT VARCHAR2,
7325           pSqlcode    IN OUT NUMBER) RETURN number
7326  IS
7327  BEGIN
7328    result_txt := CAPT_ADM_ROLE_PRESENT_gethelp(c_help_overview);
7329    pSqlcode := 0;
7330    return c_fixup_status_info;
7331  END CAPT_ADM_ROLE_PRESENT_fixup;
7332  
7333  
7334  -- *****************************************************************
7335  --     GSMCATUSER_PRESENT Section
7336  -- *****************************************************************
7337  FUNCTION GSMCATUSER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7338  IS
7339    user_exists NUMBER := 1;
7340    t_null      CHAR(1);
7341    status      NUMBER;
7342  BEGIN
7343  
7344    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7345      return c_status_not_for_this_version;
7346    END IF;
7347  
7348    BEGIN
7349      EXECUTE IMMEDIATE
7350       'SELECT NULL FROM sys.user$ WHERE NAME = ''GSMCATUSER'''
7351        INTO t_null;
7352      EXCEPTION
7353        WHEN NO_DATA_FOUND then user_exists := 0;
7354    END;
7355  
7356    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
7357    THEN
7358      RETURN c_status_success;
7359    ELSE
7360      IF pOutputType = c_output_xml THEN
7361        result_txt:= genDBUAXMLCheck('GSMCATUSER',
7362          c_check_level_error,
7363          'A user or role named "GSMCATUSER" found in the database.',
7364          'A user or role named "GSMCATUSER" found in the database.',
7365          '"GSMCATUSER" user or role must be dropped prior to upgrading.',
7366           c_dbua_detail_type_text,
7367          'To drop the role "GSMCATUSER", use the command:'
7368          || ' DROP ROLE GSMCATUSER' || ', and To drop the user "GSMCATUSER"'
7369          || ' use the command: DROP USER GSMCATUSER CASCADE',
7370          c_dbua_fixup_type_manual,
7371          c_dbua_fixup_stage_pre );
7372      ELSE
7373        result_txt := GSMCATUSER_PRESENT_gethelp(c_help_overview);
7374      END IF;
7375      IF pOutputFixupScripts THEN
7376        genFixup ('GSMCATUSER_PRESENT');
7377      END IF;
7378      RETURN c_status_failure;
7379     END IF;
7380  END GSMCATUSER_PRESENT_check;
7381  
7382  FUNCTION GSMCATUSER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7383  IS
7384  BEGIN
7385    IF HelpType = c_help_overview THEN
7386      return 'ERROR: --> A user or role with the name "GSMCATUSER" found in the database.' || crlf
7387        || crlf || '     This is an Oracle defined user.'
7388        || crlf || '     You must drop this user or role prior to upgrading.';
7389    ELSIF HelpType = c_help_fixup THEN
7390      return 'The GSMCATUSER role or user must be dropped prior to upgrading.';
7391    END IF;
7392  END GSMCATUSER_PRESENT_gethelp;
7393  --
7394  -- Fixup (Procedure and function)
7395  --
7396  PROCEDURE GSMCATUSER_PRESENT_fixup
7397  IS
7398    result  VARCHAR2(1000);
7399    status  NUMBER;
7400    tSqlcode NUMBER;
7401  BEGIN
7402    -- Call fixup and throw away the result
7403    status := GSMCATUSER_PRESENT_fixup (result, tSqlcode);
7404  END GSMCATUSER_PRESENT_fixup;
7405  
7406  FUNCTION GSMCATUSER_PRESENT_fixup (
7407           result_txt IN OUT VARCHAR2,
7408           pSqlcode    IN OUT NUMBER) RETURN number
7409  IS
7410  BEGIN
7411    result_txt := GSMCATUSER_PRESENT_gethelp(c_help_overview);
7412    pSqlcode := 0;
7413    return c_fixup_status_info;
7414  END GSMCATUSER_PRESENT_fixup;
7415  
7416  -- *****************************************************************
7417  --     GSMUSER_USER_PRESENT Section
7418  -- *****************************************************************
7419  FUNCTION GSMUSER_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7420  IS
7421    user_exists NUMBER := 1;
7422    t_null      CHAR(1);
7423    status      NUMBER;
7424  BEGIN
7425  
7426    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7427      return c_status_not_for_this_version;
7428    END IF;
7429  
7430    BEGIN
7431      EXECUTE IMMEDIATE
7432       'SELECT NULL FROM sys.user$ WHERE NAME = ''GSMUSER'''
7433        INTO t_null;
7434      EXCEPTION
7435        WHEN NO_DATA_FOUND then user_exists := 0;
7436    END;
7437  
7438    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
7439    THEN
7440      RETURN c_status_success;
7441    ELSE
7442      IF pOutputType = c_output_xml THEN
7443        result_txt:= genDBUAXMLCheck('GSMUSER',
7444          c_check_level_error,
7445          'A user or role named "GSMUSER" found in the database.',
7446          'A user or role named "GSMUSER" found in the database.',
7447          '"GSMUSER" user or role must be dropped prior to upgrading.',
7448           c_dbua_detail_type_text,
7449          'To drop the role "GSMUSER", use the command:'
7450          || ' DROP ROLE GSMUSER' || ', and To drop the user "GSMUSER"'
7451          || ' use the command: DROP USER GSMUSER CASCADE',
7452          c_dbua_fixup_type_manual,
7453          c_dbua_fixup_stage_pre );
7454      ELSE
7455        result_txt := GSMUSER_USER_PRESENT_gethelp(c_help_overview);
7456      END IF;
7457      IF pOutputFixupScripts THEN
7458        genFixup ('GSMUSER_USER_PRESENT');
7459      END IF;
7460      RETURN c_status_failure;
7461     END IF;
7462  END GSMUSER_USER_PRESENT_check;
7463  
7464  FUNCTION GSMUSER_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7465  IS
7466  BEGIN
7467    IF HelpType = c_help_overview THEN
7468      return 'ERROR: --> A user or role with the name "GSMUSER" found in the database.' || crlf
7469        || crlf || '     This is an Oracle defined user.'
7470        || crlf || '     You must drop this user or role prior to upgrading.';
7471    ELSIF HelpType = c_help_fixup THEN
7472      return 'The GSMUSER role or user must be dropped prior to upgrading.';
7473    END IF;
7474  END GSMUSER_USER_PRESENT_gethelp;
7475  --
7476  -- Fixup (Procedure and function)
7477  --
7478  PROCEDURE GSMUSER_USER_PRESENT_fixup
7479  IS
7480    result  VARCHAR2(1000);
7481    status  NUMBER;
7482    tSqlcode NUMBER;
7483  BEGIN
7484    -- Call fixup and throw away the result
7485    status := GSMUSER_USER_PRESENT_fixup (result, tSqlcode);
7486  END GSMUSER_USER_PRESENT_fixup;
7487  
7488  FUNCTION GSMUSER_USER_PRESENT_fixup (
7489           result_txt IN OUT VARCHAR2,
7490           pSqlcode    IN OUT NUMBER) RETURN number
7491  IS
7492  BEGIN
7493    result_txt := GSMUSER_USER_PRESENT_gethelp(c_help_overview);
7494    pSqlcode := 0;
7495    return c_fixup_status_info;
7496  END GSMUSER_USER_PRESENT_fixup;
7497  
7498  -- *****************************************************************
7499  --     GSMADM_INT_PRESENT Section
7500  -- *****************************************************************
7501  FUNCTION GSMADM_INT_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7502  IS
7503    user_exists NUMBER := 1;
7504    t_null      CHAR(1);
7505    status      NUMBER;
7506  BEGIN
7507  
7508    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7509      return c_status_not_for_this_version;
7510    END IF;
7511  
7512    BEGIN
7513      EXECUTE IMMEDIATE
7514       'SELECT NULL FROM sys.user$ WHERE NAME = ''GSMADMIN_INTERNAL'''
7515        INTO t_null;
7516      EXCEPTION
7517        WHEN NO_DATA_FOUND then user_exists := 0;
7518    END;
7519  
7520    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
7521    THEN
7522      RETURN c_status_success;
7523    ELSE
7524      IF pOutputType = c_output_xml THEN
7525        result_txt:= genDBUAXMLCheck('GSMADMIN_INTERNAL',
7526          c_check_level_error,
7527          'A user or role named "GSMADMIN_INTERNAL" found in the database.',
7528          'A user or role named "GSMADMIN_INTERNAL" found in the database.',
7529          '"GSMADMIN_INTERNAL" user or role must be dropped prior to upgrading.',
7530           c_dbua_detail_type_text,
7531          'To drop the role "GSMADMIN_INTERNAL", use the command:'
7532          || ' DROP ROLE GSMADMIN_INTERNAL' || ', and To drop the user "GSMADMIN_INTERNAL"'
7533          || ' use the command: DROP USER GSMADMIN_INTERNAL CASCADE',
7534          c_dbua_fixup_type_manual,
7535          c_dbua_fixup_stage_pre );
7536      ELSE
7537        result_txt := GSMADM_INT_PRESENT_gethelp(c_help_overview);
7538      END IF;
7539      IF pOutputFixupScripts THEN
7540        genFixup ('GSMADM_INT_PRESENT');
7541      END IF;
7542      RETURN c_status_failure;
7543     END IF;
7544  END GSMADM_INT_PRESENT_check;
7545  
7546  FUNCTION GSMADM_INT_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7547  IS
7548  BEGIN
7549    IF HelpType = c_help_overview THEN
7550      return 'ERROR: --> A user or role with the name "GSMADMIN_INTERNAL" found in the database.' || crlf
7551        || crlf || '     This is an Oracle defined user.'
7552        || crlf || '     You must drop this user or role prior to upgrading.';
7553    ELSIF HelpType = c_help_fixup THEN
7554      return 'The GSMADMIN_INTERNAL role or user must be dropped prior to upgrading.';
7555    END IF;
7556  END GSMADM_INT_PRESENT_gethelp;
7557  --
7558  -- Fixup (Procedure and function)
7559  --
7560  PROCEDURE GSMADM_INT_PRESENT_fixup
7561  IS
7562    result  VARCHAR2(1000);
7563    status  NUMBER;
7564    tSqlcode NUMBER;
7565  BEGIN
7566    -- Call fixup and throw away the result
7567    status := GSMADM_INT_PRESENT_fixup (result, tSqlcode);
7568  END GSMADM_INT_PRESENT_fixup;
7569  
7570  FUNCTION GSMADM_INT_PRESENT_fixup (
7571           result_txt IN OUT VARCHAR2,
7572           pSqlcode    IN OUT NUMBER) RETURN number
7573  IS
7574  BEGIN
7575    result_txt := GSMADM_INT_PRESENT_gethelp(c_help_overview);
7576    pSqlcode := 0;
7577    return c_fixup_status_info;
7578  END GSMADM_INT_PRESENT_fixup;
7579  
7580  -- *****************************************************************
7581  --     GSMUSER_ROLE_PRESENT Section
7582  -- *****************************************************************
7583  FUNCTION GSMUSER_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7584  IS
7585    role_exists NUMBER := 1;
7586    t_null      CHAR(1);
7587    status      NUMBER;
7588  BEGIN
7589  
7590    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7591      return c_status_not_for_this_version;
7592    END IF;
7593  
7594    BEGIN
7595      EXECUTE IMMEDIATE
7596       'SELECT NULL FROM sys.user$ WHERE NAME = ''GSMUSER_ROLE'''
7597        INTO t_null;
7598      EXCEPTION
7599        WHEN NO_DATA_FOUND then role_exists := 0;
7600    END;
7601  
7602    IF (role_exists = 0 AND pDBGFailCheck = FALSE)
7603    THEN
7604      RETURN c_status_success;
7605    ELSE
7606      IF pOutputType = c_output_xml THEN
7607        result_txt:= genDBUAXMLCheck('GSMUSER_ROLE',
7608          c_check_level_error,
7609          'A user or role named "GSMUSER_ROLE" found in the database.',
7610          'A user or role named "GSMUSER_ROLE" found in the database.',
7611          '"GSMUSER_ROLE" user or role must be dropped prior to upgrading.',
7612           c_dbua_detail_type_text,
7613          'To drop the role "GSMUSER_ROLE", use the command:'
7614          || ' DROP ROLE GSMUSER_ROLE' || ', and To drop the user "GSMUSER_ROLE"'
7615          || ' use the command: DROP USER GSMUSER_ROLE CASCADE',
7616          c_dbua_fixup_type_manual,
7617          c_dbua_fixup_stage_pre );
7618      ELSE
7619        result_txt := GSMUSER_ROLE_PRESENT_gethelp(c_help_overview);
7620      END IF;
7621      IF pOutputFixupScripts THEN
7622        genFixup ('GSMUSER_ROLE_PRESENT');
7623      END IF;
7624      RETURN c_status_failure;
7625     END IF;
7626  END GSMUSER_ROLE_PRESENT_check;
7627  
7628  FUNCTION GSMUSER_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7629  IS
7630  BEGIN
7631    IF HelpType = c_help_overview THEN
7632      return 'ERROR: --> A user or role with the name "GSMUSER_ROLE" found in the database.' || crlf
7633        || crlf || '     This is an Oracle defined role.'
7634        || crlf || '     You must drop this user or role prior to upgrading.';
7635    ELSIF HelpType = c_help_fixup THEN
7636      return 'The GSMUSER_ROLE user or role must be dropped prior to upgrading.';
7637    END IF;
7638  END GSMUSER_ROLE_PRESENT_gethelp;
7639  --
7640  -- Fixup (Procedure and function)
7641  --
7642  PROCEDURE GSMUSER_ROLE_PRESENT_fixup
7643  IS
7644    result  VARCHAR2(1000);
7645    status  NUMBER;
7646    tSqlcode NUMBER;
7647  BEGIN
7648    -- Call fixup and throw away the result
7649    status := GSMUSER_ROLE_PRESENT_fixup (result, tSqlcode);
7650  END GSMUSER_ROLE_PRESENT_fixup;
7651  
7652  FUNCTION GSMUSER_ROLE_PRESENT_fixup (
7653           result_txt IN OUT VARCHAR2,
7654           pSqlcode    IN OUT NUMBER) RETURN number
7655  IS
7656  BEGIN
7657    result_txt := GSMUSER_ROLE_PRESENT_gethelp(c_help_overview);
7658    pSqlcode := 0;
7659    return c_fixup_status_info;
7660  END GSMUSER_ROLE_PRESENT_fixup;
7661  
7662  -- *****************************************************************
7663  --     GSM_PAD_ROLE_PRESENT Section
7664  -- *****************************************************************
7665  FUNCTION GSM_PAD_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7666  IS
7667    role_exists NUMBER := 1;
7668    t_null      CHAR(1);
7669    status      NUMBER;
7670  BEGIN
7671  
7672    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7673      return c_status_not_for_this_version;
7674    END IF;
7675  
7676    BEGIN
7677      EXECUTE IMMEDIATE
7678       'SELECT NULL FROM sys.user$ WHERE NAME = ''GSM_POOLADMIN_ROLE'''
7679        INTO t_null;
7680      EXCEPTION
7681        WHEN NO_DATA_FOUND then role_exists := 0;
7682    END;
7683  
7684    IF (role_exists = 0 AND pDBGFailCheck = FALSE)
7685    THEN
7686      RETURN c_status_success;
7687    ELSE
7688      IF pOutputType = c_output_xml THEN
7689        result_txt:= genDBUAXMLCheck('GSM_POOLADMIN_ROLE',
7690          c_check_level_error,
7691          'A user or role named "GSM_POOLADMIN_ROLE" found in the database.',
7692          'A user or role named "GSM_POOLADMIN_ROLE" found in the database.',
7693          '"GSM_POOLADMIN_ROLE" user or role must be dropped prior to upgrading.',
7694           c_dbua_detail_type_text,
7695          'To drop the role "GSM_POOLADMIN_ROLE", use the command:'
7696          || ' DROP ROLE GSM_POOLADMIN_ROLE' || ', and To drop the user "GSM_POOLADMIN_ROLE"'
7697          || ' use the command: DROP USER GSM_POOLADMIN_ROLE CASCADE',
7698          c_dbua_fixup_type_manual,
7699          c_dbua_fixup_stage_pre );
7700      ELSE
7701        result_txt := GSM_PAD_ROLE_PRESENT_gethelp(c_help_overview);
7702      END IF;
7703      IF pOutputFixupScripts THEN
7704        genFixup ('GSM_PAD_ROLE_PRESENT');
7705      END IF;
7706      RETURN c_status_failure;
7707     END IF;
7708  END GSM_PAD_ROLE_PRESENT_check;
7709  
7710  FUNCTION GSM_PAD_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7711  IS
7712  BEGIN
7713    IF HelpType = c_help_overview THEN
7714      return 'ERROR: --> A user or role with the name "GSM_POOLADMIN_ROLE" found in the database.' || crlf
7715        || crlf || '     This is an Oracle defined role.'
7716        || crlf || '     You must drop this user or role prior to upgrading.';
7717    ELSIF HelpType = c_help_fixup THEN
7718      return 'The GSM_POOLADMIN_ROLE user or role must be dropped prior to upgrading.';
7719    END IF;
7720  END GSM_PAD_ROLE_PRESENT_gethelp;
7721  --
7722  -- Fixup (Procedure and function)
7723  --
7724  PROCEDURE GSM_PAD_ROLE_PRESENT_fixup
7725  IS
7726    result  VARCHAR2(1000);
7727    status  NUMBER;
7728    tSqlcode NUMBER;
7729  BEGIN
7730    -- Call fixup and throw away the result
7731    status := GSM_PAD_ROLE_PRESENT_fixup (result, tSqlcode);
7732  END GSM_PAD_ROLE_PRESENT_fixup;
7733  
7734  FUNCTION GSM_PAD_ROLE_PRESENT_fixup (
7735           result_txt IN OUT VARCHAR2,
7736           pSqlcode    IN OUT NUMBER) RETURN number
7737  IS
7738  BEGIN
7739    result_txt := GSM_PAD_ROLE_PRESENT_gethelp(c_help_overview);
7740    pSqlcode := 0;
7741    return c_fixup_status_info;
7742  END GSM_PAD_ROLE_PRESENT_fixup;
7743  
7744  -- *****************************************************************
7745  --     GSMADMIN_ROLE_PRESENT Section
7746  -- *****************************************************************
7747  FUNCTION GSMADMIN_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7748  IS
7749    role_exists NUMBER := 1;
7750    t_null      CHAR(1);
7751    status      NUMBER;
7752  BEGIN
7753  
7754    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7755      return c_status_not_for_this_version;
7756    END IF;
7757  
7758    BEGIN
7759      EXECUTE IMMEDIATE
7760       'SELECT NULL FROM sys.user$ WHERE NAME = ''GSMADMIN_ROLE'''
7761        INTO t_null;
7762      EXCEPTION
7763        WHEN NO_DATA_FOUND then role_exists := 0;
7764    END;
7765  
7766    IF (role_exists = 0 AND pDBGFailCheck = FALSE)
7767    THEN
7768      RETURN c_status_success;
7769    ELSE
7770      IF pOutputType = c_output_xml THEN
7771        result_txt:= genDBUAXMLCheck('GSMADMIN_ROLE',
7772          c_check_level_error,
7773          'A user or role named "GSMADMIN_ROLE" found in the database.',
7774          'A user or role named "GSMADMIN_ROLE" found in the database.',
7775          '"GSMADMIN_ROLE" user or role must be dropped prior to upgrading.',
7776           c_dbua_detail_type_text,
7777          'To drop the role "GSMADMIN_ROLE", use the command:'
7778          || ' DROP ROLE GSMADMIN_ROLE' || ', and To drop the user "GSMADMIN_ROLE"'
7779          || ' use the command: DROP USER GSMADMIN_ROLE CASCADE',
7780          c_dbua_fixup_type_manual,
7781          c_dbua_fixup_stage_pre );
7782      ELSE
7783        result_txt := GSMADMIN_ROLE_PRESENT_gethelp(c_help_overview);
7784      END IF;
7785      IF pOutputFixupScripts THEN
7786        genFixup ('GSMADMIN_ROLE_PRESENT');
7787      END IF;
7788      RETURN c_status_failure;
7789     END IF;
7790  END GSMADMIN_ROLE_PRESENT_check;
7791  
7792  FUNCTION GSMADMIN_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7793  IS
7794  BEGIN
7795    IF HelpType = c_help_overview THEN
7796      return 'ERROR: --> A user or role with the name "GSMADMIN_ROLE" found in the database.' || crlf
7797        || crlf || '     This is an Oracle defined role.'
7798        || crlf || '     You must drop this user or role prior to upgrading.';
7799    ELSIF HelpType = c_help_fixup THEN
7800      return 'The GSMADMIN_ROLE user or role must be dropped prior to upgrading.';
7801    END IF;
7802  END GSMADMIN_ROLE_PRESENT_gethelp;
7803  --
7804  -- Fixup (Procedure and function)
7805  --
7806  PROCEDURE GSMADMIN_ROLE_PRESENT_fixup
7807  IS
7808    result  VARCHAR2(1000);
7809    status  NUMBER;
7810    tSqlcode NUMBER;
7811  BEGIN
7812    -- Call fixup and throw away the result
7813    status := GSMADMIN_ROLE_PRESENT_fixup (result, tSqlcode);
7814  END GSMADMIN_ROLE_PRESENT_fixup;
7815  
7816  FUNCTION GSMADMIN_ROLE_PRESENT_fixup (
7817           result_txt IN OUT VARCHAR2,
7818           pSqlcode    IN OUT NUMBER) RETURN number
7819  IS
7820  BEGIN
7821    result_txt := GSMADMIN_ROLE_PRESENT_gethelp(c_help_overview);
7822    pSqlcode := 0;
7823    return c_fixup_status_info;
7824  END GSMADMIN_ROLE_PRESENT_fixup;
7825  
7826  -- *****************************************************************
7827  --     GDS_CT_ROLE_PRESENT Section
7828  -- *****************************************************************
7829  FUNCTION GDS_CT_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7830  IS
7831    role_exists NUMBER := 1;
7832    t_null      CHAR(1);
7833    status      NUMBER;
7834  BEGIN
7835  
7836    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
7837      return c_status_not_for_this_version;
7838    END IF;
7839  
7840    BEGIN
7841      EXECUTE IMMEDIATE
7842       'SELECT NULL FROM sys.user$ WHERE NAME = ''GDS_CATALOG_SELECT'''
7843        INTO t_null;
7844      EXCEPTION
7845        WHEN NO_DATA_FOUND then role_exists := 0;
7846    END;
7847  
7848    IF (role_exists = 0 AND pDBGFailCheck = FALSE)
7849    THEN
7850      RETURN c_status_success;
7851    ELSE
7852      IF pOutputType = c_output_xml THEN
7853        result_txt:= genDBUAXMLCheck('GDS_CATALOG_SELECT',
7854          c_check_level_error,
7855          'A user or role named "GDS_CATALOG_SELECT" found in the database.',
7856          'A user or role named "GDS_CATALOG_SELECT" found in the database.',
7857          '"GDS_CATALOG_SELECT" user or role must be dropped prior to upgrading.',
7858           c_dbua_detail_type_text,
7859          'To drop the role "GDS_CATALOG_SELECT", use the command:'
7860          || ' DROP ROLE GDS_CATALOG_SELECT' || ', and To drop the user "GDS_CATALOG_SELECT"'
7861          || ' use the command: DROP USER GDS_CATALOG_SELECT CASCADE',
7862          c_dbua_fixup_type_manual,
7863          c_dbua_fixup_stage_pre );
7864      ELSE
7865        result_txt := GDS_CT_ROLE_PRESENT_gethelp(c_help_overview);
7866      END IF;
7867      IF pOutputFixupScripts THEN
7868        genFixup ('GDS_CT_ROLE_PRESENT');
7869      END IF;
7870      RETURN c_status_failure;
7871     END IF;
7872  END GDS_CT_ROLE_PRESENT_check;
7873  
7874  FUNCTION GDS_CT_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7875  IS
7876  BEGIN
7877    IF HelpType = c_help_overview THEN
7878      return 'ERROR: --> A user or role with the name "GDS_CATALOG_SELECT" found in the database.' || crlf
7879        || crlf || '     This is an Oracle defined role.'
7880        || crlf || '     You must drop this user or role prior to upgrading.';
7881    ELSIF HelpType = c_help_fixup THEN
7882      return 'The GDS_CATALOG_SELECT user or role must be dropped prior to upgrading.';
7883    END IF;
7884  END GDS_CT_ROLE_PRESENT_gethelp;
7885  --
7886  -- Fixup (Procedure and function)
7887  --
7888  PROCEDURE GDS_CT_ROLE_PRESENT_fixup
7889  IS
7890    result  VARCHAR2(1000);
7891    status  NUMBER;
7892    tSqlcode NUMBER;
7893  BEGIN
7894    -- Call fixup and throw away the result
7895    status := GDS_CT_ROLE_PRESENT_fixup (result, tSqlcode);
7896  END GDS_CT_ROLE_PRESENT_fixup;
7897  
7898  FUNCTION GDS_CT_ROLE_PRESENT_fixup (
7899           result_txt IN OUT VARCHAR2,
7900           pSqlcode    IN OUT NUMBER) RETURN number
7901  IS
7902  BEGIN
7903    result_txt := GDS_CT_ROLE_PRESENT_gethelp(c_help_overview);
7904    pSqlcode := 0;
7905    return c_fixup_status_info;
7906  END GDS_CT_ROLE_PRESENT_fixup;
7907  
7908  
7909  -- *****************************************************************
7910  --     AWR_DBIDS_PRESENT Section
7911  -- *****************************************************************
7912  FUNCTION AWR_DBIDS_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
7913  IS
7914    roll_exists NUMBER := 1;
7915    t_null      CHAR(1);
7916    status      NUMBER;
7917  BEGIN
7918    -- Perform this check only if db version is pre-12
7919    IF (db_n_version NOT IN (102, 111, 112))
7920    THEN
7921      RETURN c_status_not_for_this_version;
7922    END IF;
7923  
7924    BEGIN
7925      EXECUTE IMMEDIATE
7926       'SELECT NULL FROM sys.wrm$_wr_control WHERE dbid != (SELECT dbid FROM v$database)'
7927        INTO t_null;
7928      EXCEPTION
7929        WHEN NO_DATA_FOUND then roll_exists := 0;
7930    END;
7931  
7932    IF (roll_exists = 0 AND pDBGFailCheck = FALSE)
7933    THEN
7934      RETURN c_status_success;
7935    ELSE
7936      IF pOutputType = c_output_xml THEN
7937        result_txt:= genDBUAXMLCheck('AWR_DBIDS_PRESENT',
7938          c_check_level_warning,
7939          'Inactive DBIDs found in AWR',
7940          'Inactive DBIDs found in AWR.',
7941          'The inactive DBIDs in AWR may need additional updating after ' ||
7942          'upgrading.',
7943           c_dbua_detail_type_text,
7944          'To update the inactive DBIDs in AWR, run the script awrupd12.sql as SYSDBA',
7945          c_dbua_fixup_type_manual,
7946          c_dbua_fixup_stage_post );
7947      ELSE
7948        result_txt := AWR_DBIDS_PRESENT_gethelp(c_help_overview);
7949      END IF;
7950      IF pOutputFixupScripts THEN
7951        genFixup ('AWR_DBIDS_PRESENT');
7952      END IF;
7953      RETURN c_status_failure;
7954     END IF;
7955  END AWR_DBIDS_PRESENT_check;
7956  
7957  FUNCTION AWR_DBIDS_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
7958  IS
7959  BEGIN
7960    IF HelpType = c_help_overview THEN
7961      return 'WARNING: --> Inactive DBIDs found in AWR' || crlf
7962        || crlf || '     AWR contains inactive DBIDs which may need additional updating after' || crlf || '     upgrading.';
7963    ELSIF HelpType = c_help_fixup THEN
7964      return 'The inactive DBIDs in AWR may need additional updating after upgrading.';
7965    END IF;
7966  END AWR_DBIDS_PRESENT_gethelp;
7967  
7968  --
7969  -- Fixup (Procedure and function)
7970  --
7971  PROCEDURE AWR_DBIDS_PRESENT_fixup
7972  IS
7973    result  VARCHAR2(1000);
7974    status  NUMBER;
7975    tSqlcode NUMBER;
7976  BEGIN
7977    -- Call fixup and throw away the result
7978    status := AWR_DBIDS_PRESENT_fixup (result, tSqlcode);
7979  END AWR_DBIDS_PRESENT_fixup;
7980  
7981  FUNCTION AWR_DBIDS_PRESENT_fixup (
7982           result_txt IN OUT VARCHAR2,
7983           pSqlcode    IN OUT NUMBER) RETURN number
7984  IS
7985  BEGIN
7986    result_txt := AWR_DBIDS_PRESENT_gethelp(c_help_overview);
7987    pSqlcode := 0;
7988    return c_fixup_status_info;
7989  END AWR_DBIDS_PRESENT_fixup;
7990  
7991  -- *****************************************************************
7992  --     compatible_parameter Section
7993  -- *****************************************************************
7994  FUNCTION compatible_parameter_check (result_txt OUT VARCHAR2) RETURN number
7995  IS
7996    status      NUMBER;
7997  BEGIN
7998    --
7999    -- If we have the correct min compat and not debug and not XML
8000    -- return success.
8001    --
8002    IF ((db_compat_majorver >= c_compat_min_num AND pDBGFailCheck = FALSE)  OR
8003        pOutputType = c_output_xml)  THEN
8004      RETURN c_status_success;
8005    END IF;
8006  
8007    result_txt := compatible_parameter_gethelp(c_help_overview);
8008    IF pOutputFixupScripts THEN
8009      genFixup ('COMPATIBLE_PARAMETER');
8010    END IF;
8011    RETURN c_status_failure;
8012  END compatible_parameter_check;
8013  
8014  FUNCTION compatible_parameter_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8015  IS
8016    result_txt VARCHAR2(1500);
8017  BEGIN
8018    IF HelpType = c_help_overview THEN
8019      result_txt := 'ERROR: --> Compatible set too low' || crlf
8020        || crlf || '     "compatible" currently set at ' || db_compat ||    ' and must'
8021        || crlf || '     be set to at least '           || c_compat_min || ' prior to upgrading the database.';
8022  
8023      IF db_n_version = 102 THEN
8024        result_txt := result_txt
8025            || crlf || '     Do not make this change until you are ready to upgrade'
8026            || crlf || '     because a downgrade back to 10.2 is not possible once compatible'
8027            || crlf || '     has been raised.';
8028      END IF;
8029      result_txt := result_txt
8030         || crlf || crlf || '     Update your init.ora or spfile to make this change.';
8031    ELSIF HelpType = c_help_fixup THEN
8032      result_txt := '"compatible" parameter must be increased manually prior to upgrade.';
8033    END IF;
8034    RETURN result_txt;
8035  END compatible_parameter_gethelp;
8036  --
8037  -- Fixup (Procedure and function)
8038  --
8039  PROCEDURE compatible_parameter_fixup
8040  IS
8041    result  VARCHAR2(1000);
8042    status  NUMBER;
8043    tSqlcode NUMBER;
8044  BEGIN
8045    -- Call fixup and throw away the result
8046    status := compatible_parameter_fixup (result, tSqlcode);
8047  END compatible_parameter_fixup;
8048  
8049  FUNCTION compatible_parameter_fixup (
8050           result_txt IN OUT VARCHAR2,
8051           pSqlcode    IN OUT NUMBER) RETURN number
8052  IS
8053  BEGIN
8054     result_txt := compatible_parameter_gethelp(c_help_overview);
8055     pSqlcode := 0;
8056     return c_fixup_status_info;
8057  END compatible_parameter_fixup;
8058  
8059  -- *****************************************************************
8060  --     DBMS_LDAP_DEPENDENCIES_EXIST Section
8061  -- *****************************************************************
8062  FUNCTION DBMS_LDAP_DEP_EXIST_check (result_txt OUT VARCHAR2) RETURN number
8063  IS
8064    t_null      CHAR(1);
8065    status      NUMBER := 0;
8066  BEGIN
8067  
8068    -- Bug 16213268
8069    -- This LDAP dependency check is ONLY required for upgrades from 10.2
8070    IF (db_n_version NOT IN (102) AND pDBGFailCheck = FALSE) THEN
8071      -- Only valid for 10.2 upgrades
8072      return c_status_not_for_this_version;
8073    END IF;
8074  
8075    BEGIN
8076      EXECUTE IMMEDIATE 'SELECT NULL FROM dba_dependencies
8077          WHERE referenced_name IN (''DBMS_LDAP'')
8078          AND owner NOT IN (''SYS'',''PUBLIC'',''ORD_PLUGINS'')
8079          AND rownum <= 1'
8080      INTO t_null;
8081        status := 1;
8082      EXCEPTION
8083        WHEN NO_DATA_FOUND THEN NULL;
8084    END;
8085  
8086    IF (status = 0 AND pDBGFailCheck = FALSE)
8087    THEN
8088      RETURN c_status_success;
8089    ELSE
8090      IF pOutputType = c_output_xml THEN
8091        result_txt:= genDBUAXMLCheck('DBMS_LDAP_DEPENDENCIES_EXIST',
8092          c_check_level_warning,
8093          'Database contains schemas with objects dependent on DBMS_LDAP package.'
8094            || ' Refer to the Upgrade Guide for instructions to configure Network ACLs.',
8095          'Database contains schemas with objects dependent on DBMS_LDAP package.',
8096          'Refer to the Upgrade Guide for instructions to configure Network ACLs.',
8097           c_dbua_detail_type_sql,
8098          htmlentities('SELECT name FROM dba_dependencies WHERE'
8099             || ' referenced_name IN (''DBMS_LDAP'') '
8100             || ' AND owner NOT IN (''SYS'',''PUBLIC'',''ORD_PLUGINS'')'
8101             || ' AND rownum <= 1'),
8102          c_dbua_fixup_type_auto,
8103          c_dbua_fixup_stage_pre );
8104      ELSE
8105        result_txt := DBMS_LDAP_DEP_EXIST_gethelp(c_help_overview);
8106      END IF;
8107      IF pOutputFixupScripts THEN
8108        genFixup ('DBMS_LDAP_DEPENDENCIES_EXIST');
8109      END IF;
8110      RETURN c_status_failure;
8111     END IF;
8112  END DBMS_LDAP_DEP_EXIST_check;
8113  
8114  FUNCTION DBMS_LDAP_DEP_EXIST_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8115  IS
8116    tmp_cursor   cursor_t;
8117    tmp_varchar1 VARCHAR2(512);
8118    tstr         VARCHAR2(1000);
8119    result_txt   VARCHAR2(1500);
8120  BEGIN
8121    IF HelpType = c_help_overview THEN
8122      result_txt := 'WARNING: --> Existing DBMS_LDAP dependent objects' || crlf
8123        || crlf || '     Database contains schemas with objects dependent on DBMS_LDAP package.'
8124        || crlf || '     Refer to the Upgrade Guide for instructions to configure Network ACLs.';
8125      tstr := '';
8126      OPEN tmp_cursor FOR
8127        'SELECT DISTINCT owner FROM DBA_DEPENDENCIES
8128           WHERE referenced_name IN (''DBMS_LDAP'')
8129               AND owner NOT IN (''SYS'',''PUBLIC'',''ORDPLUGINS'')';
8130      LOOP
8131        FETCH tmp_cursor INTO tmp_varchar1;
8132        EXIT WHEN tmp_cursor%NOTFOUND;
8133        tstr := tstr || crlf || '     USER ' || tmp_varchar1 || ' has dependent objects.';
8134      END LOOP;
8135      IF (tstr IS NOT NULL OR tstr != '' ) THEN
8136        result_txt := result_txt || tstr;
8137      END IF;
8138      CLOSE tmp_cursor;
8139    ELSIF HelpType = c_help_fixup THEN
8140      result_txt := 'Network Objects must be reviewed manually.';
8141    END IF;
8142    RETURN result_txt;
8143  END DBMS_LDAP_DEP_EXIST_gethelp;
8144  --
8145  -- Fixup (Procedure and function)
8146  --
8147  PROCEDURE DBMS_LDAP_DEP_EXIST_fixup
8148  IS
8149    result  VARCHAR2(1000);
8150    status  NUMBER;
8151    tSqlcode NUMBER;
8152  BEGIN
8153    -- Call fixup and throw away the result
8154    status := DBMS_LDAP_DEP_EXIST_fixup (result, tSqlcode);
8155  END DBMS_LDAP_DEP_EXIST_fixup;
8156  
8157  FUNCTION DBMS_LDAP_DEP_EXIST_fixup (
8158           result_txt IN OUT VARCHAR2,
8159           pSqlcode    IN OUT NUMBER) RETURN number
8160  IS
8161  BEGIN
8162     result_txt := DBMS_LDAP_DEP_EXIST_gethelp(c_help_overview);
8163     return c_fixup_status_info;
8164  END DBMS_LDAP_DEP_EXIST_fixup;
8165  
8166  -- *****************************************************************
8167  --     default_process_count Section
8168  -- *****************************************************************
8169  FUNCTION default_process_count_check (result_txt OUT VARCHAR2) RETURN number
8170  IS
8171    processes NUMBER;
8172    status    NUMBER;
8173  BEGIN
8174    EXECUTE IMMEDIATE 'SELECT value FROM V$PARAMETER WHERE NAME=''processes'''
8175      INTO processes;
8176    --
8177    -- Right number of processes (and not debug) or XML
8178    -- output, return success
8179    --
8180    IF ( (processes >= c_max_processes AND  pDBGFailCheck = FALSE) OR
8181        pOutputType = c_output_xml ) THEN
8182      RETURN c_status_success;
8183    END IF;
8184  
8185    result_txt := default_process_count_gethelp(c_help_overview);
8186  
8187    IF pOutputFixupScripts THEN
8188      genFixup ('DEFAULT_PROCESS_COUNT');
8189    END IF;
8190    RETURN c_status_failure;
8191  END default_process_count_check;
8192  
8193  FUNCTION default_process_count_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8194  IS
8195    processes NUMBER;
8196  BEGIN
8197    IF HelpType = c_help_overview THEN
8198      EXECUTE IMMEDIATE 'SELECT value FROM V$PARAMETER WHERE NAME=''processes'''
8199        INTO processes;
8200      return 'WARNING: --> Process Count may be too low' || crlf
8201       || crlf || '     Database has a maximum process count of '
8202                      || processes || ' which is lower than the'
8203       || crlf || '     default value of ' || c_max_processes || ' for this release.'
8204       || crlf || '     You should update your processes value prior to the upgrade'
8205       || crlf || '     to a value of at least ' || c_max_processes || '.'
8206       || crlf || '     For example:'
8207       || crlf || '        ALTER SYSTEM SET PROCESSES=' || c_max_processes || ' SCOPE=SPFILE'
8208       || crlf || '     or update your init.ora file.';
8209    ELSIF HelpType = c_help_fixup THEN
8210      return 'Review and increase if needed, your PROCESSES value.';
8211    END IF;
8212  END default_process_count_gethelp;
8213  --
8214  -- Fixup (Procedure and function)
8215  --
8216  PROCEDURE default_process_count_fixup
8217  IS
8218    result  VARCHAR2(1000);
8219    status  NUMBER;
8220    tSqlcode NUMBER;
8221  BEGIN
8222    -- Call fixup and throw away the result
8223    status := default_process_count_fixup (result, tSqlcode);
8224  END default_process_count_fixup;
8225  
8226  FUNCTION default_process_count_fixup (
8227           result_txt IN OUT VARCHAR2,
8228           pSqlcode    IN OUT NUMBER) RETURN number
8229  IS
8230  BEGIN
8231     result_txt := default_process_count_gethelp(c_help_overview);
8232     return c_fixup_status_info;
8233  END default_process_count_fixup;
8234  
8235  -- *****************************************************************
8236  --     DV_ENABLED Section
8237  -- *****************************************************************
8238  FUNCTION DV_ENABLED_check (result_txt OUT VARCHAR2) RETURN number
8239  IS
8240    t_null      CHAR(1);
8241    status      NUMBER;
8242  BEGIN
8243  
8244    IF (db_n_version IN (102,111,112) and pDBGFailCheck = FALSE) THEN
8245      -- 12.1 and above...
8246      return c_status_not_for_this_version;
8247    END IF;
8248  
8249    BEGIN
8250      EXECUTE IMMEDIATE 'SELECT NULL FROM sys.registry$ r, v$option o
8251           WHERE r.cid = ''DV'' and r.cname = o.parameter and
8252            o.value = ''TRUE'''
8253      INTO t_null;
8254      status := 1;
8255     EXCEPTION
8256        WHEN NO_DATA_FOUND THEN
8257          status := 0;
8258    END;
8259  
8260    IF (status = 0 and pDBGFailCheck = FALSE)
8261    THEN
8262      RETURN c_status_success;
8263    ELSE
8264      IF pOutputType = c_output_xml THEN
8265        result_txt:= genDBUAXMLCheck('DV_ENABLED',
8266          c_check_level_error,
8267          'Database Vault option is currently enabled. Database Vault must be manually disabled prior to upgrade'
8268           || ' and re-enabled after the upgrade.',
8269          'Database Vault option is enabled.',
8270          'Disable the Database Vault option prior to Upgrade',
8271           c_dbua_detail_type_sql,
8272           htmlentities ('SELECT r.cid FROM sys.registry$ r, v$option o '
8273              || 'WHERE r.cid = ''DV'' and r.cname = o.parameter and '
8274              || 'o.value = ''TRUE'''),
8275          c_dbua_fixup_type_manual,
8276          c_dbua_fixup_stage_pre );
8277      ELSE
8278        result_txt := DV_ENABLED_gethelp(c_help_overview);
8279      END IF;
8280      IF pOutputFixupScripts THEN
8281        genFixup ('DV_ENABLED');
8282      END IF;
8283      RETURN c_status_failure;
8284    END IF;
8285  END;
8286  
8287  FUNCTION DV_ENABLED_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8288  IS
8289  BEGIN
8290    IF HelpType = c_help_overview THEN
8291      return 'WARNING: --> Oracle Database Vault is enabled in this database' || crlf
8292        || crlf || '     Starting with release 12.1, it is REQUIRED that Database Vault be'
8293        || crlf || '     disabled prior to database upgrade. To disable Database Vault, log'
8294        || crlf || '     in as Database Vault administrator and run this operation:'
8295        || crlf || '     DVSYS.DBMS_MACAMD.DISABLE_DV()';
8296    ELSIF HelpType = c_help_fixup THEN
8297      return 'Database Vault must be disabled prior to upgrading.';
8298    END IF;
8299  END DV_ENABLED_gethelp;
8300  --
8301  -- Fixup (Procedure and function)
8302  --
8303  PROCEDURE DV_ENABLED_fixup
8304  IS
8305    result  VARCHAR2(1500);
8306    status  NUMBER;
8307    tSqlcode NUMBER;
8308  BEGIN
8309    -- Call fixup and throw away the result
8310    status := DV_ENABLED_fixup (result, tSqlcode);
8311  END DV_ENABLED_fixup;
8312  
8313  FUNCTION DV_ENABLED_fixup (
8314           result_txt IN OUT VARCHAR2,
8315           pSqlcode    IN OUT NUMBER) RETURN number
8316  IS
8317  BEGIN
8318    -- Dump out the same thing we give for help
8319    result_txt := DV_ENABLED_gethelp(c_help_overview);
8320    return c_fixup_status_info;
8321  END DV_ENABLED_fixup;
8322  
8323  -- *****************************************************************
8324  --     EM_PRESENT Section
8325  -- *****************************************************************
8326  FUNCTION EM_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
8327  IS
8328    t_null      CHAR(1);
8329    status      NUMBER;
8330  BEGIN
8331  
8332    BEGIN
8333      EXECUTE IMMEDIATE  'SELECT NULL FROM sys.registry$ WHERE cid=''EM''
8334        AND status NOT IN (99,8)'
8335      INTO  t_null;
8336        status := 1;
8337      EXCEPTION
8338        WHEN NO_DATA_FOUND THEN
8339        status := 0;
8340    END;
8341  
8342    IF (status = 0 and pDBGFailCheck = FALSE)
8343    THEN
8344      -- EM not here.
8345      RETURN c_status_success;
8346    ELSE
8347      IF pOutputType = c_output_xml THEN
8348        result_txt:= genDBUAXMLCheck('EM_PRESENT',
8349          c_check_level_info,
8350          'Enterprise Manager Database Control repository exists in the database.'
8351           || ' In 12c, the database is managed by MiniGC.'
8352           || ' The Enterprise Manager database Control Repository is removed during the upgrade',
8353          'Enterprise Manager Database Control repository is removed',
8354          'Enterprise Manager data can be migrated.',
8355           c_dbua_detail_type_text,
8356          'The EM Database data can be migrated/removed prior to upgrade.',
8357          c_dbua_fixup_type_auto,
8358          c_dbua_fixup_stage_pre );
8359      ELSE
8360        result_txt := EM_PRESENT_gethelp(c_help_overview);
8361      END IF;
8362      IF pOutputFixupScripts THEN
8363        genFixup ('EM_PRESENT');
8364      END IF;
8365     RETURN c_status_failure;
8366     END IF;
8367  END;
8368  
8369  FUNCTION EM_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8370  IS
8371  BEGIN
8372    IF HelpType = c_help_overview THEN
8373      return 'WARNING: --> Enterprise Manager Database Control repository found in the database' || crlf
8374             || crlf || '     In Oracle Database 12c, Database Control is removed during'
8375             || crlf || '     the upgrade. To save time during the Upgrade, this action'
8376             || crlf || '     can be done prior to upgrading using the following steps after'
8377             || crlf || '     copying rdbms/admin/emremove.sql from the new Oracle home'
8378             || crlf || '   - Stop EM Database Control:'
8379             || crlf || '    $> emctl stop dbconsole'
8380             || crlf
8381             || crlf || '   - Connect to the Database using the SYS account AS SYSDBA:'
8382             || crlf
8383             || crlf || '   SET ECHO ON;'
8384             || crlf || '   SET SERVEROUTPUT ON;'
8385             || crlf || '   @emremove.sql'
8386             || crlf || '     Without the set echo and serveroutput commands you will not '
8387             || crlf || '     be able to follow the progress of the script.';
8388    ELSIF HelpType = c_help_fixup THEN
8389      return 'Execute emremove.sql prior to upgrade.';
8390    END IF;
8391  END;
8392  --
8393  -- Fixup (Procedure and function)
8394  --
8395  PROCEDURE EM_PRESENT_fixup
8396  IS
8397    result  VARCHAR2(1000);
8398    status  NUMBER;
8399    tSqlcode NUMBER;
8400  BEGIN
8401    -- Call fixup and throw away the result
8402    status := EM_PRESENT_fixup (result, tSqlcode);
8403  END;
8404  FUNCTION EM_PRESENT_fixup (
8405           result_txt IN OUT VARCHAR2,
8406           pSqlcode    IN OUT NUMBER) RETURN number
8407  IS
8408  BEGIN
8409    -- The removal is done during the upgrade.
8410    -- Dump out the same thing we give for help
8411    result_txt := EM_PRESENT_gethelp(c_help_overview);
8412    return c_fixup_status_info;
8413  END;
8414  
8415  -- *****************************************************************
8416  --     ENABLED_INDEXES_TBL Section
8417  -- *****************************************************************
8418  FUNCTION ENABLED_INDEXES_TBL_check (result_txt OUT VARCHAR2) RETURN number
8419  IS
8420    status  NUMBER := 0;
8421    t_count   INTEGER;
8422  BEGIN
8423    --
8424    -- Check for pre-existing temporary table sys.enabled$indexes.
8425    -- If it exists, then warn the user to DROP SYS.ENABLED$INDEXES.
8426    --
8427    BEGIN
8428      EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM sys.enabled$indexes'
8429      INTO t_count;
8430      IF (t_count >= 0) THEN
8431        status := 1;
8432      END IF;
8433    EXCEPTION
8434      WHEN OTHERS THEN NULL;
8435    END;
8436  
8437    IF (status = 0 AND pDBGFailCheck = FALSE)
8438    THEN
8439      RETURN c_status_success;
8440    ELSE
8441      IF pOutputType = c_output_xml THEN
8442        result_txt:= genDBUAXMLCheck('ENABLED_INDEXES_TBL',
8443          c_check_level_warning,
8444          'Table sys.enabled$indexes exists in the database',
8445          'Table sys.enabled$indexes exists in the database',
8446          'Drop table prior to upgrade.',
8447           c_dbua_detail_type_text,
8448          'To view if enabled indexes execute, execute the following'
8449            || ' query: SELECT COUNT(1) FROM SYS.ENABLED$INDEXES',
8450          c_dbua_fixup_type_auto,
8451          c_dbua_fixup_stage_pre);
8452      ELSE
8453        result_txt := ENABLED_INDEXES_TBL_gethelp(c_help_overview);
8454      END IF;
8455      IF pOutputFixupScripts THEN
8456        genFixup ('ENABLED_INDEXES_TBL');
8457      END IF;
8458      RETURN c_status_failure;
8459     END IF;
8460  END ENABLED_INDEXES_TBL_check;
8461  
8462  FUNCTION ENABLED_INDEXES_TBL_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8463  IS
8464  BEGIN
8465    IF HelpType = c_help_overview THEN
8466      return 'WARNING: --> Table sys.enabled$indexes exists in the database' || crlf
8467       || crlf || '     DROP TABLE sys.enabled$indexes prior to upgrading the database.';
8468    ELSIF HelpType = c_help_fixup THEN
8469      return 'Drop table sys.enabled$indexes.';
8470    END IF;
8471  END ENABLED_INDEXES_TBL_gethelp;
8472  --
8473  -- Fixup (Procedure and function)
8474  --
8475  PROCEDURE ENABLED_INDEXES_TBL_fixup
8476  IS
8477    result  VARCHAR2(1000);
8478    status  NUMBER;
8479    tSqlcode NUMBER;
8480  BEGIN
8481    -- Call fixup and throw away the result
8482    status := ENABLED_INDEXES_TBL_fixup (result, tSqlcode);
8483  END ENABLED_INDEXES_TBL_fixup;
8484  
8485  FUNCTION ENABLED_INDEXES_TBL_fixup (
8486           result_txt IN OUT VARCHAR2,
8487           pSqlcode    IN OUT NUMBER) RETURN number
8488  IS
8489  BEGIN
8490     return execute_sql_statement ('DROP TABLE sys.enabled$indexes', result_txt, pSqlcode);
8491  END ENABLED_INDEXES_TBL_fixup;
8492  
8493  -- *****************************************************************
8494  --     EXF_RUL_EXISTS Section
8495  -- *****************************************************************
8496  FUNCTION exf_rul_exists_check (result_txt OUT VARCHAR2) RETURN number
8497  IS
8498    n_status NUMBER := -1;
8499  BEGIN
8500    --
8501    -- See if EXF and/or RUL components exist, they will be
8502    -- removed during the upgrade so let them know they can remove them
8503    -- before the upgrade.
8504    --
8505    BEGIN
8506      EXECUTE IMMEDIATE
8507         'SELECT  status FROM sys.registry$ WHERE (cid=''RUL'' OR cid=''EXF'')
8508            WHERE namespace=''SERVER'''
8509         INTO n_status;
8510    EXCEPTION
8511        WHEN OTHERS THEN NULL; -- EXF or RUL not in registry
8512    END;
8513  
8514    IF n_status = -1 AND pDBGFailCheck = FALSE THEN
8515      --
8516      -- does not exist
8517      --
8518      return c_status_success;
8519    END IF;
8520  
8521    IF pOutputType = c_output_xml THEN
8522      result_txt:= genDBUAXMLCheck('EXF_RUL_EXIST',
8523          c_check_level_info,
8524          'Expression Filter (EXF) or Rules Manager (RUL) exist in database.',
8525          'Expression Filter (EXF) and Rules Manager (RUL) are desupported in 12.1.',
8526          'Expression Filter (EXF) and Rules Manager (RUL) will be removed during the upgrade.',
8527           c_dbua_detail_type_text,
8528          htmlentities('To drop EXF and RUL prior to upgrade'||
8529          ' execute @?/rdbms/admin/catnoexf.sql script'),
8530          c_dbua_fixup_type_auto,
8531          c_dbua_fixup_stage_pre );
8532      ELSE
8533      result_txt := exf_rul_exists_gethelp(c_help_overview);
8534    END IF;
8535  
8536    IF pOutputFixupScripts THEN
8537        genFixup ('EXF_RUL_EXISTS');
8538    END IF;
8539    RETURN c_status_failure;
8540  END exf_rul_exists_check ;
8541  
8542  FUNCTION exf_rul_exists_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8543  IS
8544  BEGIN
8545    IF HelpType = c_help_overview THEN
8546      return 'INFORMATION: --> Expression Filter (EXF) or Rules Manager (RUL) exist in database and will be removed during the upgrade.' || crlf
8547       || crlf || '     Starting with Oracle Database release 12.1, the Expression Filter (EXF) and Database Rules Manager (RUL)'
8548       || crlf || '     features are desupported and will be removed during the upgrade process.  To save time during'
8549       || crlf || '     the upgrade, this action can be done prior to upgrading by executing the ORACLE_HOME/rdbms/admin/catnoexf.sql script.';
8550    ELSIF HelpType = c_help_fixup THEN
8551      return 'Manually execute ORACLE_HOME/rdbms/admin/catnoexf.sql script to remove EXF and RUL.';
8552    END IF;
8553  END exf_rul_exists_gethelp;
8554  --
8555  PROCEDURE exf_rul_exists_fixup
8556  IS
8557    result   VARCHAR2(1000);
8558    status   NUMBER;
8559    tSqlcode  NUMBER;
8560  BEGIN
8561    -- Call fixup and throw away the result
8562    status := exf_rul_exists_fixup (result, tSqlcode);
8563  END exf_rul_exists_fixup;
8564  
8565  FUNCTION exf_rul_exists_fixup (
8566           result_txt IN OUT VARCHAR2,
8567           pSqlcode    IN OUT NUMBER) RETURN number
8568  IS
8569  BEGIN
8570     result_txt := exf_rul_exists_gethelp(c_help_overview);
8571     pSqlcode := 0;
8572     return c_fixup_status_info;
8573  END exf_rul_exists_fixup;
8574  
8575  
8576  -- *****************************************************************
8577  --     FILES_NEED_RECOVERY Section
8578  -- *****************************************************************
8579  FUNCTION FILES_NEED_RECOVERY_check (result_txt OUT VARCHAR2) RETURN number
8580  IS
8581    t_null      CHAR(1);
8582    status      NUMBER;
8583  BEGIN
8584    BEGIN
8585      EXECUTE IMMEDIATE 'SELECT NULL FROM v$recover_file WHERE rownum <=1'
8586      INTO t_null;
8587      status := 1;
8588     EXCEPTION
8589        WHEN NO_DATA_FOUND THEN status := 0;
8590     END;
8591  
8592    IF (status = 0 and pDBGFailCheck = FALSE)
8593    THEN
8594      RETURN c_status_success;
8595    ELSE
8596      IF pOutputType = c_output_xml THEN
8597        result_txt:= genDBUAXMLCheck('FILES_NEED_RECOVERY',
8598          c_check_level_warning,
8599          'There are files that need media recovery. Ensure no files need media recovery prior to upgrade.',
8600          'There are files that need media recovery.',
8601          'Ensure no files need recovery.',
8602           c_dbua_detail_type_sql,
8603          htmlentities ('SELECT count(*) FROM v$recover_file WHERE rownum <=1'),
8604          c_dbua_fixup_type_manual,
8605          c_dbua_fixup_stage_pre );
8606      ELSE
8607        result_txt := FILES_NEED_RECOVERY_gethelp(c_help_overview);
8608      END IF;
8609      IF pOutputFixupScripts THEN
8610        genFixup ('FILES_NEED_RECOVERY');
8611      END IF;
8612      RETURN c_status_failure;
8613     END IF;
8614  END;
8615  
8616  FUNCTION FILES_NEED_RECOVERY_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8617  IS
8618  BEGIN
8619    IF HelpType = c_help_overview THEN
8620      return 'ERROR: --> There are files which need media recovery' || crlf
8621        || crlf || '     Ensure no files need media recovery prior to upgrade.';
8622    ELSIF HelpType = c_help_fixup THEN
8623      return 'Recover or repair these files prior to upgrade.';
8624    END IF;
8625  END FILES_NEED_RECOVERY_gethelp;
8626  --
8627  -- Fixup (Procedure and function)
8628  --
8629  PROCEDURE FILES_NEED_RECOVERY_fixup
8630  IS
8631    result  VARCHAR2(1000);
8632    status  NUMBER;
8633    tSqlcode NUMBER;
8634  BEGIN
8635    -- Call fixup and throw away the result
8636    status := FILES_NEED_RECOVERY_fixup (result, tSqlcode);
8637  END FILES_NEED_RECOVERY_fixup;
8638  
8639  FUNCTION FILES_NEED_RECOVERY_fixup (
8640           result_txt IN OUT VARCHAR2,
8641           pSqlcode    IN OUT NUMBER) RETURN number
8642  IS
8643  BEGIN
8644    -- The removal is done during the upgrade.
8645    -- Dump out the same thing we give for help
8646    result_txt := FILES_NEED_RECOVERY_gethelp(c_help_overview);
8647    return c_fixup_status_info;
8648  END FILES_NEED_RECOVERY_fixup;
8649  
8650  -- *****************************************************************
8651  --     FILES_BACKUP_MODE Section
8652  -- *****************************************************************
8653  FUNCTION FILES_BACKUP_MODE_check (result_txt OUT VARCHAR2) RETURN number
8654  IS
8655    roll_exists NUMBER := 1;
8656    t_null      CHAR(1);
8657    status      NUMBER;
8658  BEGIN
8659  
8660    IF (db_n_version NOT IN (102,111,112) and pDBGFailCheck = FALSE) THEN
8661      return c_status_not_for_this_version;
8662    END IF;
8663  
8664    BEGIN
8665      EXECUTE IMMEDIATE
8666       'SELECT NULL FROM sys.user$ WHERE (name=''FILES_BACKUP_MODE'' and type#=0)'
8667        INTO t_null;
8668      EXCEPTION
8669        WHEN NO_DATA_FOUND then roll_exists := 0;
8670    END;
8671  
8672    IF (roll_exists = 0 and pDBGFailCheck = FALSE)
8673    THEN
8674      RETURN c_status_success;
8675    ELSE
8676      IF pOutputType = c_output_xml THEN
8677        result_txt:= genDBUAXMLCheck('FILES_BACKUP_MODE',
8678          c_check_level_warning,
8679          'There are files in backup mode. Ensure no files are in backup mode prior to upgrade.',
8680          'Ensure no files are in backup mode prior to upgrade.',
8681          'Ensure no files are in backup mode prior to upgrade.',
8682           c_dbua_detail_type_sql,
8683          'SELECT name FROM sys.user$ WHERE (name=''FILES_BACKUP_MODE'' and type#=0)',
8684          c_dbua_fixup_type_manual,
8685          c_dbua_fixup_stage_pre);
8686      ELSE
8687        result_txt := FILES_BACKUP_MODE_gethelp(c_help_overview);
8688      END IF;
8689      IF pOutputFixupScripts THEN
8690        genFixup ('FILES_BACKUP_MODE');
8691      END IF;
8692      RETURN c_status_failure;
8693     END IF;
8694  END FILES_BACKUP_MODE_check;
8695  
8696  FUNCTION FILES_BACKUP_MODE_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8697  IS
8698  BEGIN
8699    IF HelpType = c_help_overview THEN
8700      return 'ERROR: --> There are files in backup mode' || crlf
8701        || crlf || '     Ensure no files are in backup mode prior to upgrade.';
8702    ELSIF HelpType = c_help_fixup THEN
8703      return 'Verify that no files are in backup mode prior to upgrade.';
8704    END IF;
8705  END FILES_BACKUP_MODE_gethelp;
8706  --
8707  -- Fixup (Procedure and function)
8708  --
8709  PROCEDURE FILES_BACKUP_MODE_fixup
8710  IS
8711    result  VARCHAR2(1000);
8712    status  NUMBER;
8713    tSqlcode NUMBER;
8714  BEGIN
8715    -- Call fixup and throw away the result
8716    status := FILES_BACKUP_MODE_fixup (result, tSqlcode);
8717  END FILES_BACKUP_MODE_fixup;
8718  
8719  FUNCTION FILES_BACKUP_MODE_fixup (
8720           result_txt IN OUT VARCHAR2,
8721           pSqlcode    IN OUT NUMBER) RETURN number
8722  IS
8723  BEGIN
8724    -- Dump out the same thing we give for help
8725    result_txt := FILES_BACKUP_MODE_gethelp(c_help_overview);
8726    return c_fixup_status_info;
8727  END FILES_BACKUP_MODE_fixup;
8728  
8729  -- *****************************************************************
8730  --     INVALID_LOG_ARCHIVE_FORMAT Section
8731  -- *****************************************************************
8732  FUNCTION INVALID_LAF_check (result_txt OUT VARCHAR2) RETURN number
8733  IS
8734    laf_format   VARCHAR2(4000);
8735    tmp_varchar1 VARCHAR2(512);
8736    t_null       CHAR(1);
8737    status       NUMBER := 0;
8738  BEGIN
8739  
8740     --
8741     -- invalid log_archive_format check
8742     --
8743     -- for 9.x, RDBMS set a default value which did not include %r,
8744     -- which is required by 11.2.
8745     -- Grab the format string, and if its defaulted or not,
8746     -- Only report an error if its NOT defaulted (user set) and it is
8747     -- missing the %r.
8748     --
8749     BEGIN
8750       EXECUTE IMMEDIATE
8751          'SELECT value, isdefault FROM v$parameter WHERE name = ''log_archive_format'''
8752       INTO laf_format, tmp_varchar1;
8753     EXCEPTION WHEN OTHERS THEN NULL;
8754     END;
8755  
8756     IF (tmp_varchar1 = 'FALSE') AND
8757        (instr (LOWER(laf_format), '%r') = 0) THEN
8758       --
8759       -- no %[r|R] and we are not defaulted by the system - we have to report something...
8760       --
8761       status := 1;
8762     END IF;
8763  
8764    IF (status = 0 AND pDBGFailCheck = FALSE)
8765    THEN
8766      RETURN c_status_success;
8767    ELSE
8768      IF pOutputType = c_output_xml THEN
8769        --
8770        -- DBUA will fix this up by changing the param
8771        -- so its an INFO
8772        --
8773        result_txt:= genDBUAXMLCheck('INVALID_LOG_ARCHIVE_FORMAT',
8774          c_check_level_info,
8775          'Initialization parameter log_archive_format must contain %s, %t and %r.'
8776            || ' Database Upgrade Assistant will update this parameter to database'
8777            || ' default value. This value can be customized after the upgrade.',
8778          'log_archive_format is invalid',
8779          'Update your initialization parameter to a valid value.',
8780           c_dbua_detail_type_sql,
8781          htmlentities('select value from v$parameter where name = ''log_archive_format'''),
8782          c_dbua_fixup_type_manual,
8783          c_dbua_fixup_stage_pre );
8784      ELSE
8785        result_txt  := INVALID_LAF_gethelp(c_help_overview);
8786      END IF;
8787      IF pOutputFixupScripts THEN
8788        genFixup ('INVALID_LOG_ARCHIVE_FORMAT');
8789      END IF;
8790      RETURN c_status_failure;
8791     END IF;
8792  END INVALID_LAF_check;
8793  
8794  FUNCTION INVALID_LAF_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
8795  IS
8796    format    VARCHAR2(4000);
8797    log_mode  VARCHAR2(30);
8798    result_txt VARCHAR2(4000);
8799  BEGIN
8800    IF HelpType = c_help_overview THEN
8801      EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE name = ''log_archive_format'''
8802       INTO format;
8803      EXECUTE IMMEDIATE 'SELECT LOG_MODE from v$database'
8804         INTO log_mode;
8805      result_txt := 'ERROR: --> log_archive_format must be updated' || crlf
8806        || crlf || '     As of 10.1, log_archive_format requires a %r format qualifier'
8807        || crlf || '     be present in its format string.  Your current setting is:'
8808        || crlf || '     log_archive_format=''' || format || '''.';
8809      IF log_mode = 'NOARCHIVELOG' THEN
8810        result_txt := result_txt
8811          || crlf || '     Archive Logging is currently OFF, but failure to add the %r to the'
8812          || crlf || '     format string will still prevent the upgraded database from starting up.';
8813      ELSE
8814        result_txt := result_txt
8815          || crlf || '     Archive Logging is currently ON, and failure to add the %r to the'
8816          || crlf || '     format string will prevent the upgraded database from starting up.';
8817      END IF;
8818    ELSIF HelpType = c_help_fixup THEN
8819      result_txt := 'Update log_archive_format prior to upgrade.';
8820    END IF;
8821    RETURN result_txt;
8822  END INVALID_LAF_gethelp;
8823  --
8824  -- Fixup (Procedure and function)
8825  --
8826  PROCEDURE INVALID_LAF_fixup
8827  IS
8828    result  VARCHAR2(1000);
8829    status  NUMBER;
8830    tSqlcode NUMBER;
8831  BEGIN
8832    -- Call fixup and throw away the result
8833    status := INVALID_LAF_fixup (result, tSqlcode);
8834  END INVALID_LAF_fixup;
8835  
8836  FUNCTION INVALID_LAF_fixup (
8837           result_txt IN OUT VARCHAR2,
8838           pSqlcode    IN OUT NUMBER) RETURN number
8839  IS
8840  BEGIN
8841    -- Dump out the same thing we give for help
8842    result_txt := INVALID_LAF_gethelp(c_help_overview);
8843    return c_fixup_status_info;
8844  END INVALID_LAF_fixup;
8845  
8846  -- *****************************************************************
8847  --     INVALID_OBJECTS_EXIST Section
8848  -- *****************************************************************
8849  FUNCTION INVALID_OBJ_EXIST_check (result_txt OUT VARCHAR2) RETURN number
8850  IS
8851    t_null              CHAR(1);
8852    invalid_objs        BOOLEAN := FALSE;
8853    status              NUMBER;
8854    tbl_exists          NUMBER;
8855    nonsys_invalid_objs NUMBER;
8856  BEGIN
8857    --
8858    -- Check for INVALID objects
8859    -- For "inplace" upgrades check for invalid objects that can be excluded
8860    -- as they may have changed between releases and don't need to be reported.
8861    --
8862    -- For all other types of upgrades, use the simple query below to
8863    -- eliminate running the intricate queries except when they are needed.
8864    --
8865    BEGIN
8866      IF NOT db_inplace_upgrade  THEN
8867        EXECUTE IMMEDIATE 'SELECT NULL FROM sys.dba_objects
8868            WHERE status = ''INVALID'' AND object_name NOT LIKE ''BIN$%'' AND
8869               rownum <=1'
8870        INTO t_null;
8871        -- For patch release - update the objects in the query below
8872      ELSE
8873        -- V_$ROLLNAME special cased because of references  to x$ tables
8874        EXECUTE IMMEDIATE 'SELECT NULL FROM SYS.DBA_OBJECTS
8875             WHERE status = ''INVALID'' AND object_name NOT LIKE ''BIN$%'' AND
8876                rownum <=1 AND
8877                object_name NOT IN
8878                   (SELECT name FROM SYS.dba_dependencies
8879                      START WITH referenced_name IN (
8880                           ''V$LOGMNR_SESSION'', ''V$ACTIVE_SESSION_HISTORY'',
8881                           ''V$BUFFERED_SUBSCRIBERS'',  ''GV$FLASH_RECOVERY_AREA_USAGE'',
8882                           ''GV$ACTIVE_SESSION_HISTORY'', ''GV$BUFFERED_SUBSCRIBERS'',
8883                           ''V$RSRC_PLAN'', ''V$SUBSCR_REGISTRATION_STATS'',
8884                           ''GV$STREAMS_APPLY_READER'',''GV$ARCHIVE_DEST'',
8885                           ''GV$LOCK'',''DBMS_STATS_INTERNAL'',''V$STREAMS_MESSAGE_TRACKING'',
8886                           ''GV$SQL_SHARED_CURSOR'',''V$RMAN_COMPRESSION_ALGORITHM'',
8887                           ''V$RSRC_CONS_GROUP_HISTORY'',''V$PERSISTENT_SUBSCRIBERS'',''V$RMAN_STATUS'',
8888                           ''GV$RSRC_CONSUMER_GROUP'',''V$ARCHIVE_DEST'',''GV$RSRCMGRMETRIC'',
8889                           ''GV$RSRCMGRMETRIC_HISTORY'',''V$PERSISTENT_QUEUES'',''GV$CPOOL_CONN_INFO'',
8890                           ''GV$RMAN_COMPRESSION_ALGORITHM'',''DBA_BLOCKERS'',''V$STREAMS_TRANSACTION'',
8891                           ''V$STREAMS_APPLY_READER'',''GV$SGA_DYNAMIC_FREE_MEMORY'',''GV$BUFFERED_QUEUES'',
8892                           ''GV$RSRC_PLAN_HISTORY'',''GV$ENCRYPTED_TABLESPACES'',''V$ENCRYPTED_TABLESPACES'',
8893                           ''GV$RSRC_CONS_GROUP_HISTORY'',''GV$RSRC_PLAN'',
8894                           ''GV$RSRC_SESSION_INFO'',''V$RSRCMGRMETRIC'',''V$STREAMS_CAPTURE'',
8895                           ''V$RSRCMGRMETRIC_HISTORY'',''GV$STREAMS_TRANSACTION'',''DBMS_LOGREP_UTIL'',
8896                           ''V$RSRC_SESSION_INFO'',''GV$STREAMS_CAPTURE'',''V$RSRC_PLAN_HISTORY'',
8897                           ''GV$FLASHBACK_DATABASE_LOGFILE'',''V$BUFFERED_QUEUES'',
8898                           ''GV$PERSISTENT_SUBSCRIBERS'',''GV$FILESTAT'',''GV$STREAMS_MESSAGE_TRACKING'',
8899                           ''V$RSRC_CONSUMER_GROUP'',''V$CPOOL_CONN_INFO'',''DBA_DML_LOCKS'',
8900                           ''V$FLASHBACK_DATABASE_LOGFILE'',''GV$HM_RECOMMENDATION'',
8901                           ''V$SQL_SHARED_CURSOR'',''GV$PERSISTENT_QUEUES'',''GV$FILE_HISTOGRAM'',
8902                           ''DBA_WAITERS'',''GV$SUBSCR_REGISTRATION_STATS'')
8903                                  AND referenced_type in (''VIEW'',''PACKAGE'') OR
8904                            name = ''V_$ROLLNAME''
8905                               CONNECT BY
8906                                 PRIOR name = referenced_name and
8907                                 PRIOR type = referenced_type)'
8908        INTO t_null;
8909      END IF;
8910      invalid_objs := TRUE;
8911      EXCEPTION
8912        WHEN NO_DATA_FOUND THEN NULL;
8913    END;
8914  
8915    -- create a table to store invalid objects (create it if necessary)
8916    IF is_db_readonly = FALSE THEN
8917      tbl_exists := 0;
8918      EXECUTE IMMEDIATE
8919        'SELECT count(*) FROM dba_tables
8920           WHERE table_name = ''REGISTRY$SYS_INV_OBJS'''
8921      INTO tbl_exists;
8922  
8923      IF tbl_exists != 0 -- if registry$sys_inv_objs table exists
8924      THEN
8925        -- Truncate table first
8926        EXECUTE IMMEDIATE 'TRUNCATE TABLE registry$sys_inv_objs';
8927  
8928        -- Insert into table
8929        EXECUTE IMMEDIATE
8930          'INSERT INTO registry$sys_inv_objs
8931           SELECT owner,object_name,object_type
8932             FROM sys.dba_objects
8933             WHERE status !=''VALID'' AND owner in (''SYS'',''SYSTEM'')
8934             ORDER BY owner';
8935      ELSE
8936        -- Create invalid objects table and populate with all SYS and SYSTEM
8937        -- invalid objects
8938        EXECUTE IMMEDIATE
8939          'CREATE TABLE registry$sys_inv_objs AS
8940            SELECT owner,object_name,object_type
8941              FROM sys.dba_objects
8942              WHERE status !=''VALID'' AND owner in (''SYS'',''SYSTEM'')
8943              ORDER BY owner';
8944      END IF;  -- IF/ELSE registry$sys_inv_objs exists
8945  
8946      -- If there are less than 5000 non-sys invalid objects then create
8947      -- another table with non-SYS/SYSTEM owned objects.
8948      -- If there are more than 5000 total then that is too many
8949      -- for utluiobj.sql to handle so output a message.
8950      EXECUTE IMMEDIATE 'SELECT count(*) FROM sys.dba_objects
8951              WHERE status !=''VALID'' AND owner NOT in (''SYS'',''SYSTEM'')'
8952      INTO nonsys_invalid_objs;
8953  
8954      IF nonsys_invalid_objs < 5000 THEN
8955        tbl_exists := 0;
8956        EXECUTE IMMEDIATE
8957          'SELECT count(*) FROM dba_tables
8958             WHERE table_name = ''REGISTRY$NONSYS_INV_OBJS'''
8959        INTO tbl_exists;
8960  
8961        IF tbl_exists != 0 -- if registry$nonsys_inv_objs table exists
8962        THEN
8963          -- Truncate table first
8964          EXECUTE IMMEDIATE 'TRUNCATE TABLE registry$nonsys_inv_objs';
8965  
8966          -- Insert into table next
8967          EXECUTE IMMEDIATE
8968            'INSERT INTO registry$nonsys_inv_objs
8969             SELECT owner,object_name,object_type
8970               FROM sys.dba_objects
8971               WHERE status !=''VALID'' AND owner NOT in (''SYS'',''SYSTEM'')
8972               ORDER BY owner';
8973        ELSE  -- if table does not exist
8974          -- Create invalid objects table and populate with non-SYS and
8975          -- non-SYSTEM invalid objects
8976          EXECUTE IMMEDIATE
8977             'CREATE TABLE registry$nonsys_inv_objs
8978                AS
8979              SELECT owner,object_name,object_type
8980                FROM sys.dba_objects
8981                WHERE status !=''VALID'' AND owner NOT in (''SYS'',''SYSTEM'')
8982                ORDER BY owner';
8983        END IF;  -- IF/ELSE registry$nonsys_inv_objs exists
8984      END IF;  -- IF/ELSE nonsys_invalid_objs > 5000
8985      COMMIT;
8986    END IF; -- db NOT readonly
8987  
8988    --
8989    -- Now get back to reporting the issue if we need to.
8990    --
8991    IF invalid_objs = FALSE AND pDBGFailCheck = FALSE THEN
8992      RETURN c_status_success;
8993    ELSE
8994      IF pOutputType = c_output_xml THEN
8995        result_txt:= genDBUAXMLCheck('INVALID_OBJECTS_EXIST',
8996          c_check_level_warning,
8997            'There are INVALID objects in the database.  Invalid SYS/SYSTEM objects'
8998            || ' was written to REGISTRY$SYS_INV_OBJS.  Invalid non-SYS/SYSTEM objects'
8999            || ' was written to REGISTRY$NONSYS_INV_OBJS.  Use utluiobj.sql after the'
9000            || ' upgrade to identify any new invalid objects due to the upgrade.',
9001          'Invalid object found in the database.',
9002          'It is recommended that utlprp.sql be run to attempt to validate objects',
9003           c_dbua_detail_type_sql,
9004           'SELECT owner,object_name,object_type from registry$sys_inv_objs',
9005          c_dbua_fixup_type_manual,
9006          c_dbua_fixup_stage_pre);
9007      ELSE
9008        result_txt := INVALID_OBJ_EXIST_gethelp(c_help_overview);
9009      END IF;
9010      IF pOutputFixupScripts THEN
9011        genFixup ('INVALID_OBJECTS_EXIST');
9012      END IF;
9013      RETURN c_status_failure;
9014    END IF;
9015  END INVALID_OBJ_EXIST_check;
9016  
9017  FUNCTION INVALID_OBJ_EXIST_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
9018  IS
9019  BEGIN
9020    IF HelpType = c_help_overview THEN
9021      return 'WARNING: --> Database contains INVALID objects prior to upgrade' || crlf
9022        || crlf || '     The list of invalid SYS/SYSTEM objects was written to'
9023        || crlf || '     registry$sys_inv_objs.'
9024        || crlf || '     The list of non-SYS/SYSTEM objects was written to'
9025        || crlf || '     registry$nonsys_inv_objs unless there were over 5000.'
9026        || crlf || '     Use utluiobj.sql after the upgrade to identify any new invalid'
9027        || crlf || '     objects due to the upgrade.';
9028    ELSIF HelpType = c_help_fixup THEN
9029      return 'Invalid objects are displayed and must be reviewed.';
9030    END IF;
9031  END INVALID_OBJ_EXIST_gethelp;
9032  --
9033  -- Fixup (Procedure and function)
9034  --
9035  PROCEDURE INVALID_OBJ_EXIST_fixup
9036  IS
9037    result  VARCHAR2(1000);
9038    status  NUMBER;
9039    tSqlcode NUMBER;
9040  BEGIN
9041    -- Call fixup and throw away the result
9042    status := INVALID_OBJ_EXIST_fixup (result, tSqlcode);
9043  END INVALID_OBJ_EXIST_fixup;
9044  
9045  FUNCTION INVALID_OBJ_EXIST_fixup (
9046           result_txt IN OUT VARCHAR2,
9047           pSqlcode    IN OUT NUMBER) RETURN number
9048  IS
9049  BEGIN
9050    result_txt := INVALID_OBJ_EXIST_gethelp(c_help_overview);
9051    pSqlcode := 0;
9052    return c_fixup_status_info;
9053    --
9054    -- This could be executed by post-fixup
9055     --   return execute_sql_statement ('@?/rdbms/admin/utlprp.sql', result_txt, pSqlcode);
9056  END INVALID_OBJ_EXIST_fixup;
9057  
9058  FUNCTION invalid_obj_exclude RETURN VARCHAR2
9059  --
9060  -- The list of invalid objects to 'accept' as invalid
9061  --
9062  IS
9063  BEGIN
9064    return '''V$LOGMNR_SESSION'', ''V$ACTIVE_SESSION_HISTORY'', ''V$BUFFERED_SUBSCRIBERS'','
9065       || '''GV$FLASH_RECOVERY_AREA_USAGE'', ''GV$ACTIVE_SESSION_HISTORY'','
9066       || '''GV$BUFFERED_SUBSCRIBERS'', ''V$RSRC_PLAN'', ''V$SUBSCR_REGISTRATION_STATS'','
9067       || '''GV$STREAMS_APPLY_READER'',''GV$ARCHIVE_DEST'', ''GV$LOCK'',''DBMS_STATS_INTERNAL'','
9068       || '''V$STREAMS_MESSAGE_TRACKING'', ''GV$SQL_SHARED_CURSOR'',''V$RMAN_COMPRESSION_ALGORITHM'','
9069       || '''V$RSRC_CONS_GROUP_HISTORY'',''V$PERSISTENT_SUBSCRIBERS'',''V$RMAN_STATUS'','
9070       || '''GV$RSRC_CONSUMER_GROUP'',''V$ARCHIVE_DEST'',''GV$RSRCMGRMETRIC'','
9071       || '''GV$RSRCMGRMETRIC_HISTORY'',''V$PERSISTENT_QUEUES'',''GV$CPOOL_CONN_INFO'','
9072       || '''GV$RMAN_COMPRESSION_ALGORITHM'',''DBA_BLOCKERS'',''V$STREAMS_TRANSACTION'','
9073       || '''V$STREAMS_APPLY_READER'',''GV$SGA_DYNAMIC_FREE_MEMORY'',''GV$BUFFERED_QUEUES'','
9074       || '''GV$RSRC_PLAN_HISTORY'',''GV$ENCRYPTED_TABLESPACES'',''V$ENCRYPTED_TABLESPACES'','
9075       || '''GV$RSRC_CONS_GROUP_HISTORY'',''GV$RSRC_PLAN'',''GV$RSRC_SESSION_INFO'','
9076       || '''V$RSRCMGRMETRIC'',''V$STREAMS_CAPTURE'',''V$RSRCMGRMETRIC_HISTORY'','
9077       || '''GV$STREAMS_TRANSACTION'',''DBMS_LOGREP_UTIL'',''V$RSRC_SESSION_INFO'','
9078       || '''GV$STREAMS_CAPTURE'',''V$RSRC_PLAN_HISTORY'',''GV$FLASHBACK_DATABASE_LOGFILE'','
9079       || '''V$BUFFERED_QUEUES'',''GV$PERSISTENT_SUBSCRIBERS'',''GV$FILESTAT'','
9080       || '''GV$STREAMS_MESSAGE_TRACKING'',''V$RSRC_CONSUMER_GROUP'',''V$CPOOL_CONN_INFO'','
9081       || '''DBA_DML_LOCKS'', ''V$FLASHBACK_DATABASE_LOGFILE'',''GV$HM_RECOMMENDATION'','
9082       || '''V$SQL_SHARED_CURSOR'',''GV$PERSISTENT_QUEUES'',''GV$FILE_HISTOGRAM'','
9083       || '''DBA_WAITERS'',''GV$SUBSCR_REGISTRATION_STATS'', ''DBA_KGLLOCK''';
9084  END invalid_obj_exclude;
9085  
9086  -- *****************************************************************
9087  --     INVALID_SYS_TABLEDATA Section
9088  -- *****************************************************************
9089  FUNCTION INVALID_SYS_TABLEDATA_check (result_txt OUT VARCHAR2) RETURN number
9090  IS
9091    t_count  NUMBER;
9092    status   NUMBER;
9093  BEGIN
9094    --
9095    BEGIN
9096      EXECUTE IMMEDIATE  'SELECT COUNT(*) '                         ||
9097        'FROM SYS.OBJ$ o, SYS.COL$ c, SYS.COLTYPE$ t, SYS.USER$ u ' ||
9098        'WHERE o.OBJ# = t.OBJ# AND c.OBJ# = t.OBJ# '                ||
9099          'AND c.COL# = t.COL# AND t.INTCOL# = c.INTCOL# '          ||
9100          'AND BITAND(t.FLAGS, 256) = 256 AND o.OWNER# = u.USER# '  ||
9101          'AND o.OWNER# in '                                        ||
9102           '(SELECT r.schema# FROM SYS.REGISTRY$ r '                ||
9103             'WHERE r.NAMESPACE = ''SERVER'')'
9104       INTO t_count;
9105      EXCEPTION
9106        WHEN NO_DATA_FOUND THEN t_count := 0;
9107    END;
9108  
9109    IF (t_count <= 0 and pDBGFailCheck = FALSE)
9110    THEN
9111      -- Nothing to do.
9112      RETURN c_status_success;
9113  
9114    ELSE
9115      IF pOutputType = c_output_xml THEN
9116        result_txt:= genDBUAXMLCheck('INVALID_SYS_TABLEDATA',
9117          c_check_level_error,
9118          'Database contains table data which has not been upgraded. Proceeding'
9119           || ' with an Upgrade before upgrading the table data can lead to'
9120           || ' data loss. ',
9121          'Invalid table data found in database.',
9122          'Use "ALTER TABLE ... UPGRADE INCLUDING DATA" prior to upgrade.',
9123           c_dbua_detail_type_text,
9124          'Use "ALTER TABLE ... UPGRADE INCLUDING DATA" prior to upgrade.',
9125          c_dbua_fixup_type_auto,
9126          c_dbua_fixup_stage_validation );
9127      ELSE
9128        result_txt := INVALID_SYS_TABLEDATA_gethelp(c_help_overview);
9129      END IF;
9130      IF pOutputFixupScripts THEN
9131        genFixup ('INVALID_SYS_TABLEDATA');
9132      END IF;
9133     RETURN c_status_failure;
9134     END IF;
9135  END;
9136  
9137  FUNCTION INVALID_SYS_TABLEDATA_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
9138  IS
9139  BEGIN
9140    IF HelpType = c_help_overview THEN
9141      return 'ERROR: --> Invalid Oracle supplied table data found in your database.' || crlf
9142             || crlf || '     Invalid data can be seen prior to the database upgrade'
9143             || crlf || '     or during PDB plug in.  This table data must be made'
9144             || crlf || '     valid BEFORE upgrade or plug in.'
9145             || crlf
9146             || crlf || '   - To fix the data, load the Preupgrade package and execute'
9147             || crlf || '     the fixup routine.'
9148             || crlf || '     For plug in, execute the fix up routine in the PDB.'
9149             || crlf
9150             || crlf || '    @?/rdbms/admin/utluppkg.sql'
9151             || crlf || '    SET SERVEROUTPUT ON;'
9152             || crlf || '    exec dbms_preup.run_fixup_and_report(''INVALID_SYS_TABLEDATA'')'
9153             || crlf || '    SET SERVEROUTPUT OFF;';
9154    ELSIF HelpType = c_help_fixup THEN
9155      return 'UPGRADE Oracle supplied table data prior to the database upgrade.';
9156    END IF;
9157  END;
9158  --
9159  -- Fixup (Procedure and function)
9160  --
9161  PROCEDURE INVALID_SYS_TABLEDATA_fixup
9162  IS
9163    result  VARCHAR2(1000);
9164    status  NUMBER;
9165    tSqlcode NUMBER;
9166  BEGIN
9167    -- Call fixup and throw away the result
9168    status := INVALID_SYS_TABLEDATA_fixup (result, tSqlcode);
9169  END;
9170  FUNCTION INVALID_SYS_TABLEDATA_fixup (
9171           result_txt IN OUT VARCHAR2,
9172           pSqlcode    IN OUT NUMBER) RETURN number
9173  IS
9174    t_cursor     cursor_t;
9175    t_tabname    sys.obj$.name%TYPE;
9176    t_schema     sys.user$.name%TYPE;
9177    t_full_name  VARCHAR2(261); -- extra for quotes and .
9178    t_sqltxt     VARCHAR2(4000);
9179    t_new_err    VARCHAR2(500);
9180    t_error      BOOLEAN := FALSE;
9181    t_took_error BOOLEAN := FALSE;
9182    t_sqlcode    NUMBER;  -- The last sql error we took
9183    t_len        NUMBER;
9184  
9185  BEGIN
9186    result_txt := '';
9187  
9188    OPEN t_cursor FOR 'SELECT DISTINCT (o.NAME), u.NAME '          ||
9189      'FROM SYS.OBJ$ o, SYS.COL$ c, SYS.COLTYPE$ t, SYS.USER$ u '  ||
9190      'WHERE o.OBJ# = t.OBJ# AND c.OBJ# = t.OBJ# '                 ||
9191         'AND c.COL# = t.COL# AND t.INTCOL# = c.INTCOL# '          ||
9192         'AND BITAND(t.FLAGS, 256) = 256 AND o.OWNER# = u.USER# '  ||
9193         'AND o.OWNER# in (SELECT r.schema# FROM SYS.REGISTRY$ r ' ||
9194                'WHERE r.NAMESPACE = ''SERVER'')';
9195    LOOP
9196      FETCH t_cursor INTO t_tabname,t_schema;
9197      EXIT WHEN t_cursor%NOTFOUND;
9198      --
9199      -- Put quotes around the schema and table name
9200      --
9201      t_full_name :=  dbms_assert.enquote_name(t_schema, FALSE) || '.' ||
9202                      dbms_assert.enquote_name(t_tabname,FALSE);
9203     BEGIN
9204        EXECUTE IMMEDIATE 'ALTER TABLE ' || t_full_name
9205                  || ' UPGRADE INCLUDING DATA';
9206        EXCEPTION WHEN OTHERS THEN
9207          t_error  := TRUE;
9208          t_sqltxt := SQLERRM;
9209          t_sqlcode  := SQLCODE;
9210          t_took_error := TRUE;
9211      END;
9212  
9213      IF t_error THEN
9214        IF result_txt != '' THEN
9215          -- If not the first, add a crlf
9216          result_txt := result_txt || crlf;
9217        END IF;
9218  
9219        t_new_err :=
9220              '  Error upgrading: ' || t_full_name || crlf ||
9221              '  Error Text:      ' || t_sqltxt || crlf;
9222  
9223        --
9224        --  length returns NULL (and not zero) for null varchar2's
9225        --
9226        t_len := NVL(length(result_txt), 0);
9227  
9228        IF (t_len + length (t_new_err) <= c_str_max) THEN
9229          --
9230          -- will fit into our buffer
9231          --
9232          result_txt := result_txt || t_new_err;
9233        ELSE
9234          t_new_err := crlf ||
9235             '  *** Too Many Tables ***' || crlf ||
9236             '  *** Cleanup and re-execute to see more tables *** ';
9237          --
9238          -- see if this will fit on the end (should be
9239          -- shorter than the actual error)
9240          --
9241          IF (t_len + length (t_new_err) < c_str_max) THEN
9242            -- Fits
9243            result_txt := result_txt || t_new_err;
9244          ELSE
9245            --
9246            -- Won't fit, cut some off and add the above error
9247            --
9248            result_txt := substr (result_txt, 1, t_len -
9249                                length(t_new_err) - 1);
9250            result_txt := result_txt || t_new_err;
9251          END IF;
9252          -- We are done.
9253          EXIT;   -- Out of the loop
9254        END IF;
9255        t_error := FALSE;  -- Reset error
9256      END IF;
9257    END LOOP;
9258  
9259    IF t_took_error THEN
9260      pSqlcode := t_sqlcode;  -- Return the last failure code
9261      return c_fixup_status_failure;
9262    ELSE
9263      return c_fixup_status_success;
9264    END IF;
9265  END;
9266  
9267  -- *****************************************************************
9268  --     INVALID_USR_TABLEDATA Section
9269  -- *****************************************************************
9270  FUNCTION INVALID_USR_TABLEDATA_check (result_txt OUT VARCHAR2) RETURN number
9271  IS
9272    t_count  NUMBER;
9273    status   NUMBER;
9274  BEGIN
9275    --
9276    -- Exclude tables returned in the _sys_tabledata version
9277    -- by using NOT IN clause
9278    --
9279    BEGIN
9280      EXECUTE IMMEDIATE  'SELECT COUNT(*) '                         ||
9281        'FROM SYS.OBJ$ o, SYS.COL$ c, SYS.COLTYPE$ t, SYS.USER$ u ' ||
9282        'WHERE o.OBJ# = t.OBJ# AND c.OBJ# = t.OBJ# '                ||
9283          'AND c.COL# = t.COL# AND t.INTCOL# = c.INTCOL# '          ||
9284          'AND BITAND(t.FLAGS, 256) = 256 AND o.OWNER# = u.USER# '  ||
9285          'AND o.OWNER# NOT IN '                                    ||
9286             '(SELECT UNIQUE (d.USER_ID) FROM SYS.DBA_USERS d, '    ||
9287               'SYS.REGISTRY$ r WHERE d.USER_ID = r.SCHEMA# '       ||
9288               'AND r.NAMESPACE=''SERVER'')'
9289       INTO t_count;
9290      EXCEPTION
9291        WHEN NO_DATA_FOUND THEN t_count := 0;
9292    END;
9293  
9294    IF (t_count <= 0 and pDBGFailCheck = FALSE)
9295    THEN
9296      -- Nothing to do.
9297      RETURN c_status_success;
9298  
9299    ELSE
9300      IF pOutputType = c_output_xml THEN
9301        result_txt:= genDBUAXMLCheck('INVALID_USR_TABLEDATA',
9302          c_check_level_error,
9303          'Database contains user table data which has not been upgraded. Proceeding'
9304           || ' with an Upgrade of the database before upgrading the table data can lead to'
9305           || ' data loss.',
9306          'Invalid user table data found in database.',
9307          'Use "ALTER TABLE ... UPGRADE INCLUDING DATA prior to upgrade.',
9308           c_dbua_detail_type_text,
9309          'Use "ALTER TABLE ... UPGRADE INCLUDING DATA" prior to upgrade.',
9310          c_dbua_fixup_type_auto,
9311          c_dbua_fixup_stage_validation );
9312      ELSE
9313        result_txt := INVALID_USR_TABLEDATA_gethelp(c_help_overview);
9314      END IF;
9315      IF pOutputFixupScripts THEN
9316        genFixup ('INVALID_USR_TABLEDATA');
9317      END IF;
9318     RETURN c_status_failure;
9319     END IF;
9320  END;
9321  
9322  FUNCTION INVALID_USR_TABLEDATA_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
9323  IS
9324  BEGIN
9325    IF HelpType = c_help_overview THEN
9326      return 'ERROR: --> Invalid user table data found in your database.' || crlf
9327             || crlf || '     Invalid data can be seen prior to the database upgrade'
9328             || crlf || '     or during PDB plug in.  This table data must be made'
9329             || crlf || '     valid BEFORE upgrade or plug in.'
9330             || crlf
9331             || crlf || '   - To fix the data, load the Preupgrade package and execute'
9332             || crlf || '     the fixup routine.'
9333             || crlf || '     For plug in, execute the fix up routine in the PDB.'
9334             || crlf
9335             || crlf || '    @?/rdbms/admin/utluppkg.sql'
9336             || crlf || '    SET SERVEROUTPUT ON;'
9337             || crlf || '    exec dbms_preup.run_fixup_and_report(''INVALID_USR_TABLEDATA'');'
9338             || crlf || '    SET SERVEROUTPUT OFF;';
9339    ELSIF HelpType = c_help_fixup THEN
9340      return 'UPGRADE user table data prior to the database upgrade.';
9341    END IF;
9342  END;
9343  --
9344  -- Fixup (Procedure and function)
9345  --
9346  PROCEDURE INVALID_USR_TABLEDATA_fixup
9347  IS
9348    result  VARCHAR2(1000);
9349    status  NUMBER;
9350    tSqlcode NUMBER;
9351  BEGIN
9352    -- Call fixup and throw away the result
9353    status := INVALID_USR_TABLEDATA_fixup (result, tSqlcode);
9354  END;
9355  FUNCTION INVALID_USR_TABLEDATA_fixup (
9356           result_txt IN OUT VARCHAR2,
9357           pSqlcode    IN OUT NUMBER) RETURN number
9358  IS
9359    t_cursor     cursor_t;
9360    t_tabname    sys.obj$.name%TYPE;
9361    t_schema     sys.user$.name%TYPE;
9362    t_full_name  VARCHAR2(256);
9363    t_sqltxt     VARCHAR2(4000);
9364    t_new_err    VARCHAR2(500);
9365    t_error      BOOLEAN := FALSE;
9366    t_took_error BOOLEAN := FALSE;
9367    t_sqlcode    NUMBER;  -- The last sql error we took
9368    t_len        NUMBER;
9369  
9370  BEGIN
9371    result_txt := '';
9372  
9373    OPEN t_cursor FOR 'SELECT DISTINCT (o.NAME), u.NAME '          ||
9374      'FROM SYS.OBJ$ o, SYS.COL$ c, SYS.COLTYPE$ t, SYS.USER$ u '  ||
9375      'WHERE o.OBJ# = t.OBJ# AND c.OBJ# = t.OBJ# '                 ||
9376         'AND c.COL# = t.COL# AND t.INTCOL# = c.INTCOL# '          ||
9377         'AND BITAND(t.FLAGS, 256) = 256 AND o.OWNER# = u.USER# '  ||
9378         'AND o.OWNER# NOT IN (SELECT UNIQUE (d.USER_ID) FROM '    ||
9379           'SYS.DBA_USERS d, SYS.REGISTRY$ r WHERE '                ||
9380             'd.USER_ID = r.SCHEMA# AND r.NAMESPACE=''SERVER'')';
9381    LOOP
9382      FETCH t_cursor INTO t_tabname,t_schema;
9383      EXIT WHEN t_cursor%NOTFOUND;
9384      --
9385      -- Put quotes around the schema and table name
9386      --
9387      t_full_name :=  dbms_assert.enquote_name(t_schema, FALSE) || '.' ||
9388                      dbms_assert.enquote_name(t_tabname,FALSE);
9389      BEGIN
9390        EXECUTE IMMEDIATE 'ALTER TABLE ' || t_full_name
9391                  || ' UPGRADE INCLUDING DATA';
9392        EXCEPTION WHEN OTHERS THEN
9393          t_error  := TRUE;
9394          t_sqltxt := SQLERRM;
9395          t_sqlcode  := SQLCODE;
9396          t_took_error := TRUE;
9397      END;
9398  
9399      IF t_error THEN
9400        IF result_txt != '' THEN
9401          -- If not the first, add a crlf
9402          result_txt := result_txt || crlf;
9403        END IF;
9404  
9405        t_new_err :=
9406              '  Error upgrading: ' || t_full_name || crlf ||
9407              '  Error Text:      ' || t_sqltxt || crlf;
9408  
9409        --
9410        --  length returns NULL (and not zero) for null varchar2's
9411        --
9412        t_len := NVL(length(result_txt), 0);
9413  
9414        IF (t_len + length (t_new_err) <= c_str_max) THEN
9415          --
9416          -- will fit into our buffer
9417          --
9418          result_txt := result_txt || t_new_err;
9419        ELSE
9420          t_new_err := crlf ||
9421             '  *** Too Many Tables ***' || crlf ||
9422             '  *** Cleanup and re-execute to see more tables *** ';
9423          --
9424          -- see if this will fit on the end (should be
9425          -- shorter than the actual error)
9426          --
9427          IF (t_len + length (t_new_err) < c_str_max) THEN
9428            -- Fits
9429            result_txt := result_txt || t_new_err;
9430          ELSE
9431            --
9432            -- Won't fit, cut some off and add the above error
9433            --
9434            result_txt := substr (result_txt, 1, t_len -
9435                                      length(t_new_err));
9436            result_txt := result_txt || t_new_err;
9437          END IF;
9438          -- We are done.
9439          EXIT;   -- Out of the loop
9440        END IF;
9441        t_error := FALSE;  -- Reset error
9442      END IF;
9443    END LOOP;
9444  
9445    IF t_took_error THEN
9446      pSqlcode := t_sqlcode;  -- Return the last failure code
9447      return c_fixup_status_failure;
9448    ELSE
9449      return c_fixup_status_success;
9450    END IF;
9451  END;
9452  
9453  
9454  -- *****************************************************************
9455  --     job_queue_process Section
9456  -- *****************************************************************
9457  FUNCTION job_queue_process_check (result_txt OUT VARCHAR2) RETURN number
9458  IS
9459    p_count  NUMBER := -1;
9460    status   NUMBER;
9461    idx      NUMBER;
9462    p_lowest NUMBER;
9463    edetails VARCHAR2(500);
9464  
9465  BEGIN
9466    BEGIN
9467      EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE
9468            name=''job_queue_processes'''
9469      INTO p_count;
9470    EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
9471    END;
9472  
9473    p_lowest := db_cpus * db_cpu_threads;
9474  
9475    --
9476    -- If we failed to grab the count (not set),
9477    -- or the count is > the number of cpu*threads then
9478    -- there is no error
9479    --
9480    IF ( (p_count = -1) OR (p_count > p_lowest)
9481      AND pDBGFailCheck = FALSE) THEN
9482      RETURN c_status_success;
9483    END IF;
9484    --
9485    -- Find the index of this routine in the check_array
9486    --
9487    idx := check_names('JOB_QUEUE_PROCESS').idx;
9488  
9489    IF (p_count = 0) THEN
9490      check_table(idx).level := c_check_level_error;
9491      edetails := 'JOB_QUEUE_PROCESSES is set at zero which will cause both '
9492          || 'DBMS_SCHEDULER and DBMS_JOB jobs to not run.';
9493    ELSE
9494      --
9495      -- We know at this point the count is under db_cpus * db_cpu_threads
9496      -- (or debug is on)
9497      --
9498      check_table(idx).level := c_check_level_warning;
9499      edetails := 'JOB_QUEUE_PROCESSES is set at ' || p_count || ' which may cause '
9500          || 'the upgrade to take significantly longer to complete.';
9501    END IF;
9502  
9503    IF pOutputType = c_output_xml THEN
9504        result_txt:= genDBUAXMLCheck('JOB_QUEUE_PROCESS',
9505          check_table(idx).level,
9506          'JOB_QUEUE_PROCESSES value must be updated.',
9507          edetails,
9508          'Either remove setting of JOB_QUEUE_PROCESSES value ' ||
9509          'or set it to a value greater than ' || to_char(p_lowest) ||
9510          '.',
9511          c_dbua_detail_type_text,
9512          'Either remove setting of JOB_QUEUE_PROCESSES value ' ||
9513          'or set it to a value greater than ' || to_char(p_lowest) ||
9514          '.',
9515          c_dbua_fixup_type_manual,
9516          c_dbua_fixup_stage_pre );
9517    ELSE
9518      result_txt := JOB_QUEUE_PROCESS_gethelp(c_help_overview);
9519    END IF;
9520    IF pOutputFixupScripts THEN
9521      genFixup ('JOB_QUEUE_PROCESS');
9522    END IF;
9523    RETURN c_status_failure;
9524  END job_queue_process_check;
9525  
9526  FUNCTION job_queue_process_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
9527  IS
9528    p_count     NUMBER := -1;
9529    error_level NUMBER;
9530    status      NUMBER;
9531    result_txt  VARCHAR2(1500);
9532  
9533  BEGIN
9534    IF HelpType = c_help_overview THEN
9535      BEGIN
9536        EXECUTE IMMEDIATE 'SELECT value FROM v$parameter WHERE
9537              name=''job_queue_processes'''
9538        INTO p_count;
9539      EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
9540      END;
9541      --
9542      -- Note:  We are going to assume the caller knows there is
9543      -- an issue, so if the count is non-zero, its going to be below
9544      -- cpu*threads which is a warning.
9545      --
9546      IF p_count = 0 THEN
9547        result_txt := 'ERROR: --> job_queue_processes set to zero' || crlf
9548          || crlf || '     Starting with Oracle Database 11g Release 2 (11.2), setting'
9549          || crlf || '     JOB_QUEUE_PROCESSES to 0 causes both DBMS_SCHEDULER and'
9550          || crlf || '     DBMS_JOB jobs to not run. Previously, setting JOB_QUEUE_PROCESSES'
9551          || crlf || '     to 0 caused DBMS_JOB jobs to not run, but DBMS_SCHEDULER jobs were'
9552          || crlf || '     unaffected and would still run.';
9553      ELSE
9554        result_txt := 'WARNING: --> job_queue_processes set too low' || crlf;
9555      END IF;
9556      -- Now add the rest
9557      result_txt := result_txt
9558        || crlf || '     This parameter must be removed or updated to a value greater'
9559        || crlf || '     than ' || to_char(db_cpus*db_cpu_threads)
9560                || ' (default value if not defined is 1000) prior to upgrade.'
9561        || crlf || '     Not doing so will affect the running of utlrp.sql after the upgrade'
9562        || crlf || crlf || '     Update your init.ora or spfile to make this change.';
9563    ELSIF HelpType = c_help_fixup THEN
9564      result_txt := 'Review and increase or remove the setting of job_queue_processes';
9565    END IF;
9566    RETURN result_txt;
9567  END job_queue_process_gethelp;
9568  --
9569  -- Fixup (Procedure and function)
9570  --
9571  PROCEDURE job_queue_process_fixup
9572  IS
9573    result  VARCHAR2(1000);
9574    status  NUMBER;
9575    tSqlcode NUMBER;
9576  BEGIN
9577    -- Call fixup and throw away the result
9578    status := job_queue_process_fixup (result, tSqlcode);
9579  END job_queue_process_fixup;
9580  
9581  FUNCTION job_queue_process_fixup (
9582           result_txt IN OUT VARCHAR2,
9583           pSqlcode    IN OUT NUMBER) RETURN number
9584  IS
9585  BEGIN
9586     result_txt := job_queue_process_gethelp(c_help_overview);
9587     return c_fixup_status_info;
9588  END job_queue_process_fixup;
9589  
9590  -- *****************************************************************
9591  --     NACL_OBJECTS_EXIST Section
9592  -- *****************************************************************
9593  FUNCTION nacl_objects_exist_check (result_txt OUT VARCHAR2) RETURN number
9594  IS
9595    t_null      CHAR(1);
9596    status      NUMBER := 0;
9597  BEGIN
9598  
9599    IF (db_n_version NOT IN (102) AND pDBGFailCheck = FALSE) THEN
9600      -- Only valid for 10.2 upgrades
9601      return c_status_not_for_this_version;
9602    END IF;
9603  
9604    BEGIN
9605      EXECUTE IMMEDIATE 'SELECT NULL FROM sys.user$ WHERE name=''DMSYS'''
9606        INTO t_null;
9607      status := 1;
9608      EXCEPTION
9609         WHEN NO_DATA_FOUND THEN NULL;
9610    END;
9611  
9612    IF (status = 0 AND pDBGFailCheck = FALSE)
9613    THEN
9614      RETURN c_status_passed;
9615    END IF;
9616  
9617    IF pOutputType = c_output_xml THEN
9618      result_txt:= genDBUAXMLCheck('NACL_OBJECTS_EXIST',
9619        c_check_level_warning,
9620        'Database contains schemas with objects dependent on network packages.',
9621        'Database contains schemas with objects dependent on network packages.',
9622        'Refer to the Upgrade Guide for instructions to configure Network ACLs',
9623        c_dbua_detail_type_text,
9624        'Refer to the Upgrade Guide for instructions on how to re-configure Network ACLs.',
9625         c_dbua_fixup_type_manual,
9626         c_dbua_fixup_stage_pre );
9627    ELSE
9628      result_txt := nacl_objects_exist_gethelp(c_help_overview);
9629    END IF;
9630    IF pOutputFixupScripts THEN
9631      genFixup ('NACL_OBJECTS_EXIST');
9632    END IF;
9633    RETURN c_status_failure;
9634  END nacl_objects_exist_check;
9635  
9636  FUNCTION nacl_objects_exist_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
9637  IS
9638    owner       VARCHAR2(128);
9639    tstr        VARCHAR2(1000); -- Because of loop issues, use temp str
9640    tmp_cursor  cursor_t;
9641    result_txt  VARCHAR2(1500);
9642  BEGIN
9643    IF HelpType = c_help_overview THEN
9644      result_txt := 'WARNING: --> Existing schemas with network ACLs exist' || crlf
9645         || crlf || '     Database contains schemas with objects dependent on network packages.'
9646         || crlf || '     Refer to the Upgrade Guide for instructions to configure Network ACLs.';
9647  
9648      tstr := '';
9649      OPEN tmp_cursor FOR
9650        'SELECT DISTINCT owner FROM DBA_DEPENDENCIES'
9651            || ' WHERE referenced_name IN'
9652            || ' (''UTL_TCP'',''UTL_SMTP'',''UTL_MAIL'',''UTL_HTTP'',''UTL_INADDR'')'
9653            || ' AND owner NOT IN (''SYS'',''PUBLIC'',''ORDPLUGINS'')';
9654      LOOP
9655        FETCH tmp_cursor INTO owner;
9656        EXIT WHEN tmp_cursor%NOTFOUND;
9657        tstr := tstr
9658          || crlf || '     USER ' || owner || ' has dependent objects.';
9659      END LOOP;
9660      CLOSE tmp_cursor;
9661      IF (tstr IS NOT NULL OR tstr != '' ) THEN
9662        result_txt := result_txt || tstr;
9663      END IF;
9664  
9665      tstr := '';
9666      OPEN tmp_cursor FOR
9667         'SELECT DISTINCT owner FROM all_tab_columns'
9668            || ' WHERE data_type IN'
9669            || ' (''ORDIMAGE'', ''ORDAUDIO'', ''ORDVIDEO'', ''ORDDOC'','
9670            || '  ''ORDSOURCE'', ''ORDDICOM'') AND'
9671            || '    (data_type_owner = ''ORDSYS'' OR'
9672            || '       data_type_owner = owner) AND'
9673            || '         (owner != ''PM'')';
9674      LOOP
9675        FETCH tmp_cursor INTO owner;
9676        EXIT WHEN tmp_cursor%NOTFOUND;
9677        tstr := tstr
9678           || crlf || '     USER ' || owner || ' uses interMedia and may have dependent objects.';
9679      END LOOP;
9680      CLOSE tmp_cursor;
9681      IF (tstr IS NOT NULL OR tstr != '' ) THEN
9682        result_txt := result_txt || tstr;
9683      END IF;
9684    ELSIF HelpType = c_help_fixup THEN
9685      result_txt := 'Objects with network acls are displayed and need to be reviewed.';
9686    END IF;
9687    RETURN result_txt;
9688  END nacl_objects_exist_gethelp;
9689  --
9690  -- Fixup (Procedure and function)
9691  --
9692  PROCEDURE nacl_objects_exist_fixup
9693  IS
9694    result  VARCHAR2(1500);
9695    status  NUMBER;
9696    tSqlcode NUMBER;
9697  BEGIN
9698    -- Call fixup and throw away the result
9699    status := nacl_objects_exist_fixup (result, tSqlcode);
9700  END nacl_objects_exist_fixup;
9701  
9702  FUNCTION nacl_objects_exist_fixup (
9703           result_txt IN OUT VARCHAR2,
9704           pSqlcode    IN OUT NUMBER) RETURN number
9705  IS
9706  BEGIN
9707    -- Dump out the same thing we give for help
9708    result_txt := nacl_objects_exist_gethelp(c_help_overview);
9709    return c_fixup_status_info;
9710  END nacl_objects_exist_fixup;
9711  
9712  -- *****************************************************************
9713  --     NEW_TIME_ZONES_EXIST Section
9714  -- *****************************************************************
9715  FUNCTION NEW_TIME_ZONES_EXIST_check (result_txt OUT VARCHAR2) RETURN number
9716  IS
9717    status NUMBER;
9718  BEGIN
9719    IF db_tz_version <= c_tz_version AND pDBGFailCheck = FALSE
9720    THEN
9721      RETURN c_status_success; -- success
9722    ELSE
9723      IF pOutputType = c_output_xml THEN
9724        result_txt:= genDBUAXMLCheck('NEW_TIME_ZONES_EXIST',
9725          c_check_level_error,
9726          'Your database contains a time zone file newer than that of the new Oracle software.',
9727          'Your database contains a time zone file newer than that of the new Oracle software.',
9728          'Patch new oracle home with time zone file equivalent to existing Oracle database.',
9729           c_dbua_detail_type_text,
9730          'SELECT version from v$timezone_file',
9731          c_dbua_fixup_type_manual,
9732          c_dbua_fixup_stage_pre );
9733      ELSE
9734        result_txt := NEW_TIME_ZONES_EXIST_gethelp(c_help_overview);
9735      END IF;
9736      IF pOutputFixupScripts THEN
9737        genFixup ('NEW_TIME_ZONES_EXIST');
9738      END IF;
9739      RETURN c_status_failure;
9740     END IF;
9741  END NEW_TIME_ZONES_EXIST_check;
9742  
9743  FUNCTION NEW_TIME_ZONES_EXIST_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
9744  IS
9745  BEGIN
9746    IF HelpType = c_help_overview THEN
9747      return 'ERROR: --> New Timezone File in use' || crlf
9748         || crlf || '     Database is using a time zone file newer than version '
9749                         || c_tz_version  || '.'
9750         || crlf || '     BEFORE upgrading the database, patch the new '
9751         || crlf || '     ORACLE_HOME/oracore/zoneinfo/ with a time zone data file of the'
9752         || crlf || '     same version as the one used in the ' || db_version
9753         || ' release database.';
9754    ELSIF HelpType = c_help_fixup THEN
9755      return 'Time zone data file must be updated in the new ORACLE_HOME.';
9756    END IF;
9757  END NEW_TIME_ZONES_EXIST_gethelp;
9758  --
9759  -- Fixup (Procedure and function)
9760  --
9761  PROCEDURE NEW_TIME_ZONES_EXIST_fixup
9762  IS
9763    result  VARCHAR2(1000);
9764    status  NUMBER;
9765    tSqlcode NUMBER;
9766  BEGIN
9767    -- Call fixup and throw away the result
9768    status := NEW_TIME_ZONES_EXIST_fixup (result, tSqlcode);
9769  END NEW_TIME_ZONES_EXIST_fixup;
9770  
9771  FUNCTION NEW_TIME_ZONES_EXIST_fixup (
9772           result_txt IN OUT VARCHAR2,
9773           pSqlcode    IN OUT NUMBER) RETURN number
9774  IS
9775  BEGIN
9776    -- Dump out the same thing we give for help
9777    result_txt := NEW_TIME_ZONES_EXIST_gethelp(c_help_overview);
9778    return c_fixup_status_info;
9779  END NEW_TIME_ZONES_EXIST_fixup;
9780  -- *****************************************************************
9781  --     OCM_USER_PRESENT Section
9782  -- *****************************************************************
9783  FUNCTION OCM_USER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
9784  IS
9785    user_exists BOOLEAN;
9786    tmp_num1    NUMBER;
9787    status      NUMBER;
9788    t_null      CHAR(1);
9789  BEGIN
9790  
9791    IF (db_n_version NOT IN (102,111) AND pDBGFailCheck = FALSE) THEN
9792      return c_status_not_for_this_version;
9793    END IF;
9794  
9795    user_exists := TRUE;
9796    BEGIN
9797      EXECUTE IMMEDIATE
9798       'SELECT user# from SYS.USER$ WHERE name=''ORACLE_OCM'''
9799       INTO tmp_num1;
9800      EXCEPTION WHEN NO_DATA_FOUND then user_exists := FALSE;
9801    END;
9802  
9803    IF user_exists THEN
9804      BEGIN
9805        EXECUTE IMMEDIATE
9806         'SELECT NULL FROM sys.obj$ WHERE owner# = (SELECT user# from SYS.USER$
9807             WHERE name=''ORACLE_OCM'') AND
9808               name =''MGMT_DB_LL_METRICS'' AND  type# = 9'
9809          INTO t_null;
9810        EXCEPTION
9811          WHEN NO_DATA_FOUND then user_exists := TRUE;
9812      END;
9813    END IF;
9814  
9815    IF user_exists = FALSE AND pDBGFailCheck = FALSE
9816    THEN
9817      RETURN c_status_success;   -- No user, not debug
9818    ELSE
9819      IF pOutputType = c_output_xml THEN
9820        result_txt:= genDBUAXMLCheck('OCM_USER_PRESENT',
9821          c_check_level_warning,
9822          'User OCM present in database',
9823          'User OCM present in database',
9824          'Remove OCM user from the database prior to Upgrade',
9825           c_dbua_detail_type_text,
9826          'The OCM internal account is present in your database'
9827            || ' and should be dropped prior to upgrading',
9828          c_dbua_fixup_type_auto,
9829          c_dbua_fixup_stage_pre);
9830      ELSE
9831        result_txt := ocm_user_present_gethelp(c_help_overview);
9832      END IF;
9833      IF pOutputFixupScripts THEN
9834        genFixup ('OCM_USER_PRESENT');
9835      END IF;
9836      RETURN c_status_failure;
9837     END IF;
9838  END OCM_USER_PRESENT_check;
9839  
9840  FUNCTION OCM_USER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
9841  IS
9842  BEGIN
9843    IF HelpType = c_help_overview THEN
9844      return 'WARNING: --> "ORACLE_OCM" user found in database' || crlf
9845       || crlf || '     This is an internal account used by Oracle Configuration Manager. '
9846       || crlf || '     Please drop this user prior to upgrading.';
9847    ELSIF HelpType = c_help_fixup THEN
9848      return 'Drop the ORACLE_OCM user.';
9849    END IF;
9850  END OCM_USER_PRESENT_gethelp;
9851  --
9852  -- Fixup (Procedure and function)
9853  --
9854  PROCEDURE OCM_USER_PRESENT_fixup
9855  IS
9856    result  VARCHAR2(1000);
9857    status  NUMBER;
9858    tSqlcode NUMBER;
9859  BEGIN
9860    -- Call fixup and throw away the result
9861    status := OCM_USER_PRESENT_fixup (result, tSqlcode);
9862  END OCM_USER_PRESENT_fixup;
9863  
9864  FUNCTION OCM_USER_PRESENT_fixup (
9865           result_txt IN OUT VARCHAR2,
9866           pSqlcode    IN OUT NUMBER) RETURN number
9867  IS
9868  BEGIN
9869     return execute_sql_statement ('DROP USER ORACLE_OCM CASCADE', result_txt, pSqlcode);
9870  END OCM_USER_PRESENT_fixup;
9871  
9872  -- *****************************************************************
9873  --     OLD_TIME_ZONES_EXISTS Section
9874  -- *****************************************************************
9875  FUNCTION old_time_zones_exist_check (result_txt OUT VARCHAR2) RETURN number
9876  IS
9877    status  NUMBER;
9878  BEGIN
9879    --
9880    -- Do we have a valid time zone for an upgrade
9881    --
9882    IF db_tz_version < c_tz_version OR pDBGFailCheck THEN
9883      IF pOutputType = c_output_xml THEN
9884        result_txt:= genDBUAXMLCheck('OLD_TIME_ZONES_EXIST',
9885          c_check_level_warning,
9886          'Database is using a time zone file older than shipped with the new Oracle Software',
9887          'Your time zone file must be updated, this can be done after the Upgrade is executed.',
9888          'Execute the dbms_dst package after your database is upgraded.',
9889          c_dbua_detail_type_text,
9890          'Execute the dbms_dst package after your database is upgraded.',
9891          c_dbua_fixup_type_auto,
9892          c_dbua_fixup_stage_pre);
9893      ELSE
9894        result_txt := old_time_zones_exist_gethelp(c_help_overview);
9895      END IF;
9896      IF pOutputFixupScripts THEN
9897        genFixup ('OLD_TIME_ZONES_EXIST');
9898      END IF;
9899      RETURN c_status_failure;
9900    END IF;
9901    RETURN c_status_success;
9902  END old_time_zones_exist_check ;
9903  
9904  FUNCTION old_time_zones_exist_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
9905  IS
9906  BEGIN
9907    IF HelpType = c_help_overview THEN
9908      return 'INFORMATION: --> Older Timezone in use' || crlf
9909        || crlf || '     Database is using a time zone file older than version '
9910                         || c_tz_version || '.'
9911        || crlf || '     After the upgrade, it is recommended that DBMS_DST package'
9912        || crlf || '     be used to upgrade the ' || db_version || ' database time zone version'
9913        || crlf || '     to the latest version which comes with the new release.'
9914        || crlf || '     Please refer to My Oracle Support note number 977512.1 for details.';
9915    ELSIF HelpType = c_help_fixup THEN
9916      return 'Update the timezone using the DBMS_DST package after upgrade is complete.';
9917    END IF;
9918  END old_time_zones_exist_gethelp;
9919  --
9920  PROCEDURE old_time_zones_exist_fixup
9921  IS
9922    result   VARCHAR2(1000);
9923    status   NUMBER;
9924    tSqlcode  NUMBER;
9925  BEGIN
9926    -- Call fixup and throw away the result
9927    status := old_time_zones_exist_fixup (result, tSqlcode);
9928  END old_time_zones_exist_fixup;
9929  
9930  FUNCTION old_time_zones_exist_fixup (
9931           result_txt IN OUT VARCHAR2,
9932           pSqlcode    IN OUT NUMBER) RETURN number
9933  IS
9934  BEGIN
9935     result_txt := old_time_zones_exist_gethelp(c_help_overview);
9936     pSqlcode := 0;
9937     return c_fixup_status_info;
9938  END old_time_zones_exist_fixup;
9939  -- *****************************************************************
9940  --     ols_sys_move Section
9941  -- *****************************************************************
9942  FUNCTION ols_sys_move_check (result_txt OUT VARCHAR2) RETURN number
9943  IS
9944    preaud_cnt       INTEGER := 0;
9945    status           NUMBER  := -1;
9946    condition_exists BOOLEAN := FALSE;
9947  BEGIN
9948    -- system.aud$ doesn't exist in releases starting in 12.1, its already
9949    -- present in sys.aud$
9950    IF (db_n_version NOT IN (102, 111, 112) AND pDBGFailCheck = FALSE) THEN
9951      RETURN c_status_success;
9952    END IF;
9953  
9954    BEGIN
9955      -- Check if OLS is installed in previous version
9956      EXECUTE IMMEDIATE 'SELECT status FROM sys.registry$ WHERE cid=''OLS''
9957                         AND namespace=''SERVER'''
9958         INTO status;
9959      EXCEPTION WHEN OTHERS THEN NULL;
9960    END;
9961  
9962    -- bug 16317592: check if SYS.aud$ already exists. may be upgrade
9963    -- script was run before. If SYS.aud$ exists, don't do anything
9964    SELECT count(*) INTO preaud_cnt FROM dba_tables
9965    WHERE table_name = 'AUD$' AND owner = 'SYS';
9966  
9967    IF ((status != -1) AND (preaud_cnt != 1)) THEN
9968      BEGIN
9969        --
9970        -- This check means the ols script has not been executed
9971        --
9972        EXECUTE IMMEDIATE 'SELECT count(*) FROM dba_tables where OWNER=''SYS'' AND table_name=''PREUPG_AUD$'''
9973          into preaud_cnt;
9974        IF preaud_cnt = 0 THEN
9975          condition_exists := TRUE;
9976        END IF;
9977      END;
9978    END IF;
9979  
9980    IF (condition_exists = FALSE AND
9981        pDBGFailCheck = FALSE) THEN
9982      RETURN c_status_success;
9983    END IF;
9984  
9985    IF pOutputType = c_output_xml THEN
9986      result_txt:= genDBUAXMLCheck('OLS_SYS_MOVE',
9987        c_check_level_error,
9988        'olspreupgrade.sql has not been executed on this database',
9989        'Oracle requires that olspreupgrade.sql be executed to move audit records into the correct table.',
9990        'The script rdbms/admin/olspreupgrade.sql must be executed to move records over prior to the upgrade.',
9991        c_dbua_detail_type_text,
9992        'To view the number of records that will be moved use the command: SELECT count(*) from system.aud$',
9993        c_dbua_fixup_type_manual,
9994        c_dbua_fixup_stage_pre);
9995    ELSE
9996      result_txt := ols_sys_move_gethelp (c_help_overview);
9997    END IF;
9998    IF pOutputFixupScripts THEN
9999      genFixup ('OLS_SYS_MOVE');
10000    END IF;
10001    RETURN c_status_failure;
10002  END ols_sys_move_check;
10003  
10004  FUNCTION ols_sys_move_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10005  IS
10006    aud_rowcnt  INTEGER := -1;
10007    result_txt  VARCHAR2(1500);
10008  BEGIN
10009    IF HelpType = c_help_overview THEN
10010      BEGIN
10011        EXECUTE IMMEDIATE 'SELECT count(*) FROM SYSTEM.aud$'
10012          INTO aud_rowcnt;
10013        EXCEPTION
10014          WHEN OTHERS THEN NULL;
10015      END;
10016  
10017      --
10018      -- In debug mode we want both messages to come out.
10019      --
10020      IF aud_rowcnt = -1 OR pDBGFailCheck = TRUE THEN
10021        result_txt := 'ERROR: --> SYSTEM.AUD$ (audit records) Move'
10022          || crlf || crlf || '    An error occured retrieving a count from SYSTEM.AUD$'
10023          || crlf ||         '    This can happen when the table has already been cleaned up.'
10024          || crlf ||         '    The olspreupgrade.sql script should be re-executed.';
10025      END IF;
10026  
10027      IF aud_rowcnt != -1 OR pDBGFailCheck = TRUE THEN
10028        result_txt := 'ERROR: --> SYSTEM.AUD$ (audit records) Move'
10029          || crlf || crlf || '     Oracle requires that records in the audit table SYSTEM.AUD$ be moved'
10030          || crlf ||         '     to SYS.AUD$ prior to upgrading..'
10031          || crlf || crlf || '     The Database has ' || aud_rowcnt || ' rows in SYSTEM.AUD$ which'
10032          || crlf ||         '     will be moved during the upgrade.'
10033          || crlf || crlf || '     The downtime during the upgrade will be affected if there are a'
10034          || crlf ||         '     large number of rows to be moved.'
10035          || crlf || crlf || '     The audit data can be moved manually prior to the upgrade by using'
10036          || crlf ||         '     the script: rdbms/admin/olspreupgrade.sql which is part of the'
10037          || crlf ||         '     Oracle Database 12c software.'
10038          || crlf ||         '     Please refer to the Label Security Administrator guide or'
10039          || crlf ||         '     the Database Upgrade guide.';
10040      END IF;
10041    ELSIF HelpType = c_help_fixup THEN
10042      result_txt := 'Execute olspreupgrade.sql script prior to upgrade.';
10043    END IF;
10044    RETURN result_txt;
10045  END ols_sys_move_gethelp;
10046  --
10047  -- Fixup (Procedure and function)
10048  --
10049  PROCEDURE ols_sys_move_fixup
10050  IS
10051    result  VARCHAR2(1000);
10052    status  NUMBER;
10053    tSqlcode NUMBER;
10054  BEGIN
10055    -- Call fixup and throw away the result
10056    status := ols_sys_move_fixup (result, tSqlcode);
10057  END ols_sys_move_fixup;
10058  
10059  FUNCTION ols_sys_move_fixup (
10060           result_txt IN OUT VARCHAR2,
10061           pSqlcode    IN OUT NUMBER) RETURN number
10062  IS
10063  BEGIN
10064     result_txt := ols_sys_move_gethelp(c_help_overview);
10065     return c_fixup_status_info;
10066  END ols_sys_move_fixup;
10067  
10068  -- *****************************************************************
10069  --     ORDIMAGEINDEX Section
10070  -- *****************************************************************
10071  FUNCTION ORDIMAGEINDEX_check (result_txt OUT VARCHAR2) RETURN number
10072  IS
10073    t_count NUMBER := 0;
10074    status  NUMBER;
10075  BEGIN
10076    --
10077    -- The upgrade will remove them, so the misc warning section will
10078    -- let them know.
10079    --
10080    BEGIN
10081      EXECUTE IMMEDIATE
10082       'SELECT COUNT(*) FROM sys.dba_indexes WHERE index_type = ''DOMAIN''
10083           and ityp_name = ''ORDIMAGEINDEX'''
10084     INTO t_count;
10085    EXCEPTION
10086       WHEN OTHERS THEN NULL;
10087    END;
10088  
10089    IF (t_count = 0 AND pDBGFailCheck = FALSE) THEN
10090      RETURN c_status_success;
10091    ELSE
10092      IF pOutputType = c_output_xml THEN
10093        result_txt:= genDBUAXMLCheck('ORDIMAGEINDEX',
10094          c_check_level_info,
10095          'Ordsys.OrdImageIndex is in use.  These images are dropped as part of the upgrade',
10096          'Ordsys.OrdImageIndex is in use',
10097          'Images are cleaned up as part of the upgrade process.',
10098          c_dbua_detail_type_sql,
10099          htmlentities('SELECT COUNT(*) FROM sys.dba_indexes WHERE index_type'
10100            || ' = ''DOMAIN'' and ityp_name = ''ORDIMAGEINDEX'''),
10101          c_dbua_fixup_type_auto,
10102          c_dbua_fixup_stage_pre );
10103      ELSE
10104        result_txt := ORDIMAGEINDEX_gethelp(c_help_overview);
10105      END IF;
10106      IF pOutputFixupScripts THEN
10107        genFixup ('ORDIMAGEINDEX');
10108      END IF;
10109      RETURN c_status_failure;
10110     END IF;
10111  END ORDIMAGEINDEX_check;
10112  
10113  FUNCTION ORDIMAGEINDEX_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10114  IS
10115    tmp_cursor   cursor_t;
10116    tmp_varchar1 VARCHAR2(512);
10117    tmp_varchar2 VARCHAR2(512);
10118    tstr         VARCHAR2(1000);
10119    result_txt   VARCHAR2(1500);
10120  BEGIN
10121    IF HelpType = c_help_overview THEN
10122      result_txt := 'INFORMATION: --> ORDSYS.OrdImageIndex in use' || crlf
10123        || crlf || '     The previously desupported Oracle Multimedia image domain index,'
10124        || crlf || '     ORDSYS.OrdImageIndex, is no longer supported and has been removed in '
10125        || crlf || '     Oracle Database 11g Release 2 (11.2). '
10126        || crlf || '     Following is the list of affected indexes that are dropped'
10127        || crlf || '     during the upgrade.';
10128      OPEN tmp_cursor FOR
10129         'SELECT dbai.index_name, dbai.owner FROM SYS.DBA_INDEXES dbai
10130            WHERE dbai.index_type = ''DOMAIN'' AND
10131              dbai.ityp_name  = ''ORDIMAGEINDEX''
10132           ORDER BY dbai.owner';
10133      tstr := '';
10134      LOOP
10135        FETCH tmp_cursor INTO tmp_varchar1, tmp_varchar2;
10136        EXIT WHEN tmp_cursor%NOTFOUND;
10137        tstr := tstr || crlf || '     USER: ' || RPAD(tmp_varchar2, 32) ||
10138                       ' Index: ' || RPAD(tmp_varchar1,32);
10139      END LOOP;
10140      CLOSE tmp_cursor;
10141      IF (tstr IS NOT NULL OR tstr != '' ) THEN
10142        result_txt := result_txt || tstr;
10143      END IF;
10144    ELSIF HelpType = c_help_fixup THEN
10145      result_txt := 'Cleanup of ordimageIndexes is performed during the upgrade';
10146    END IF;
10147    RETURN result_txt;
10148  END ORDIMAGEINDEX_gethelp;
10149  --
10150  -- Fixup (Procedure and function)
10151  --
10152  PROCEDURE ORDIMAGEINDEX_fixup
10153  IS
10154    result  VARCHAR2(1000);
10155    status  NUMBER;
10156    tSqlcode NUMBER;
10157  BEGIN
10158    -- Call fixup and throw away the result
10159    status := ORDIMAGEINDEX_fixup (result, tSqlcode);
10160  END ORDIMAGEINDEX_fixup;
10161  
10162  FUNCTION ORDIMAGEINDEX_fixup (
10163           result_txt IN OUT VARCHAR2,
10164           pSqlcode    IN OUT NUMBER) RETURN number
10165  IS
10166  BEGIN
10167     result_txt :=
10168       'OrdimageIndexes are cleaned up as part of the upgrade';
10169     pSqlcode := 1;
10170     return c_fixup_status_info;
10171  END ORDIMAGEINDEX_fixup;
10172  -- *****************************************************************
10173  --     2PC_TXN_EXIST Section
10174  -- *****************************************************************
10175  FUNCTION PENDING_2PC_TXN_check (result_txt OUT VARCHAR2) RETURN number
10176  IS
10177    t_null      CHAR(1);
10178    status      NUMBER;
10179  BEGIN
10180  
10181    BEGIN
10182      EXECUTE IMMEDIATE 'SELECT NULL FROM sys.dba_2pc_pending WHERE rownum <=1'
10183      INTO t_null;
10184        status := 1;
10185    EXCEPTION
10186      WHEN NO_DATA_FOUND THEN status := 0;
10187    END;
10188  
10189    IF (status = 0 AND pDBGFailCheck = FALSE)
10190    THEN
10191      RETURN c_status_success;
10192    ELSE
10193      IF pOutputType = c_output_xml THEN
10194        result_txt:= genDBUAXMLCheck('2PC_TXN_EXIST',
10195          c_check_level_warning,
10196          'There are outstanding unresolved distributed transactions. Resolve outstanding distributed transactions prior to upgrade.',
10197          'Resolve outstanding distributed transactions prior to upgrade.',
10198          'Resolve outstanding distributed transactions prior to upgrade.',
10199           c_dbua_detail_type_sql,
10200          htmlentities('SELECT count(*) FROM sys.dba_2pc_pending WHERE rownum <=1'),
10201          c_dbua_fixup_type_manual,
10202          c_dbua_fixup_stage_pre);
10203      ELSE
10204        result_txt := PENDING_2PC_TXN_gethelp(c_help_overview);
10205      END IF;
10206      IF pOutputFixupScripts THEN
10207        genFixup ('2PC_TXN_EXIST');
10208      END IF;
10209      RETURN c_status_failure;
10210     END IF;
10211  END PENDING_2PC_TXN_check;
10212  
10213  FUNCTION PENDING_2PC_TXN_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10214  IS
10215  BEGIN
10216    IF HelpType = c_help_overview THEN
10217      return 'ERROR: --> Unresolved distributed transactions' || crlf
10218        || crlf || '     There are outstanding unresolved distributed transactions.'
10219        || crlf || '     Resolve all outstanding distributed transactions prior to upgrade.';
10220    ELSIF HelpType = c_help_fixup THEN
10221      return 'Distributed transactions must be resolved prior to upgrade.';
10222    END IF;
10223  END PENDING_2PC_TXN_gethelp;
10224  --
10225  -- Fixup (Procedure and function)
10226  --
10227  PROCEDURE PENDING_2PC_TXN_fixup
10228  IS
10229    result  VARCHAR2(1000);
10230    status  NUMBER;
10231    tSqlcode NUMBER;
10232  BEGIN
10233    -- Call fixup and throw away the result
10234    status := PENDING_2PC_TXN_fixup (result, tSqlcode);
10235  END PENDING_2PC_TXN_fixup;
10236  
10237  FUNCTION PENDING_2PC_TXN_fixup (
10238           result_txt IN OUT VARCHAR2,
10239           pSqlcode    IN OUT NUMBER) RETURN number
10240  IS
10241  BEGIN
10242    -- Dump out the same thing we give for help
10243    result_txt := PENDING_2PC_TXN_gethelp(c_help_overview);
10244    return c_fixup_status_info;
10245  END PENDING_2PC_TXN_fixup;
10246  
10247  -- *****************************************************************
10248  --     Recycle Bin Section
10249  -- *****************************************************************
10250  FUNCTION purge_recyclebin_check (result_txt OUT VARCHAR2) RETURN number
10251  IS
10252    obj_count NUMBER;
10253  BEGIN
10254     EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM sys.recyclebin$'
10255       INTO obj_count;
10256    IF (obj_count > 0 OR pDBGFailCheck)
10257    THEN
10258  
10259      IF (pDBGFailCheck AND obj_count = 0) THEN
10260        obj_count := 10;  -- Give it some non-zero number
10261      END IF;
10262  
10263      IF pOutputType = c_output_xml THEN
10264        result_txt:= genDBUAXMLCheck('PURGE_RECYCLEBIN', c_check_level_error,
10265          'Recycle Bin is not empty',
10266          'Recycle bin is not empty',
10267          'BEGIN dbms_preup.purge_recyclebin_fixup; END;',
10268          c_dbua_detail_type_sql,
10269          'select count(*) from sys.recyclebin$',
10270          c_dbua_fixup_type_auto,
10271          c_dbua_fixup_stage_validation);
10272      ELSE
10273        result_txt :=  'ERROR: --> RECYCLE_BIN not empty.'
10274             || crlf || '     Your recycle bin contains ' || TO_CHAR(obj_count) || ' object(s). '
10275             || crlf || '     It is REQUIRED that the recycle bin is empty prior to upgrading.'
10276             || crlf || '     Immediately before performing the upgrade, execute the following'
10277             || crlf || '     command:'
10278             || crlf || '       EXECUTE dbms_preup.purge_recyclebin_fixup;';
10279      END IF;
10280      IF pOutputFixupScripts THEN
10281        genFixup ('PURGE_RECYCLEBIN');
10282      END IF;
10283      RETURN c_status_failure;
10284    ELSE
10285      RETURN c_status_success; -- success
10286    END IF;
10287  END purge_recyclebin_check;
10288  
10289  FUNCTION purge_recyclebin_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10290  IS
10291    obj_count  NUMBER;
10292    result_txt VARCHAR2(1500);
10293  BEGIN
10294    IF HelpType = c_help_overview THEN
10295      EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM sys.recyclebin$'
10296        INTO obj_count;
10297      IF (pDBGFailCheck AND obj_count = 0) THEN
10298        obj_count := 10;  -- Give it some non-zero number
10299      END IF;
10300  
10301      result_txt :=  'ERROR: --> Recycle Bin not empty' || crlf
10302          || crlf || '     Your recycle bin contains ' || TO_CHAR(obj_count) || ' object(s).'
10303          || crlf || '     It is REQUIRED that the recycle bin is empty prior to upgrading'
10304          || crlf || '     your database.  The command:'
10305          || crlf || '         execute dbms_preup.purge_recyclebin_fixup;'
10306          || crlf || '     must be executed immediately prior to executing your upgrade.';
10307    ELSIF HelpType = c_help_fixup THEN
10308      result_txt := 'The recycle bin will be purged.';
10309    END IF;
10310    RETURN result_txt;
10311  END purge_recyclebin_gethelp;
10312  --
10313  -- Fixup
10314  --
10315  PROCEDURE purge_recyclebin_fixup
10316  IS
10317    result  VARCHAR2(1000);
10318    status  NUMBER;
10319    tSqlcode NUMBER;
10320  BEGIN
10321    -- Call fixup and throw away the result
10322    status := purge_recyclebin_fixup (result, tSqlcode);
10323  END purge_recyclebin_fixup;
10324  
10325  FUNCTION purge_recyclebin_fixup (
10326           result_txt IN OUT VARCHAR2,
10327           pSqlcode    IN OUT NUMBER) RETURN number
10328  IS
10329  BEGIN
10330     return execute_sql_statement ('PURGE DBA_RECYCLEBIN',
10331          result_txt, pSqlcode);
10332  END purge_recyclebin_fixup;
10333  
10334  -- *****************************************************************
10335  --     REMOVE_DMSYS Section
10336  -- *****************************************************************
10337  FUNCTION REMOVE_DMSYS_check (result_txt OUT VARCHAR2) RETURN number
10338  IS
10339    t_null      CHAR(1);
10340    status      NUMBER := 0;
10341  BEGIN
10342  
10343    IF (db_n_version NOT IN (102,111,112,121) AND pDBGFailCheck = FALSE) THEN
10344      RETURN c_status_success;
10345    END IF;
10346  
10347    BEGIN
10348      EXECUTE IMMEDIATE 'SELECT NULL FROM sys.user$ WHERE name=''DMSYS'''
10349        INTO t_null;
10350      status := 1;
10351      EXCEPTION
10352         WHEN NO_DATA_FOUND THEN NULL;
10353    END;
10354  
10355    IF (status = 0 AND pDBGFailCheck = FALSE)
10356    THEN
10357      RETURN c_status_success;
10358    ELSE
10359      IF pOutputType = c_output_xml THEN
10360        result_txt:= genDBUAXMLCheck('REMOVE_DMSYS',
10361          c_check_level_info,
10362          'The DMSYS schema exists in the database and will be '
10363            || 'removed during the upgrade. '
10364            || 'Refer to the Oracle Data Mining User''s Guide for '
10365            || 'instructions on how to perform this task.',
10366          'The DMSYS schema exists in the database.',
10367          'Refer to the Oracle Data Mining User''s Guide for '
10368            || 'instructions on how to perform this task.',
10369           c_dbua_detail_type_sql,
10370          'select name from sys.user$ where name=''DMSYS''',
10371          c_dbua_fixup_type_manual,
10372          c_dbua_fixup_stage_pre );
10373      ELSE
10374        result_txt := REMOVE_DMSYS_gethelp(c_help_overview);
10375      END IF;
10376      IF pOutputFixupScripts THEN
10377        genFixup ('REMOVE_DMSYS');
10378      END IF;
10379      RETURN c_status_failure;
10380     END IF;
10381  END REMOVE_DMSYS_check;
10382  
10383  FUNCTION REMOVE_DMSYS_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10384  IS
10385  BEGIN
10386    IF HelpType = c_help_overview THEN
10387      return 'WARNING: --> "DMSYS" schema exists in the database' || crlf
10388        || crlf || '     The DMSYS schema (Oracle Data Mining) will be removed'
10389        || crlf || '     from the database during the database upgrade.'
10390        || crlf || '     All data in DMSYS will be preserved under the SYS schema.'
10391        || crlf || '     Refer to the Oracle Data Mining User''s Guide for details.';
10392    ELSIF HelpType = c_help_fixup THEN
10393      return 'The DMSYS schema is removed as part of the upgrade.';
10394    END IF;
10395  END REMOVE_DMSYS_gethelp;
10396  --
10397  -- Fixup (Procedure and function)
10398  --
10399  PROCEDURE REMOVE_DMSYS_fixup
10400  IS
10401    result  VARCHAR2(1000);
10402    status  NUMBER;
10403    tSqlcode NUMBER;
10404  BEGIN
10405    -- Call fixup and throw away the result
10406    status := REMOVE_DMSYS_fixup (result, tSqlcode);
10407  END REMOVE_DMSYS_fixup;
10408  
10409  FUNCTION REMOVE_DMSYS_fixup (
10410           result_txt IN OUT VARCHAR2,
10411           pSqlcode    IN OUT NUMBER) RETURN number
10412  IS
10413  BEGIN
10414    -- Dump out the same thing we give for help
10415    result_txt := REMOVE_DMSYS_gethelp(c_help_overview);
10416    return c_fixup_status_info;
10417  END REMOVE_DMSYS_fixup;
10418  
10419  -- *****************************************************************
10420  --     XBRL_VERSION Section
10421  -- *****************************************************************
10422  FUNCTION XBRL_VERSION_check (result_txt OUT VARCHAR2) RETURN number
10423  IS
10424    t_null      CHAR(1);
10425    status      NUMBER := 0;
10426  BEGIN
10427  
10428    IF (db_n_version NOT IN (112,121) AND pDBGFailCheck = FALSE) THEN
10429      RETURN c_status_success;
10430    END IF;
10431  
10432    BEGIN
10433      EXECUTE IMMEDIATE 'SELECT NULL FROM sys.user$ WHERE name=''XBRLSYS'''
10434        INTO t_null;
10435      status := 1;
10436      EXCEPTION
10437         WHEN NO_DATA_FOUND THEN NULL;
10438    END;
10439  
10440    IF (status = 0 AND pDBGFailCheck = FALSE)
10441    THEN
10442      RETURN c_status_success;
10443    ELSE
10444      IF pOutputType = c_output_xml THEN
10445        result_txt:= genDBUAXMLCheck('XBRL_VERSION',
10446          c_check_level_info,
10447          'The XBRL Extension to XML DB is installed in the database. '
10448            || 'Before the database upgrade, please make sure the XBRL '
10449            || 'Extension has been upgraded to the latest available version '
10450            || 'on the current database.',
10451          'The XBRLSYS schema exists in the database.',
10452          'Refer to the Oracle Support Note for the latest available '
10453            || 'version on the current database.',
10454           c_dbua_detail_type_sql,
10455          'select name from sys.user$ where name=''XBRLSYS''',
10456          c_dbua_fixup_type_manual,
10457          c_dbua_fixup_stage_pre );
10458      ELSE
10459        result_txt := XBRL_VERSION_gethelp(c_help_overview);
10460      END IF;
10461      IF pOutputFixupScripts THEN
10462        genFixup ('XBRL_VERSION');
10463      END IF;
10464      RETURN c_status_failure;
10465     END IF;
10466  END XBRL_VERSION_check;
10467  
10468  FUNCTION XBRL_VERSION_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10469  IS
10470  BEGIN
10471    IF HelpType = c_help_overview THEN
10472      return 'WARNING: --> "XBRLSYS" schema exists in the database' || crlf
10473        || crlf || '     Before the database upgrade, please make sure the XBRL '
10474        || crlf || '     Extension has been upgraded to the latest available version '
10475        || crlf || '     on the current database.'
10476        || crlf || '     Refer to the Oracle Supporte Note for details.';
10477    ELSIF HelpType = c_help_fixup THEN
10478      return 'The XBRL Extension must have the latest available version on the current database';
10479    END IF;
10480  END XBRL_VERSION_gethelp;
10481  --
10482  -- Fixup (Procedure and function)
10483  --
10484  PROCEDURE XBRL_VERSION_fixup
10485  IS
10486    result  VARCHAR2(1000);
10487    status  NUMBER;
10488    tSqlcode NUMBER;
10489  BEGIN
10490    -- Call fixup and throw away the result
10491    status := XBRL_VERSION_fixup (result, tSqlcode);
10492  END XBRL_VERSION_fixup;
10493  
10494  FUNCTION XBRL_VERSION_fixup (
10495           result_txt IN OUT VARCHAR2,
10496           pSqlcode    IN OUT NUMBER) RETURN number
10497  IS
10498  BEGIN
10499    -- Dump out the same thing we give for help
10500    result_txt := XBRL_VERSION_gethelp(c_help_overview);
10501    return c_fixup_status_info;
10502  END XBRL_VERSION_fixup;
10503  
10504  -- *****************************************************************
10505  --     REMOTE_REDO Section
10506  -- *****************************************************************
10507  FUNCTION REMOTE_REDO_check (result_txt OUT VARCHAR2) RETURN number
10508  IS
10509    tmp_varchar1 VARCHAR2(100);
10510    t_count      INTEGER;
10511    status       NUMBER := 0;
10512  BEGIN
10513  
10514    IF (db_n_version NOT IN (102,111) AND pDBGFailCheck = FALSE) THEN
10515      return c_status_not_for_this_version;
10516    END IF;
10517    --
10518    -- Check to detect if REDO configuration is supported with beyond
10519    -- 11.2
10520    --
10521    --  For 11.2, REDO has changed its maximum number of remote redo transport
10522    --  destinations from 9 to 30, we need to see if 10 is being used, and what
10523    --  its default is, if its local, there is an error.
10524    --
10525    -- Condition 1) Archiving of log files is enabled
10526    --
10527    -- Condition 2) DB_RECOVERY_FILE_DEST is defined
10528    --
10529    -- Condition 3) No local destinations are defined
10530    --
10531    -- Condition 4) LOG_ARCHIVE_DEST_1 is in use, and is a remote destition
10532    --
10533    --
10534    -- Only continue if archive logging is on
10535    --
10536  
10537    BEGIN
10538      EXECUTE IMMEDIATE
10539        'SELECT LOG_MODE FROM v$database'
10540        INTO tmp_varchar1;
10541      EXCEPTION
10542         WHEN NO_DATA_FOUND THEN tmp_varchar1 := 'NOARCHIVELOG';
10543    END;
10544  
10545    IF tmp_varchar1 != 'ARCHIVELOG' AND pDBGFailCheck = FALSE THEN
10546      RETURN c_status_success;
10547    END IF;
10548  
10549    --
10550    -- Check for db_recovery_file_dest
10551    --
10552    tmp_varchar1 := NULL;
10553    BEGIN
10554      EXECUTE IMMEDIATE 'SELECT vp.value FROM v$parameter vp WHERE
10555                 UPPER(vp.NAME) = ''DB_RECOVERY_FILE_DEST'''
10556      INTO tmp_varchar1;
10557  
10558      EXCEPTION
10559        WHEN NO_DATA_FOUND THEN NULL;
10560    END;
10561  
10562    IF tmp_varchar1 IS NOT NULL OR tmp_varchar1 != '' THEN
10563      --
10564      -- See if there are any local destinations defined
10565      -- Note the regexp_like
10566      --
10567      EXECUTE IMMEDIATE '
10568        SELECT count(*) FROM v$parameter v
10569          WHERE v.NAME  LIKE ''log_archive_dest_%'' AND
10570          REGEXP_LIKE(v.VALUE,''*[ ^]?location([ ])?=([ ])?*'')'
10571      INTO t_count;
10572  
10573      IF t_count > 0 THEN
10574        --
10575        -- Next is _1 in use, and remote
10576        --
10577        EXECUTE IMMEDIATE '
10578          SELECT count(*) FROM v$archive_dest ad
10579          WHERE ad.status=''VALID'' AND ad.dest_id=1 AND
10580                   ad.target=''STANDBY'''
10581        INTO t_count;
10582  
10583        IF t_count = 1 THEN
10584          --
10585          -- There is an issue to report.
10586          --
10587          status := 1;
10588        END IF;
10589      END IF; -- t_count = 1
10590    END IF;  -- having local dest values set
10591  
10592    IF (status = 0 AND pDBGFailCheck = FALSE)
10593    THEN
10594      RETURN c_status_success;
10595    ELSE
10596      IF pOutputType = c_output_xml THEN
10597        result_txt:= genDBUAXMLCheck('REMOTE_REDO',
10598          c_check_level_warning,
10599          'Starting with 11.2, only LOG_ARCHIVE_DEST_1 is used for defaulting local'
10600            || 'archival of redo data.'
10601            || ' You must specify a destination for local archiving since '
10602            || 'LOG_ARCHIVE_DEST_1 is not available.',
10603          'You must specify a destination for local archiving since '
10604            || 'LOG_ARCHIVE_DEST_1 is not available.',
10605          'BEGIN dbms_preup.REMOTE_REDO_fixup; END',
10606          c_dbua_detail_type_text,
10607          'You must specify a destination for local archiving since '
10608            || 'LOG_ARCHIVE_DEST_1 is not available.',
10609          c_dbua_fixup_type_manual,
10610          c_dbua_fixup_stage_pre );
10611      ELSE
10612        result_txt := REMOTE_REDO_gethelp(c_help_overview);
10613      END IF;
10614      IF pOutputFixupScripts THEN
10615        genFixup ('REMOTE_REDO');
10616      END IF;
10617      RETURN c_status_failure;
10618     END IF;
10619  END REMOTE_REDO_check;
10620  
10621  FUNCTION REMOTE_REDO_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10622  IS
10623  BEGIN
10624    IF HelpType = c_help_overview THEN
10625      return 'ERROR: --> REDO Configuration not supported in 11.2' || crlf
10626          || crlf || '     Your REDO configuration is defaulting the use of'
10627          || crlf || '     LOG_ARCHIVE_DEST_10 for local archiving of redo data to'
10628          || crlf || '     the recovery area and has also defined'
10629          || crlf || '     LOG_ARCHIVE_DEST_1 for remote use.'
10630          || crlf || '     Starting with 11.2, only LOG_ARCHIVE_DEST_1 is used for defaulting local'
10631          || crlf || '     archival of redo data.'
10632          || crlf || '     You must specify a destination for local archiving since'
10633          || crlf || '     LOG_ARCHIVE_DEST_1 is not available.';
10634    ELSIF HelpType = c_help_fixup THEN
10635      return 'Manually specify a destination for local archiving.';
10636    END IF;
10637  END REMOTE_REDO_gethelp;
10638  --
10639  -- Fixup (Procedure and function)
10640  --
10641  PROCEDURE REMOTE_REDO_fixup
10642  IS
10643    result  VARCHAR2(1000);
10644    status  NUMBER;
10645    tSqlcode NUMBER;
10646  BEGIN
10647    -- Call fixup and throw away the result
10648    status := REMOTE_REDO_fixup (result, tSqlcode);
10649  END REMOTE_REDO_fixup;
10650  
10651  FUNCTION REMOTE_REDO_fixup (
10652           result_txt IN OUT VARCHAR2,
10653           pSqlcode    IN OUT NUMBER) RETURN number
10654  IS
10655  BEGIN
10656    -- Dump out the same thing we give for help
10657    result_txt := REMOTE_REDO_gethelp(c_help_overview);
10658    return c_fixup_status_info;
10659  END REMOTE_REDO_fixup;
10660  
10661  -- *****************************************************************
10662  --     SYNC_STANDBY_DB Section
10663  -- *****************************************************************
10664  FUNCTION SYNC_STANDBY_DB_check (result_txt OUT VARCHAR2) RETURN number
10665  IS
10666    t_null                 CHAR(1);
10667    status                 NUMBER := 0;
10668    unsynch_standby_count  NUMBER := 0;
10669  
10670  BEGIN
10671    BEGIN
10672      EXECUTE IMMEDIATE 'SELECT NULL FROM v$parameter WHERE
10673         name LIKE ''log_archive_dest%'' AND upper(value) LIKE ''SERVICE%''
10674         AND rownum <=1'
10675      INTO t_null;
10676  
10677      EXECUTE IMMEDIATE 'SELECT NULL FROM v$database WHERE
10678         database_role=''PRIMARY'''
10679      INTO t_null;
10680  
10681      EXECUTE IMMEDIATE 'SELECT COUNT(*)
10682                           FROM V$ARCHIVE_DEST_STATUS DS, V$ARCHIVE_DEST D
10683                           WHERE DS.DEST_ID = D.DEST_ID
10684                                 AND D.TARGET = ''STANDBY''
10685                                 AND NOT (DS.STATUS = ''VALID'' AND DS.GAP_STATUS = ''NO GAP'')'
10686      INTO unsynch_standby_count;
10687      IF (unsynch_standby_count > 0) THEN
10688          status := 1;
10689      END IF;
10690  
10691    EXCEPTION
10692        WHEN NO_DATA_FOUND THEN status := 0;
10693    END;
10694  
10695    IF (status = 0 AND pDBGFailCheck = FALSE)
10696    THEN
10697      RETURN c_status_success;
10698    ELSE
10699      IF pOutputType = c_output_xml THEN
10700        result_txt:= genDBUAXMLCheck('SYNC_STANDBY_DB',
10701          c_check_level_info,
10702          'Sync standby database prior to upgrade.',
10703          'Sync standby database prior to upgrade.',
10704          'Sync standby database prior to upgrade.',
10705          c_dbua_detail_type_sql,
10706          htmlentities('SELECT name FROM v$parameter WHERE'
10707             || ' name LIKE ''log_archive_dest%'' AND'
10708             || ' upper(value) LIKE ''SERVICE%'' AND rownum <=1'),
10709          c_dbua_fixup_type_manual,
10710          c_dbua_fixup_stage_pre );
10711      ELSE
10712        result_txt := SYNC_STANDBY_DB_gethelp(c_help_overview);
10713      END IF;
10714      IF pOutputFixupScripts THEN
10715        genFixup ('SYNC_STANDBY_DB');
10716      END IF;
10717      RETURN c_status_failure;
10718     END IF;
10719  END SYNC_STANDBY_DB_check;
10720  
10721  FUNCTION SYNC_STANDBY_DB_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10722  IS
10723  BEGIN
10724    IF HelpType = c_help_overview THEN
10725      return 'INFORMATION: --> Standby database not synced' || crlf
10726        || crlf || '     Sync standby database prior to upgrade.'
10727        || crlf || '     Your standby databases should be synched prior to upgrading.';
10728    ELSIF HelpType = c_help_fixup THEN
10729      return 'Standby databases should be synced prior to upgrade.';
10730    END IF;
10731  END SYNC_STANDBY_DB_gethelp;
10732  --
10733  -- Fixup (Procedure and function)
10734  --
10735  PROCEDURE SYNC_STANDBY_DB_fixup
10736  IS
10737    result  VARCHAR2(1000);
10738    status  NUMBER;
10739    tSqlcode NUMBER;
10740  BEGIN
10741    -- Call fixup and throw away the result
10742    status := SYNC_STANDBY_DB_fixup (result, tSqlcode);
10743  END SYNC_STANDBY_DB_fixup;
10744  
10745  FUNCTION SYNC_STANDBY_DB_fixup (
10746           result_txt IN OUT VARCHAR2,
10747           pSqlcode    IN OUT NUMBER) RETURN number
10748  IS
10749  BEGIN
10750    -- Dump out the same thing we give for help
10751    result_txt := SYNC_STANDBY_DB_gethelp(c_help_overview);
10752    return c_fixup_status_info;
10753  END SYNC_STANDBY_DB_fixup;
10754  -- *****************************************************************
10755  --     SYS_DEFAULT_TABLESPACE Section
10756  -- *****************************************************************
10757  FUNCTION SYS_DEF_TABLESPACE_check (result_txt OUT VARCHAR2) RETURN number
10758  IS
10759    t_ts1       VARCHAR2(30);
10760    t_ts2       VARCHAR2(30);
10761    status      NUMBER;
10762  BEGIN
10763  
10764    EXECUTE IMMEDIATE 'SELECT default_tablespace FROM sys.dba_users WHERE username = ''SYS'''
10765    INTO t_ts1;
10766    EXECUTE IMMEDIATE 'SELECT default_tablespace FROM sys.dba_users WHERE username = ''SYSTEM'''
10767    INTO t_ts2;
10768  
10769    IF (t_ts1 = 'SYSTEM') AND (t_ts2 = 'SYSTEM') AND (pDBGFailCheck = FALSE) THEN
10770      -- Everything is fine.
10771      RETURN c_status_success;
10772    ELSE
10773      IF pOutputType = c_output_xml THEN
10774        result_txt:= genDBUAXMLCheck('SYS_DEFAULT_TABLESPACE',
10775          c_check_level_warning,
10776          'The SYSTEM or SYS schemas have been altered so their default tablespace'
10777             || ' is no longer SYSTEM.  Prior to upgrading, the schema default'
10778             || ' tablespace must be reset to the SYSTEM tablespace',
10779          'The SYSTEM or SYS schemas have been altered so their default tablespace',
10780          'BEGIN dbms_preup.SYS_DEF_TABLESPACE_fixup; END;',
10781           c_dbua_detail_type_sql,
10782          htmlentities('select username,default_tablespace from sys.dba_users'
10783            || ' where username IN (''SYS'',''SYSTEM'')'),
10784          c_dbua_fixup_type_auto,
10785          c_dbua_fixup_stage_pre );
10786      ELSE
10787        result_txt := SYS_DEF_TABLESPACE_gethelp(c_help_overview);
10788      END IF;
10789      IF pOutputFixupScripts THEN
10790        genFixup ('SYS_DEFAULT_TABLESPACE');
10791      END IF;
10792      RETURN c_status_failure;
10793     END IF;
10794  END SYS_DEF_TABLESPACE_check;
10795  
10796  FUNCTION SYS_DEF_TABLESPACE_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10797  IS
10798  BEGIN
10799    IF HelpType = c_help_overview THEN
10800      return 'WARNING: --> SYS and SYSTEM schema default tablespace has been altered' || crlf
10801       || crlf || '     Prior to upgrading your database, please ensure both'
10802       || crlf || '     the SYS and SYSTEM schema default their tablespace to SYSTEM.'
10803       || crlf || '       Execute: execute dbms_preup.SYS_DEF_TABLESPACE_fixup; ';
10804    ELSIF HelpType = c_help_fixup THEN
10805      return 'SYSTEM account default tablespace is altered to be SYSTEM.';
10806    END IF;
10807  END SYS_DEF_TABLESPACE_gethelp;
10808  --
10809  -- Fixup (Procedure and function)
10810  --
10811  PROCEDURE SYS_DEF_TABLESPACE_fixup
10812  IS
10813    result  VARCHAR2(1000);
10814    status  NUMBER;
10815    tSqlcode NUMBER;
10816  BEGIN
10817    -- Call fixup and throw away the result
10818    status := SYS_DEF_TABLESPACE_fixup (result, tSqlcode);
10819  END SYS_DEF_TABLESPACE_fixup;
10820  
10821  FUNCTION SYS_DEF_TABLESPACE_fixup (
10822           result_txt IN OUT VARCHAR2,
10823           pSqlcode    IN OUT NUMBER) RETURN number
10824  IS
10825    t_result_txt VARCHAR2(1000);
10826    t_ts1        VARCHAR2(128);
10827    rval         NUMBER := 1;
10828  BEGIN
10829    --
10830    --  Check both SYS and SYSTEM and reset if needed
10831    --
10832    result_txt := '';
10833    pSqlcode := 1;
10834    EXECUTE IMMEDIATE 'SELECT default_tablespace FROM sys.dba_users WHERE username = ''SYS'''
10835    INTO t_ts1;
10836    IF (t_ts1 != 'SYSTEM') THEN
10837      result_txt := 'Altering SYS schema default tablespace.  Result: ';
10838      rval := execute_sql_statement ('ALTER USER SYS DEFAULT TABLESPACE SYSTEM', t_result_txt, pSqlcode);
10839      result_txt := result_txt || TO_CHAR(pSqlcode);
10840    END IF;
10841  
10842    EXECUTE IMMEDIATE 'SELECT default_tablespace FROM sys.dba_users WHERE username = ''SYSTEM'''
10843    INTO t_ts1;
10844    IF (t_ts1 != 'SYSTEM') THEN
10845      result_txt := result_txt || crlf || 'Altering SYSTEM schema default tablespace Result: ';
10846      rval := execute_sql_statement ('ALTER USER SYSTEM DEFAULT TABLESPACE SYSTEM', t_result_txt, pSqlcode);
10847      result_txt := result_txt || TO_CHAR(pSqlcode);
10848    END IF;
10849    --
10850    -- If both were executed, only the last status is returned.
10851    --
10852    RETURN rval;
10853  END SYS_DEF_TABLESPACE_fixup;
10854  
10855  -- *****************************************************************
10856  --     ULTRASEARCH_DATA Section
10857  -- *****************************************************************
10858  FUNCTION ULTRASEARCH_DATA_check (result_txt OUT VARCHAR2) RETURN number
10859  IS
10860    status  NUMBER := 0;
10861    i_count INTEGER;
10862  BEGIN
10863    -- Once Ultra Search instance is created, wk$instance table is populated.
10864    -- The logic determines if Ultra Search has data or not by looking up
10865    -- wk$instance table. WKSYS.WK$INSTANCE table exists when Ultra Search is
10866    -- installed. If it's not installed, WKSYS.WK$INSTANCE doesn't exist and the
10867    -- pl/sql block raises exception.
10868    --
10869    BEGIN
10870      EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM wksys.wk$instance'
10871        INTO i_count;
10872      -- count will be 0 when there are no rows in wksys.wk$instance
10873      -- Otherwise there is at least one row in
10874      -- and an ultra search warning should be displayed
10875      IF (i_count != 0) THEN
10876         status := 1;
10877      END IF;
10878      EXCEPTION WHEN OTHERS THEN NULL;
10879    END;
10880  
10881    IF (status = 0 AND pDBGFailCheck = FALSE)
10882    THEN
10883      RETURN c_status_success;
10884    ELSE
10885      IF pOutputType = c_output_xml THEN
10886        result_txt:= genDBUAXMLCheck('ULTRASEARCH_DATA',
10887          c_check_level_warning,
10888          'Ultra Search is not supported beyond 11.2 and is removed automatically during upgrade.'
10889           || ' If you need to preserve Ultra Search data please perform a manual cold backup prior to upgrade.',
10890          'Ultra Search data is present in the Database',
10891          'Optionally backup Ultra Search',
10892           c_dbua_detail_type_text,
10893          'To verify that Ultrasearch data exists, execute'
10894            || ' the following query: SELECT COUNT(*) FROM wksys.wk$instance',
10895          c_dbua_fixup_type_manual,
10896          c_dbua_fixup_stage_pre );
10897      ELSE
10898        result_txt := ULTRASEARCH_DATA_gethelp(c_help_overview);
10899      END IF;
10900      IF pOutputFixupScripts THEN
10901        genFixup ('ULTRASEARCH_DATA');
10902      END IF;
10903      RETURN c_status_failure;
10904     END IF;
10905  END ULTRASEARCH_DATA_check;
10906  
10907  FUNCTION ULTRASEARCH_DATA_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10908  IS
10909  BEGIN
10910    IF HelpType = c_help_overview THEN
10911      return 'WARNING: --> Ultra Search not supported' || crlf
10912        || crlf || '     Ultra Search is not supported as of 11.2 and is removed during the upgrade.'
10913        || crlf || '     You may perform this task prior to the upgrade by  using wkremov.sql '
10914        || crlf || '     located in the rdbms/admin directory of the new software installation.'
10915        || crlf || '     If you wish to preserve the Ultra Search data please perform a manual'
10916        || crlf || '     cold backup prior to upgrade.';
10917    ELSIF HelpType = c_help_fixup THEN
10918      return 'Ultra Search data may be backed up prior upgrade as it will be removed during the upgrade.';
10919    END IF;
10920  END ULTRASEARCH_DATA_gethelp;
10921  --
10922  -- Fixup (Procedure and function)
10923  --
10924  PROCEDURE ULTRASEARCH_DATA_fixup
10925  IS
10926    result  VARCHAR2(1000);
10927    status  NUMBER;
10928    tSqlcode NUMBER;
10929  BEGIN
10930    -- Call fixup and throw away the result
10931    status := ULTRASEARCH_DATA_fixup (result, tSqlcode);
10932  END ULTRASEARCH_DATA_fixup;
10933  
10934  FUNCTION ULTRASEARCH_DATA_fixup (
10935           result_txt IN OUT VARCHAR2,
10936           pSqlcode    IN OUT NUMBER) RETURN number
10937  IS
10938  BEGIN
10939    -- Dump out the same thing we give for help
10940    result_txt := ULTRASEARCH_DATA_gethelp(c_help_overview);
10941    return c_fixup_status_info;
10942  END ULTRASEARCH_DATA_fixup;
10943  
10944  -- *****************************************************************
10945  --     unsupported_version Section
10946  -- *****************************************************************
10947  FUNCTION unsupported_version_check (result_txt OUT VARCHAR2) RETURN number
10948  IS
10949    status      NUMBER;
10950  BEGIN
10951    --
10952    -- If the major (does not include fifth digit) is in the supported list
10953    -- we're good (if we are not failing all the checks)
10954    -- Also return SUCCESS if we are in XML because this is a manual
10955    -- only test.
10956    --
10957    -- Same check is done in init routine to set pUnsupportedUpgrade
10958    -- Using substr of c_version instead of hard-coding, for example
10959    -- '121' avoids errors while versions are updated.
10960    --
10961  
10962    IF ( ( ( (instr (c_supported_versions, db_patch_vers) > 0) -- Supported ver found
10963            OR (db_major_vers = SUBSTR(c_version, 1,6))  -- DB is same version
10964           )  AND pDBGFailCheck = FALSE                  -- We want to fail all checks
10965         ) OR pOutputType = c_output_xml ) THEN       -- Output XML
10966      RETURN c_status_success;
10967    END IF;
10968  
10969    --
10970    -- The DBUA has its own check, this is for text version only
10971    --
10972    result_txt := unsupported_version_gethelp(c_help_overview);
10973  
10974    IF pOutputFixupScripts THEN
10975      genFixup ('UNSUPPORTED_VERSION');
10976    END IF;
10977    RETURN c_status_failure;
10978  END unsupported_version_check;
10979  
10980  FUNCTION unsupported_version_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
10981  IS
10982  BEGIN
10983    IF HelpType = c_help_overview THEN
10984      return 'ERROR: --> Unsupported Version Upgrade' || crlf
10985        || crlf || pStarHeader
10986        || crlf || CenterLine('**** YOU CANNOT UPGRADE THIS DATABASE TO THIS RELEASE ****')
10987        || crlf || pStarHeader
10988        || crlf || '     Direct upgrade from ' || db_patch_vers || ' is not supported.'
10989        || crlf || '     Please refer to Chapter 2 of the Oracle Database Upgrade Guide for'
10990        || crlf || '     the matrix of releases supported for direct upgrade.';
10991    ELSIF HelpType = c_help_fixup THEN
10992      return 'Database must be first upgraded to a supported release prior to upgrading to this release.';
10993    END IF;
10994  END unsupported_version_gethelp;
10995  --
10996  -- Fixup (Procedure and function)
10997  --
10998  PROCEDURE unsupported_version_fixup
10999  IS
11000    result  VARCHAR2(1000);
11001    status  NUMBER;
11002    tSqlcode NUMBER;
11003  BEGIN
11004    -- Call fixup and throw away the result
11005    status := unsupported_version_fixup (result, tSqlcode);
11006  END unsupported_version_fixup;
11007  
11008  FUNCTION unsupported_version_fixup (
11009           result_txt IN OUT VARCHAR2,
11010           pSqlcode    IN OUT NUMBER) RETURN number
11011  IS
11012  BEGIN
11013     result_txt := unsupported_version_gethelp(c_help_overview);
11014     return c_fixup_status_info;
11015  END unsupported_version_fixup;
11016  
11017  -- *****************************************************************
11018  --     PROVISIONER_PRESENT Section
11019  -- *****************************************************************
11020  FUNCTION PROVISIONER_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
11021  IS
11022    user_exists NUMBER := 1;
11023    t_null      CHAR(1);
11024    status      NUMBER;
11025  BEGIN
11026    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
11027      return c_status_not_for_this_version;
11028    END IF;
11029  
11030    BEGIN
11031      EXECUTE IMMEDIATE
11032       'SELECT NULL FROM sys.user$ WHERE name = ''PROVISIONER'''
11033        INTO t_null;
11034      EXCEPTION
11035        WHEN NO_DATA_FOUND then user_exists := 0;
11036    END;
11037    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
11038    THEN
11039      RETURN c_status_success;
11040    ELSE
11041      IF pOutputType = c_output_xml THEN
11042        result_txt:= genDBUAXMLCheck('PROVISIONER_PRESENT',
11043          c_check_level_error,
11044          'A user or role named "PROVISIONER" found in the database.',
11045          'A user or role named "PROVISIONER" found in the database.',
11046          '"PROVISIONER" user or role must be dropped prior to upgrading.',
11047           c_dbua_detail_type_text,
11048          'To drop the user "PROVISIONER", use the command: '||
11049          'DROP USER PROVISIONER CASCADE'||', and To drop the role "PROVISIONER", use the'||
11050          'command: DROP ROLE PROVISIONER',
11051          c_dbua_fixup_type_manual,
11052          c_dbua_fixup_stage_pre );
11053      ELSE
11054        result_txt := PROVISIONER_PRESENT_gethelp(c_help_overview);
11055      END IF;
11056      IF pOutputFixupScripts THEN
11057        genFixup ('PROVISIONER_PRESENT');
11058      END IF;
11059      RETURN c_status_failure;
11060     END IF;
11061  END PROVISIONER_PRESENT_check;
11062  
11063  FUNCTION PROVISIONER_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11064  IS
11065  BEGIN
11066    IF HelpType = c_help_overview THEN
11067      return 'ERROR: --> A user or role with the name "PROVISIONER" found in the database.' || crlf
11068        || crlf || '     This is an Oracle defined role.'
11069        || crlf || '     You must drop this user or role prior to upgrading.';
11070    ELSIF HelpType = c_help_fixup THEN
11071      return 'The PROVISIONER user or role must be dropped prior to upgrading.';
11072    END IF;
11073  END PROVISIONER_PRESENT_gethelp;
11074  --
11075  -- Fixup (Procedure and function)
11076  --
11077  PROCEDURE PROVISIONER_PRESENT_fixup
11078  IS
11079    result  VARCHAR2(1000);
11080    status  NUMBER;
11081    tSqlcode NUMBER;
11082  BEGIN
11083    -- Call fixup and throw away the result
11084    status := PROVISIONER_PRESENT_fixup (result, tSqlcode);
11085  END PROVISIONER_PRESENT_fixup;
11086  
11087  FUNCTION PROVISIONER_PRESENT_fixup (
11088           result_txt IN OUT VARCHAR2,
11089           pSqlcode    IN OUT NUMBER) RETURN number
11090  IS
11091  BEGIN
11092    result_txt  := PROVISIONER_PRESENT_gethelp(c_help_overview);
11093    pSqlcode := 0;
11094    return c_fixup_status_info;
11095  END PROVISIONER_PRESENT_fixup;
11096  
11097  -- *****************************************************************
11098  --     XS_RESOURCE_PRESENT Section
11099  -- *****************************************************************
11100  FUNCTION XS_RESOURCE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
11101  IS
11102    user_exists NUMBER := 1;
11103    t_null      CHAR(1);
11104    status      NUMBER;
11105  BEGIN
11106    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
11107      return c_status_not_for_this_version;
11108    END IF;
11109  
11110    BEGIN
11111      EXECUTE IMMEDIATE
11112       'SELECT NULL FROM sys.user$ WHERE name = ''XS_RESOURCE'''
11113        INTO t_null;
11114      EXCEPTION
11115        WHEN NO_DATA_FOUND then user_exists := 0;
11116    END;
11117    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
11118    THEN
11119      RETURN c_status_success;
11120    ELSE
11121      IF pOutputType = c_output_xml THEN
11122        result_txt:= genDBUAXMLCheck('XS_RESOURCE_PRESENT',
11123          c_check_level_error,
11124          'A user or role named "XS_RESOURCE" found in the database.',
11125          'A user or role named "XS_RESOURCE" found in the database.',
11126          '"XS_RESOURCE" user or role must be dropped prior to upgrading.',
11127           c_dbua_detail_type_text,
11128          'To drop the user "XS_RESOURCE", use the command: '||
11129          'DROP USER XS_RESOURCE CASCADE'||', and To drop the role "XS_RESOURCE", use the'||
11130          'command: DROP ROLE XS_RESOURCE',
11131          c_dbua_fixup_type_manual,
11132          c_dbua_fixup_stage_pre );
11133      ELSE
11134        result_txt := XS_RESOURCE_PRESENT_gethelp(c_help_overview);
11135      END IF;
11136      IF pOutputFixupScripts THEN
11137        genFixup ('XS_RESOURCE_PRESENT');
11138      END IF;
11139      RETURN c_status_failure;
11140     END IF;
11141  END XS_RESOURCE_PRESENT_check;
11142  
11143  FUNCTION XS_RESOURCE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11144  IS
11145  BEGIN
11146    IF HelpType = c_help_overview THEN
11147      return 'ERROR: --> A user or role with the name "XS_RESOURCE" found in the database.' || crlf
11148        || crlf || '     This is an Oracle defined role.'
11149        || crlf || '     You must drop this user or role prior to upgrading.';
11150    ELSIF HelpType = c_help_fixup THEN
11151      return 'The XS_RESOURCE user or role must be dropped prior to upgrading.';
11152    END IF;
11153  END XS_RESOURCE_PRESENT_gethelp;
11154  --
11155  -- Fixup (Procedure and function)
11156  --
11157  PROCEDURE XS_RESOURCE_PRESENT_fixup
11158  IS
11159    result  VARCHAR2(1000);
11160    status  NUMBER;
11161    tSqlcode NUMBER;
11162  BEGIN
11163    -- Call fixup and throw away the result
11164    status := XS_RESOURCE_PRESENT_fixup (result, tSqlcode);
11165  END XS_RESOURCE_PRESENT_fixup;
11166  
11167  FUNCTION XS_RESOURCE_PRESENT_fixup (
11168           result_txt IN OUT VARCHAR2,
11169           pSqlcode    IN OUT NUMBER) RETURN number
11170  IS
11171  BEGIN
11172    result_txt  := XS_RESOURCE_PRESENT_gethelp(c_help_overview);
11173    pSqlcode := 0;
11174    return c_fixup_status_info;
11175  END XS_RESOURCE_PRESENT_fixup;
11176  
11177  -- *****************************************************************
11178  --     XS_SESSION_ADMIN Section
11179  -- *****************************************************************
11180  FUNCTION XS_SESSION_ADMIN_check (result_txt OUT VARCHAR2) RETURN number
11181  IS
11182    user_exists NUMBER := 1;
11183    t_null      CHAR(1);
11184    status      NUMBER;
11185  BEGIN
11186    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
11187      return c_status_not_for_this_version;
11188    END IF;
11189  
11190    BEGIN
11191      EXECUTE IMMEDIATE
11192       'SELECT NULL FROM sys.user$ WHERE name = ''XS_SESSION_ADMIN'''
11193        INTO t_null;
11194      EXCEPTION
11195        WHEN NO_DATA_FOUND then user_exists := 0;
11196    END;
11197    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
11198    THEN
11199      RETURN c_status_success;
11200    ELSE
11201      IF pOutputType = c_output_xml THEN
11202        result_txt:= genDBUAXMLCheck('XS_SESSION_ADMIN',
11203          c_check_level_error,
11204          'A user or role named "XS_SESSION_ADMIN" found in the database.',
11205          'A user or role named "XS_SESSION_ADMIN" found in the database.',
11206          '"XS_SESSION_ADMIN" user or role must be dropped prior to upgrading.',
11207           c_dbua_detail_type_text,
11208          'To drop the user "XS_SESSION_ADMIN", use the command: '||
11209          'DROP USER XS_SESSION_ADMIN CASCADE'||
11210          ', and To drop the role "XS_SESSION_ADMIN", use the'||
11211          'command: DROP ROLE XS_SESSION_ADMIN',
11212          c_dbua_fixup_type_manual,
11213          c_dbua_fixup_stage_pre );
11214      ELSE
11215        result_txt := XS_SESSION_ADMIN_gethelp(c_help_overview);
11216      END IF;
11217      IF pOutputFixupScripts THEN
11218        genFixup ('XS_SESSION_ADMIN');
11219      END IF;
11220      RETURN c_status_failure;
11221     END IF;
11222  END XS_SESSION_ADMIN_check;
11223  
11224  FUNCTION XS_SESSION_ADMIN_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11225  IS
11226  BEGIN
11227    IF HelpType = c_help_overview THEN
11228      return 'ERROR: --> A user or role with the name "XS_SESSION_ADMIN" found in the database.' || crlf
11229        || crlf || '     This is an Oracle defined role.'
11230        || crlf || '     You must drop this user or role prior to upgrading.';
11231    ELSIF HelpType = c_help_fixup THEN
11232      return 'The XS_SESSION_ADMIN user or role must be dropped prior to upgrading.';
11233    END IF;
11234  END XS_SESSION_ADMIN_gethelp;
11235  --
11236  -- Fixup (Procedure and function)
11237  --
11238  PROCEDURE XS_SESSION_ADMIN_fixup
11239  IS
11240    result  VARCHAR2(1000);
11241    status  NUMBER;
11242    tSqlcode NUMBER;
11243  BEGIN
11244    -- Call fixup and throw away the result
11245    status := XS_SESSION_ADMIN_fixup (result, tSqlcode);
11246  END XS_SESSION_ADMIN_fixup;
11247  
11248  FUNCTION XS_SESSION_ADMIN_fixup (
11249           result_txt IN OUT VARCHAR2,
11250           pSqlcode    IN OUT NUMBER) RETURN number
11251  IS
11252  BEGIN
11253    result_txt  := XS_SESSION_ADMIN_gethelp(c_help_overview);
11254    pSqlcode := 0;
11255    return c_fixup_status_info;
11256  END XS_SESSION_ADMIN_fixup;
11257  
11258  -- *****************************************************************
11259  --     XS_NAMESPACE_ADMIN Section
11260  -- *****************************************************************
11261  FUNCTION XS_NAMESPACE_ADMIN_check (result_txt OUT VARCHAR2) RETURN number
11262  IS
11263    user_exists NUMBER := 1;
11264    t_null      CHAR(1);
11265    status      NUMBER;
11266  BEGIN
11267    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
11268      return c_status_not_for_this_version;
11269    END IF;
11270  
11271    BEGIN
11272      EXECUTE IMMEDIATE
11273       'SELECT NULL FROM sys.user$ WHERE name = ''XS_NAMESPACE_ADMIN'''
11274        INTO t_null;
11275      EXCEPTION
11276        WHEN NO_DATA_FOUND then user_exists := 0;
11277    END;
11278    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
11279    THEN
11280      RETURN c_status_success;
11281    ELSE
11282      IF pOutputType = c_output_xml THEN
11283        result_txt:= genDBUAXMLCheck('XS_NAMESPACE_ADMIN',
11284          c_check_level_error,
11285          'A user or role named "XS_NAMESPACE_ADMIN" found in the database.',
11286          'A user or role named "XS_NAMESPACE_ADMIN" found in the database.',
11287          '"XS_NAMESPACE_ADMIN" user or role must be dropped prior to upgrading.',
11288           c_dbua_detail_type_text,
11289          'To drop the user "XS_NAMESPACE_ADMIN", use the command: '||
11290          'DROP USER XS_NAMESPACE_ADMIN CASCADE'||
11291          ', and To drop the role "XS_NAMESPACE_ADMIN", use the'||
11292          'command: DROP ROLE XS_NAMESPACE_ADMIN',
11293          c_dbua_fixup_type_manual,
11294          c_dbua_fixup_stage_pre );
11295      ELSE
11296        result_txt := XS_NAMESPACE_ADMIN_gethelp(c_help_overview);
11297      END IF;
11298      IF pOutputFixupScripts THEN
11299        genFixup ('XS_NAMESPACE_ADMIN');
11300      END IF;
11301      RETURN c_status_failure;
11302     END IF;
11303  END XS_NAMESPACE_ADMIN_check;
11304  
11305  FUNCTION XS_NAMESPACE_ADMIN_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11306  IS
11307  BEGIN
11308    IF HelpType = c_help_overview THEN
11309      return 'ERROR: --> A user or role with the name "XS_NAMESPACE_ADMIN" found in the database.' || crlf
11310        || crlf || '     This is an Oracle defined role.'
11311        || crlf || '     You must drop this user or role prior to upgrading.';
11312    ELSIF HelpType = c_help_fixup THEN
11313      return 'The XS_NAMESPACE_ADMIN user or role must be dropped prior to upgrading.';
11314    END IF;
11315  END XS_NAMESPACE_ADMIN_gethelp;
11316  --
11317  -- Fixup (Procedure and function)
11318  --
11319  PROCEDURE XS_NAMESPACE_ADMIN_fixup
11320  IS
11321    result  VARCHAR2(1000);
11322    status  NUMBER;
11323    tSqlcode NUMBER;
11324  BEGIN
11325    -- Call fixup and throw away the result
11326    status := XS_NAMESPACE_ADMIN_fixup (result, tSqlcode);
11327  END XS_NAMESPACE_ADMIN_fixup;
11328  
11329  FUNCTION XS_NAMESPACE_ADMIN_fixup (
11330           result_txt IN OUT VARCHAR2,
11331           pSqlcode    IN OUT NUMBER) RETURN number
11332  IS
11333  BEGIN
11334    result_txt  := XS_NAMESPACE_ADMIN_gethelp(c_help_overview);
11335    pSqlcode := 0;
11336    return c_fixup_status_info;
11337  END XS_NAMESPACE_ADMIN_fixup;
11338  
11339  -- *****************************************************************
11340  --     XS_CACHE_ADMIN Section
11341  -- *****************************************************************
11342  FUNCTION XS_CACHE_ADMIN_check (result_txt OUT VARCHAR2) RETURN number
11343  IS
11344    user_exists NUMBER := 1;
11345    t_null      CHAR(1);
11346    status      NUMBER;
11347  BEGIN
11348    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
11349      return c_status_not_for_this_version;
11350    END IF;
11351  
11352    BEGIN
11353      EXECUTE IMMEDIATE
11354       'SELECT NULL FROM sys.user$ WHERE name = ''XS_CACHE_ADMIN'''
11355        INTO t_null;
11356      EXCEPTION
11357        WHEN NO_DATA_FOUND then user_exists := 0;
11358    END;
11359    IF (user_exists = 0 AND pDBGFailCheck = FALSE)
11360    THEN
11361      RETURN c_status_success;
11362    ELSE
11363      IF pOutputType = c_output_xml THEN
11364        result_txt:= genDBUAXMLCheck('XS_CACHE_ADMIN',
11365          c_check_level_error,
11366          'A user or role named "XS_CACHE_ADMIN" found in the database.',
11367          'A user or role named "XS_CACHE_ADMIN" found in the database.',
11368          '"XS_CACHE_ADMIN" user or role must be dropped prior to upgrading.',
11369           c_dbua_detail_type_text,
11370          'To drop the user "XS_CACHE_ADMIN", use the command: '||
11371          'DROP USER XS_CACHE_ADMIN CASCADE'||
11372          ', and To drop the role "XS_CACHE_ADMIN", use the'||
11373          'command: DROP ROLE XS_CACHE_ADMIN',
11374          c_dbua_fixup_type_manual,
11375          c_dbua_fixup_stage_pre );
11376      ELSE
11377        result_txt := XS_CACHE_ADMIN_gethelp(c_help_overview);
11378      END IF;
11379      IF pOutputFixupScripts THEN
11380        genFixup ('XS_CACHE_ADMIN');
11381      END IF;
11382      RETURN c_status_failure;
11383     END IF;
11384  END XS_CACHE_ADMIN_check;
11385  
11386  FUNCTION XS_CACHE_ADMIN_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11387  IS
11388  BEGIN
11389    IF HelpType = c_help_overview THEN
11390      return 'ERROR: --> A user or role with the name "XS_CACHE_ADMIN" found in the database.' || crlf
11391        || crlf || '     This is an Oracle defined role.'
11392        || crlf || '     You must drop this user or role prior to upgrading.';
11393    ELSIF HelpType = c_help_fixup THEN
11394      return 'The XS_CACHE_ADMIN user or role must be dropped prior to upgrading.';
11395    END IF;
11396  END XS_CACHE_ADMIN_gethelp;
11397  --
11398  -- Fixup (Procedure and function)
11399  --
11400  PROCEDURE XS_CACHE_ADMIN_fixup
11401  IS
11402    result  VARCHAR2(1000);
11403    status  NUMBER;
11404    tSqlcode NUMBER;
11405  BEGIN
11406    -- Call fixup and throw away the result
11407    status := XS_CACHE_ADMIN_fixup (result, tSqlcode);
11408  END XS_CACHE_ADMIN_fixup;
11409  
11410  FUNCTION XS_CACHE_ADMIN_fixup (
11411           result_txt IN OUT VARCHAR2,
11412           pSqlcode    IN OUT NUMBER) RETURN number
11413  IS
11414  BEGIN
11415    result_txt  := XS_CACHE_ADMIN_gethelp(c_help_overview);
11416    pSqlcode := 0;
11417    return c_fixup_status_info;
11418  END XS_CACHE_ADMIN_fixup;
11419  
11420  
11421  FUNCTION  NOT_UPG_BY_STD_UPGRD_check (result_txt OUT VARCHAR2) RETURN number
11422  IS
11423    my_components_list VARCHAR2(4000) := ' ';
11424    not_my_components_list VARCHAR2(4000) := ' ';
11425    all_components_mine BOOLEAN := TRUE;
11426    not_my_comps_cursor cursor_t;
11427    c_cname SYS.REGISTRY$.CNAME%TYPE;
11428    select_stmt VARCHAR2(500);
11429  BEGIN
11430    BEGIN
11431      -- construct a quoted and comma separated list of components that will
11432      -- be upgraded by the upgrade script.
11433      -- since the list of my components is known, this code won't overflow
11434      -- the my_components_list stringsize
11435      FOR i in 1..max_components LOOP
11436          if (i > 1) THEN
11437              my_components_list := my_components_list || ',';
11438          END IF;
11439          my_components_list := my_components_list || dbms_assert.enquote_literal(cmp_info(i).cid);
11440      END LOOP;
11441  
11442      select_stmt := 'SELECT cname FROM sys.registry$ WHERE namespace=' ||
11443                     dbms_assert.enquote_literal('SERVER') ||
11444                     ' AND cid NOT IN (' ||
11445                     my_components_list ||
11446                     ')';
11447      OPEN not_my_comps_cursor FOR select_stmt;
11448  
11449      LOOP
11450          FETCH not_my_comps_cursor INTO c_cname;
11451          EXIT WHEN not_my_comps_cursor%NOTFOUND;
11452          IF (LENGTH(not_my_components_list) >= (c_str_max-length(c_cname)-12)) THEN
11453              -- the 12 above is the length of ' plus others ' below.  Save space for it
11454              -- in case we need it.
11455              not_my_components_list := not_my_components_list || ' plus others';
11456              EXIT;
11457          ELSE
11458              IF (NOT all_components_mine) THEN
11459                  not_my_components_list := not_my_components_list || ',';
11460              END IF;
11461              not_my_components_list := not_my_components_list || c_cname;
11462          END IF;
11463          all_components_mine := FALSE;
11464      END LOOP;
11465      CLOSE not_my_comps_cursor;
11466    END;
11467    IF (all_components_mine AND (pDBGFailCheck = FALSE))
11468    THEN
11469      RETURN c_status_success;
11470    ELSE
11471      IF pOutputType = c_output_xml THEN
11472        result_txt:= genDBUAXMLCheck('NOT_UPG_BY_STD_UPGRD',
11473          c_check_level_info,
11474          'The database has components which will not be upgraded.',
11475          'The database has components which will not be upgraded.',
11476          'No action required, but you may wish to upgrade those components as needed using some other procedure appropriate for that component',
11477           c_dbua_detail_type_text,
11478          not_my_components_list,
11479          c_dbua_fixup_type_manual,
11480          c_dbua_fixup_stage_post );
11481      ELSE
11482        result_txt := NOT_UPG_BY_STD_UPGRD_gethelp(c_help_overview)
11483                      || crlf || '     Those components are: ' || not_my_components_list;
11484      END IF;
11485      IF pOutputFixupScripts THEN
11486        genFixup ('NOT_UPG_BY_STD_UPGRD');
11487      END IF;
11488      RETURN c_status_failure;
11489    END IF;
11490  END NOT_UPG_BY_STD_UPGRD_check;
11491  
11492  FUNCTION NOT_UPG_BY_STD_UPGRD_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11493  IS
11494  BEGIN
11495    IF HelpType = c_help_overview THEN
11496      return 'INFORMATION: --> There are existing Oracle components that will NOT be'
11497        || crlf || '     upgraded by the database upgrade script.  Typically, such components'
11498        || crlf || '     have their own upgrade scripts, are deprecated, or obsolete.';
11499    ELSIF HelpType = c_help_fixup THEN
11500      return 'This fixup does not perform any action.';
11501    END IF;
11502  END NOT_UPG_BY_STD_UPGRD_gethelp;
11503  
11504  PROCEDURE NOT_UPG_BY_STD_UPGRD_fixup
11505  IS
11506  BEGIN
11507      -- do nothing.
11508      null;
11509  END NOT_UPG_BY_STD_UPGRD_fixup;
11510  
11511  FUNCTION  NOT_UPG_BY_STD_UPGRD_fixup (
11512            result_txt IN OUT VARCHAR2, pSqlcode IN OUT NUMBER) RETURN number
11513  IS
11514  BEGIN
11515      result_txt := 'This fixup does not perform any action.  '
11516                    || crlf || 'If you want to upgrade those other components, you must do so manually.';
11517      pSqlcode := 0;
11518      return c_fixup_status_info;
11519  
11520  END NOT_UPG_BY_STD_UPGRD_fixup;
11521  
11522  
11523  
11524  
11525  -- *****************************************************************
11526  --     EMX_BASIC_ROLE_PRESENT Section
11527  -- *****************************************************************
11528  FUNCTION EMX_BASIC_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
11529  IS
11530    role_exists NUMBER := 1;
11531    t_null      CHAR(1);
11532    status      NUMBER;
11533  BEGIN
11534  
11535    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
11536      return c_status_not_for_this_version;
11537    END IF;
11538  
11539    BEGIN
11540      EXECUTE IMMEDIATE
11541       'SELECT NULL FROM sys.user$ WHERE NAME = ''EM_EXPRESS_BASIC'''
11542        INTO t_null;
11543      EXCEPTION
11544        WHEN NO_DATA_FOUND then role_exists := 0;
11545    END;
11546  
11547    IF (role_exists = 0 AND pDBGFailCheck = FALSE)
11548    THEN
11549      RETURN c_status_success;
11550    ELSE
11551      IF pOutputType = c_output_xml THEN
11552        result_txt:= genDBUAXMLCheck('EM_EXPRESS_BASIC',
11553          c_check_level_error,
11554          'A user or role named "EM_EXPRESS_BASIC" found in the database.',
11555          'A user or role named "EM_EXPRESS_BASIC" found in the database.',
11556          '"EM_EXPRESS_BASIC" role or user must be dropped prior to upgrading.',
11557           c_dbua_detail_type_text,
11558          'To drop the role "EM_EXPRESS_BASIC", use the command:'
11559          || ' DROP ROLE EM_EXPRESS_BASIC' || ', and To drop the user "EM_EXPRESS_BASIC"'
11560          || ' use the command: DROP USER EM_EXPRESS_BASIC CASCADE',
11561          c_dbua_fixup_type_manual,
11562          c_dbua_fixup_stage_pre );
11563      ELSE
11564        result_txt := EMX_BASIC_ROLE_PRESENT_gethelp(c_help_overview);
11565      END IF;
11566      IF pOutputFixupScripts THEN
11567        genFixup ('EMX_BASIC_ROLE_PRESENT');
11568      END IF;
11569      RETURN c_status_failure;
11570     END IF;
11571  END EMX_BASIC_ROLE_PRESENT_check;
11572  
11573  FUNCTION EMX_BASIC_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11574  IS
11575  BEGIN
11576    IF HelpType = c_help_overview THEN
11577      return 'ERROR: --> A user or role with the name "EM_EXPRESS_BASIC" found in the database.' || crlf
11578        || crlf || '     This is an Oracle defined role.'
11579        || crlf || '     You must drop this role or user prior to upgrading.';
11580    ELSIF HelpType = c_help_fixup THEN
11581      return 'The EM_EXPRESS_BASIC role or user must be dropped prior to upgrading.';
11582    END IF;
11583  END EMX_BASIC_ROLE_PRESENT_gethelp;
11584  --
11585  -- Fixup (Procedure and function)
11586  --
11587  PROCEDURE EMX_BASIC_ROLE_PRESENT_fixup
11588  IS
11589    result  VARCHAR2(1000);
11590    status  NUMBER;
11591    tSqlcode NUMBER;
11592  BEGIN
11593    -- Call fixup and throw away the result
11594    status := EMX_BASIC_ROLE_PRESENT_fixup (result, tSqlcode);
11595  END EMX_BASIC_ROLE_PRESENT_fixup;
11596  
11597  FUNCTION EMX_BASIC_ROLE_PRESENT_fixup (
11598           result_txt IN OUT VARCHAR2,
11599           pSqlcode    IN OUT NUMBER) RETURN number
11600  IS
11601  BEGIN
11602    result_txt := EMX_BASIC_ROLE_PRESENT_gethelp(c_help_overview);
11603    pSqlcode := 0;
11604    return c_fixup_status_info;
11605  END EMX_BASIC_ROLE_PRESENT_fixup;
11606  
11607  -- *****************************************************************
11608  --     EMX_ALL_ROLE_PRESENT Section
11609  -- *****************************************************************
11610  FUNCTION EMX_ALL_ROLE_PRESENT_check (result_txt OUT VARCHAR2) RETURN number
11611  IS
11612    role_exists NUMBER := 1;
11613    t_null      CHAR(1);
11614    status      NUMBER;
11615  BEGIN
11616  
11617    IF (db_n_version NOT IN (102,111,112) AND pDBGFailCheck = FALSE) THEN
11618      return c_status_not_for_this_version;
11619    END IF;
11620  
11621    BEGIN
11622      EXECUTE IMMEDIATE
11623       'SELECT NULL FROM sys.user$ WHERE NAME = ''EM_EXPRESS_ALL'''
11624        INTO t_null;
11625      EXCEPTION
11626        WHEN NO_DATA_FOUND then role_exists := 0;
11627    END;
11628  
11629    IF (role_exists = 0 AND pDBGFailCheck = FALSE)
11630    THEN
11631      RETURN c_status_success;
11632    ELSE
11633      IF pOutputType = c_output_xml THEN
11634        result_txt:= genDBUAXMLCheck('EM_EXPRESS_ALL',
11635          c_check_level_error,
11636          'A user or role named "EM_EXPRESS_ALL" found in the database.',
11637          'A user or role named "EM_EXPRESS_ALL" found in the database.',
11638          '"EM_EXPRESS_ALL" role or user must be dropped prior to upgrading.',
11639           c_dbua_detail_type_text,
11640          'To drop the role "EM_EXPRESS_ALL", use the command:'
11641          || ' DROP ROLE EM_EXPRESS_ALL' || ', and To drop the user "EM_EXPRESS_ALL"'
11642          || ' use the command: DROP USER EM_EXPRESS_ALL CASCADE',
11643          c_dbua_fixup_type_manual,
11644          c_dbua_fixup_stage_pre );
11645      ELSE
11646        result_txt := EMX_ALL_ROLE_PRESENT_gethelp(c_help_overview);
11647      END IF;
11648      IF pOutputFixupScripts THEN
11649        genFixup ('EMX_ALL_ROLE_PRESENT');
11650      END IF;
11651      RETURN c_status_failure;
11652     END IF;
11653  END EMX_ALL_ROLE_PRESENT_check;
11654  
11655  FUNCTION EMX_ALL_ROLE_PRESENT_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11656  IS
11657  BEGIN
11658    IF HelpType = c_help_overview THEN
11659      return 'ERROR: --> A user or role with the name "EM_EXPRESS_ALL" found in the database.' || crlf
11660        || crlf || '     This is an Oracle defined role.'
11661        || crlf || '     You must drop this role or user prior to upgrading.';
11662    ELSIF HelpType = c_help_fixup THEN
11663      return 'The EM_EXPRESS_ALL role or user must be dropped prior to upgrading.';
11664    END IF;
11665  END EMX_ALL_ROLE_PRESENT_gethelp;
11666  --
11667  -- Fixup (Procedure and function)
11668  --
11669  PROCEDURE EMX_ALL_ROLE_PRESENT_fixup
11670  IS
11671    result  VARCHAR2(1000);
11672    status  NUMBER;
11673    tSqlcode NUMBER;
11674  BEGIN
11675    -- Call fixup and throw away the result
11676    status := EMX_ALL_ROLE_PRESENT_fixup (result, tSqlcode);
11677  END EMX_ALL_ROLE_PRESENT_fixup;
11678  
11679  FUNCTION EMX_ALL_ROLE_PRESENT_fixup (
11680           result_txt IN OUT VARCHAR2,
11681           pSqlcode    IN OUT NUMBER) RETURN number
11682  IS
11683  BEGIN
11684    result_txt := EMX_ALL_ROLE_PRESENT_gethelp(c_help_overview);
11685    pSqlcode := 0;
11686    return c_fixup_status_info;
11687  END EMX_ALL_ROLE_PRESENT_fixup;
11688  
11689  
11690  -- *****************************************************************
11691  --     open_cursors Section
11692  --
11693  -- 1) If APEX is in the registry, then check the value of open_cursors.
11694  --    Alert only if open_cursors is < 150.
11695  --    This is an error condition check as APEX upgrades to 12102 can fail.
11696  -- 2) If APEX is not in the registry, then no check is needed.
11697  --
11698  -- *****************************************************************
11699  FUNCTION open_cursors_check (result_txt OUT VARCHAR2) RETURN number
11700  IS
11701    open_cursors NUMBER;
11702    status       NUMBER;
11703    check_stmt   VARCHAR2(100);  -- stmt to execute in this open_cursors check
11704  BEGIN
11705  
11706    -- query to execute in this open_cursors check
11707    check_stmt := 'select value from v$parameter where name=''open_cursors''';
11708  
11709    -- we only want to find out what open_cursors value is if apex is in db
11710    IF (cmp_info(apex).processed = TRUE) THEN  -- apex exists in registry$
11711      EXECUTE IMMEDIATE
11712        check_stmt
11713        INTO open_cursors;
11714    ELSE
11715      -- if apex is not in the registry, then no need to find out what
11716      -- the open_cursors value is.
11717      -- just go ahead and return success status.
11718      RETURN c_status_success;
11719    END IF;
11720  
11721    --
11722    -- open_cursors is bigger than min needed (and not debug) ->  return success
11723    --
11724    IF (open_cursors >= c_min_open_cursors AND  pDBGFailCheck = FALSE) THEN
11725      RETURN c_status_success;
11726    END IF;
11727  
11728    IF pOutputType = c_output_xml THEN
11729      result_txt:= genDBUAXMLCheck('OPEN_CURSORS',
11730        c_check_level_error,
11731        'OPEN_CURSORS initialization parameter must be increased.',
11732        'OPEN_CURSORS value is too low for the upgrade.  It is currently ' ||
11733          'set at ' || open_cursors || '.',
11734        'Increase OPEN_CURSORS value to at least ' ||
11735          to_char(c_min_open_cursors) || '.  ' ||
11736          'For example, to change parameter file: update the PFILE or use ' ||
11737          '"ALTER SYSTEM SET OPEN_CURSORS=' || c_min_open_cursors || ' '  ||
11738          'SCOPE=SPFILE".  Note the update in the PFILE/SPFILE will not take ' ||
11739          'effect until the next database startup.',
11740        c_dbua_detail_type_text,
11741        'To avoid exceeding number of open cursors during Oracle ' ||
11742          'Application Express (APEX) upgrade, ' ||
11743          'increase OPEN_CURSORS before upgrading the database.',
11744        c_dbua_fixup_type_manual,
11745        c_dbua_fixup_stage_validation);
11746    ELSE
11747      result_txt := open_cursors_gethelp(c_help_overview);
11748    END IF;
11749  
11750    IF pOutputFixupScripts THEN
11751      genFixup ('OPEN_CURSORS');
11752    END IF;
11753  
11754    RETURN c_status_failure;
11755  END open_cursors_check;
11756  
11757  FUNCTION open_cursors_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11758  IS
11759    open_cursors NUMBER;
11760  BEGIN
11761    IF HelpType = c_help_overview THEN
11762      EXECUTE IMMEDIATE
11763        'SELECT value FROM V$PARAMETER WHERE NAME=''open_cursors'''
11764         INTO open_cursors;
11765  
11766      return 'ERROR: --> OPEN_CURSORS initialization parameter value is too low'
11767       || crlf
11768       || crlf || '     OPEN_CURSORS is currently set at ' || open_cursors || '.'
11769       || crlf || '     o To avoid exceeding number of open cursors during'
11770       || crlf || '       Oracle Application Express (APEX) upgrade, increase'
11771       || crlf || '       OPEN_CURSORS to a value of at least '
11772               ||  c_min_open_cursors || ' before upgrading'
11773       || crlf || '       the database.'
11774       || crlf || '     o For example, to change parameter file: update the PFILE'
11775       || crlf || '       or use "ALTER SYSTEM SET OPEN_CURSORS='
11776               || c_min_open_cursors || ' SCOPE=SPFILE".'
11777       || crlf || '       Note the update in the PFILE/SPFILE will not take'
11778       || crlf || '       effect until the next database startup.';
11779    ELSIF HelpType = c_help_fixup THEN
11780      return 'Increase OPEN_CURSORS initialization parameter to at least ' ||
11781              c_min_open_cursors || '.';
11782    END IF;
11783  END open_cursors_gethelp;
11784  
11785  --
11786  -- Fixup (Procedure and function)
11787  --
11788  PROCEDURE open_cursors_fixup
11789  IS
11790    result  VARCHAR2(1000);
11791    status  NUMBER;
11792    tSqlcode NUMBER;
11793  BEGIN
11794    -- Call fixup and throw away the result
11795    status := open_cursors_fixup (result, tSqlcode);
11796  END open_cursors_fixup;
11797  
11798  FUNCTION open_cursors_fixup (
11799           result_txt IN OUT VARCHAR2,
11800           pSqlcode    IN OUT NUMBER) RETURN number
11801  IS
11802  BEGIN
11803     result_txt := open_cursors_gethelp(c_help_overview);
11804     return c_fixup_status_info;
11805  END open_cursors_fixup;
11806  
11807  --
11808  -- end of OPEN_CURSORS
11809  --
11810  
11811  -- *****************************************************************
11812  --     apex_upgrade_msg Section
11813  --
11814  -- bug 18523430: if the apex version in the database-to-be-upgraded
11815  -- is older than the one shipped in the target oracle home, then
11816  -- let user know that that apex can be manually upgraded outside of
11817  -- and prior to database upgrade
11818  --
11819  -- note: we are comparing the 1st 6 digits in apex versions.
11820  -- confirmed with apex that there is no need to compare the entire
11821  -- apex version string.
11822  --
11823  -- *****************************************************************
11824  FUNCTION apex_upgrade_msg_check (result_txt OUT VARCHAR2) RETURN number
11825  IS
11826    n_current_version  number;         -- current apex version # in database
11827    s_current_version  VARCHAR2(20);   -- current apex version string in db
11828    check_stmt         VARCHAR2(300);  -- stmt to execute in this check condition
11829    n_shipped_version  number;         -- c_apex_version in target oracle home
11830    convert_stmt       VARCHAR2(160);  -- convert c_apex_version to number
11831  BEGIN
11832  
11833    -- a) check if apex needs to be upgraded by getting the apex version
11834    -- b) take the 1st 6 places in apex version string and convert to number by:
11835    --    => replace 1st 6 places in apex version string '.' with ''
11836    --    => convert to #
11837    --    e.g., "4.2.5.00.08" => "4.2.5." => number 425
11838    -- c) note: it's better to compare #s than strings because apex versions
11839    --    can eventually reach 10.x.x.xx.xx
11840    check_stmt :=
11841      'SELECT version, to_number(replace(substr(version,1,6), ''.'', '''')) ' ||
11842      'FROM sys.registry$ ' ||
11843      'WHERE cid = ''APEX'' and namespace=''SERVER''';
11844  
11845    BEGIN
11846      EXECUTE IMMEDIATE
11847         check_stmt
11848         INTO s_current_version, n_current_version;
11849    EXCEPTION
11850      -- if apex is not found, then set n_current_version to 0
11851       WHEN NO_DATA_FOUND THEN
11852         n_current_version := 0;
11853      WHEN OTHERS THEN
11854        RAISE_APPLICATION_ERROR(-20000, 'Error: ' || SQLERRM);
11855    END;
11856  
11857    -- if current apex version is 0, then just return success;
11858    -- i.e., no need to continue
11859    IF n_current_version = 0
11860    THEN
11861      -- no current apex version to compare
11862      RETURN c_status_success;
11863    END IF;
11864  
11865    -- convert c_apex_version to number
11866    convert_stmt :=
11867      'SELECT to_number(replace(substr(''' || c_apex_version ||
11868        ''',1,6), ''.'', '''')) FROM sys.dual';
11869    EXECUTE IMMEDIATE convert_stmt INTO n_shipped_version;
11870  
11871    -- if current apex version is same or newer than the apex version in
11872    -- the target oracle home, then just return success
11873    IF n_current_version >= n_shipped_version
11874       AND pDBGFailCheck = FALSE
11875    THEN
11876      -- no apex upgrade msg needed
11877      return c_status_success;
11878    END IF;
11879  
11880    -- if we are here, then current apex version is older than the one in
11881    -- target oracle home
11882    IF pOutputType = c_output_xml THEN
11883      check_stmt := 'SELECT version FROM sys.registry$ ' ||
11884                    'WHERE cid = ''APEX'' and namespace=''SERVER''';
11885  
11886      result_txt:= genDBUAXMLCheck('APEX_UPGRADE_MSG',
11887        c_check_level_info,
11888        'Oracle Application Express (APEX) can be manually upgraded ' ||
11889          'prior to database upgrade.' ,
11890        'APEX is currently at version ' || s_current_version || ' and will ' ||
11891          'need to be upgraded.',
11892        'To reduce database upgrade time, APEX can be manually ' ||
11893          'upgraded outside of and prior to database upgrade.  ' ||
11894          'See MOS Note 1088970.1 for information on ' ||
11895          'APEX installation upgrades.' ,
11896        c_dbua_detail_type_text,
11897        'APEX in the database-to-be-upgraded is at version ' ||
11898         s_current_version ||'.  APEX shipped with the new release is at ' ||
11899         c_apex_version || '.',
11900        c_dbua_fixup_type_manual,
11901        c_dbua_fixup_stage_validation);
11902    ELSE
11903      result_txt := apex_upgrade_msg_gethelp(c_help_overview);
11904    END IF;
11905  
11906    IF pOutputFixupScripts THEN
11907      genFixup ('APEX_UPGRADE_MSG');
11908    END IF;
11909  
11910    RETURN c_status_failure;
11911  END apex_upgrade_msg_check;
11912  
11913  FUNCTION apex_upgrade_msg_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
11914  IS
11915    s_version    VARCHAR2(20);   -- apex version string in db-to-be-upgraded
11916    check_stmt   VARCHAR2(200);  -- stmt to execute to check condition
11917  BEGIN
11918  
11919    check_stmt := 'SELECT version FROM sys.registry$ ' ||
11920                  'WHERE cid = ''APEX'' and namespace=''SERVER''';
11921  
11922    IF HelpType = c_help_overview THEN
11923      EXECUTE IMMEDIATE
11924         check_stmt
11925         INTO s_version;
11926  
11927      return 'INFORMATION: --> Oracle Application Express (APEX) can be'
11928       || crlf || '     manually upgraded prior to database upgrade'
11929       || crlf
11930       || crlf || '     APEX is currently at version ' || s_version || ' and '
11931               || 'will need to be'
11932       || crlf || '     upgraded to APEX version ' || c_apex_version || ' '
11933               || 'in the new release.'
11934       || crlf || '     Note 1: To reduce database upgrade time, APEX can '
11935               || 'be manually'
11936       || crlf || '             upgraded outside of and prior to database upgrade.'
11937       || crlf || '     Note 2: See MOS Note 1088970.1 for information on APEX'
11938       || crlf || '             installation upgrades.';
11939    ELSIF HelpType = c_help_fixup THEN
11940      return 'Oracle Application Express can be manually upgraded prior to database upgrade.';
11941    END IF;
11942  END apex_upgrade_msg_gethelp;
11943  
11944  --
11945  -- Fixup (Procedure and function)
11946  --
11947  PROCEDURE apex_upgrade_msg_fixup
11948  IS
11949    result  VARCHAR2(1000);
11950    status  NUMBER;
11951    tSqlcode NUMBER;
11952  BEGIN
11953    -- Call fixup and throw away the result
11954    status := apex_upgrade_msg_fixup (result, tSqlcode);
11955  END apex_upgrade_msg_fixup;
11956  
11957  FUNCTION apex_upgrade_msg_fixup (
11958           result_txt IN OUT VARCHAR2,
11959           pSqlcode    IN OUT NUMBER) RETURN number
11960  IS
11961  BEGIN
11962     result_txt := apex_upgrade_msg_gethelp(c_help_overview);
11963     return c_fixup_status_info;
11964  END apex_upgrade_msg_fixup;
11965  
11966  --
11967  -- end of APEX_UPGRADE_MSG
11968  --
11969  
11970  
11971  -- *****************************************************************
11972  --     default_resource_limit Section
11973  --
11974  -- 1) Initialization parameter RESOURCE_LIMIT 's default value is
11975  --    changing from FALSE to TRUE starting in 12.1.0.2.
11976  -- 2) Will warn customers about the default value changing.
11977  --    This would only affect customers who have applied a resource limit
11978  --    to a user and does not already have resource_limit set in their
11979  --    parameter file.  If they don't have resource_limit set, which
11980  --    means default is FALSE in pre-12102 but TRUE in 12102 and post-12102.
11981  --
11982  -- *****************************************************************
11983  FUNCTION default_resource_limit_check (result_txt OUT VARCHAR2) RETURN number
11984  IS
11985    ret_val      NUMBER := 0;     -- return value from check_stmt
11986    check_stmt   VARCHAR2(1000);  -- check if resource_limit warning is needed
11987  BEGIN
11988  
11989    -- RESOURCE_LIMIT warning is needed IF 1 is returned because all conditions
11990    -- are met:
11991    -- a) if RESOURCE_LIMIT init parameter is currently using the default value
11992    -- AND
11993    -- b) there are non-default/non-unlimited customized resource limits
11994    --    applied to 1 or more users
11995    -- AND
11996    -- c) db-to-be-upgraded's version is at 12.1.0.1 or older
11997    --
11998    check_stmt :=
11999      'SELECT 1 FROM sys.v$parameter ' ||
12000      'WHERE ' ||
12001      '( ' ||                                                 -- criteria (a)
12002      '    (upper(name) = ''RESOURCE_LIMIT'' AND isdefault = ''TRUE'') ' ||
12003      '  AND ' ||                                             -- criteria (b)
12004      '    0 < (SELECT count(*) ' ||
12005      '         FROM sys.dba_users ' ||
12006      '         WHERE profile in ' ||
12007      '           (SELECT unique(profile) ' ||
12008      '            FROM sys.dba_profiles ' ||
12009      '            WHERE resource_type = ''KERNEL'' and ' ||
12010      '                  limit not in (''UNLIMITED'', ''DEFAULT'')) ' ||
12011      '        ) ' ||
12012      '  AND ' ||                                             -- criteria (c)
12013      '    1 = (SELECT count(*) ' ||
12014      '         FROM sys.registry$ ' ||
12015      '         WHERE ' ||
12016      '           upper(cid) = ''CATPROC'' AND ' ||
12017      '           (substr(version, 1, 4) in (''10.2'', ''11.1'', ''11.2'') ' ||
12018      '            OR substr(version, 1, 8) = ''12.1.0.1'') ' ||
12019      '        ) ' ||
12020      ')';
12021  
12022    -- check if a warning - about RESOURCE_LIMIT defaulting to TRUE starting
12023    -- in 12102 - needs to be generated
12024    BEGIN
12025      EXECUTE IMMEDIATE
12026         check_stmt
12027         INTO ret_val;
12028    EXCEPTION
12029      WHEN NO_DATA_FOUND THEN
12030        ret_val := 0;
12031      WHEN OTHERS THEN
12032        dbms_output.put_line('ORA' || SQLCODE ||
12033                             ': Error in DEFAULT_RESOURCE_LIMITS check_stmt:');
12034        dbms_output.put_line(SQLERRM);
12035    END;
12036  
12037    -- return success status if check returns a 0
12038    -- i.e., don't generate warning if ret_val is 0 and do generate warning
12039    -- if ret_val is 1.
12040    IF (ret_val = 0 AND pDBGFailCheck = FALSE) THEN
12041      return c_status_success;
12042    END IF;
12043  
12044    -- if we are here, then warning needs to be generated
12045    IF pOutputType = c_output_xml THEN
12046      result_txt:= genDBUAXMLCheck('DEFAULT_RESOURCE_LIMIT',
12047        c_check_level_warning,
12048        'RESOURCE_LIMIT default has changed to TRUE starting with 12.1.0.2',
12049        'Resource limits defined for users via database profiles may not ' ||
12050        'be currently enforced because RESOURCE_LIMIT init parameter in ' ||
12051        'this ' || db_version || ' database is shown to be defaulted to FALSE.',
12052        'To continue having these database resource limits disabled for users ' ||
12053          'after database upgrade, set RESOURCE_LIMIT to FALSE.  ' ||
12054          'For example, to change parameter file: update PFILE or use ' ||
12055          '"ALTER SYSTEM SET RESOURCE_LIMIT=FALSE SCOPE=SPFILE".  ' ||
12056          'Note that the update in the PFILE/SPFILE will not take ' ||
12057          'effect until the next database startup.',
12058        c_dbua_detail_type_text,
12059        'RESOURCE_LIMIT default value is FALSE in 12.1.0.1 release and ' ||
12060          'earlier but is TRUE in 12.1.0.2 onwards.',
12061        c_dbua_fixup_type_manual,
12062        c_dbua_fixup_stage_validation);
12063    ELSE
12064      result_txt := default_resource_limit_gethelp(c_help_overview);
12065    END IF;
12066  
12067    IF pOutputFixupScripts THEN
12068      genFixup ('DEFAULT_RESOURCE_LIMIT');
12069    END IF;
12070  
12071    RETURN c_status_failure;
12072  END default_resource_limit_check;
12073  
12074  FUNCTION default_resource_limit_gethelp (HelpType IN NUMBER) RETURN VARCHAR2
12075  IS
12076  BEGIN
12077  
12078    IF HelpType = c_help_overview THEN
12079      return 'WARNING: --> RESOURCE_LIMIT default has changed to TRUE '
12080       ||    'starting with 12.1.0.2'
12081       ||crlf
12082       ||crlf||'      Resource limits defined for users via database profiles may not'
12083       ||crlf||'      be currently enforced because RESOURCE_LIMIT init parameter in'
12084       ||crlf||'      this ' || db_version || ' database is shown to be defaulted to FALSE.'
12085       ||crlf||'      o RESOURCE_LIMIT in 12.1.0.1 release and earlier is FALSE by'
12086       ||crlf||'        default but is TRUE starting with 12.1.0.2.'
12087       ||crlf||'      o To continue having these resource limits disabled for users'
12088       ||crlf||'        after database upgrade, set RESOURCE_LIMIT to FALSE.'
12089       ||crlf||'      o For example, to change parameter file: update PFILE or use'
12090       ||crlf||'        "ALTER SYSTEM SET RESOURCE_LIMIT=FALSE SCOPE=SPFILE".  Note that'
12091       ||crlf||'        the update will not take effect until next database startup.';
12092    ELSIF HelpType = c_help_fixup THEN
12093      return 'Examine RESOURCE_LIMIT before upgrading to the new release';
12094    END IF;
12095  END default_resource_limit_gethelp;
12096  
12097  --
12098  -- Fixup (Procedure and function)
12099  --
12100  PROCEDURE default_resource_limit_fixup
12101  IS
12102    result  VARCHAR2(1000);
12103    status  NUMBER;
12104    tSqlcode NUMBER;
12105  BEGIN
12106    -- Call fixup and throw away the result
12107    status := default_resource_limit_fixup (result, tSqlcode);
12108  END default_resource_limit_fixup;
12109  
12110  FUNCTION default_resource_limit_fixup (
12111           result_txt IN OUT VARCHAR2,
12112           pSqlcode    IN OUT NUMBER) RETURN number
12113  IS
12114  BEGIN
12115     result_txt := default_resource_limit_gethelp(c_help_overview);
12116     return c_fixup_status_info;
12117  END default_resource_limit_fixup;
12118  
12119  --
12120  -- end of DEFAULT_RESOURCE_LIMIT
12121  --
12122  
12123  
12124  
12125  -- ****************************************************************************
12126  --                             Specific Recommendation Area
12127  -- ****************************************************************************
12128  --
12129  -- "check-name"_recommend()
12130  --   These checks are usually just dumping out text either to the log or to
12131  --   the scripts
12132  --
12133  PROCEDURE dictionary_stats_recommend
12134  IS
12135  BEGIN
12136    IF pOutputType = c_output_text THEN
12137      --
12138      -- Stale Stats
12139      --
12140      DisplayLine(pPreScriptUFT,'BEGIN');
12141      DisplayCenter(pPreScriptUFT,pStarHeader);
12142      DisplayCenter(pPreScriptUFT,CenterLine('********* Dictionary Statistics *********'));
12143      DisplayCenter(pPreScriptUFT,pStarHeader);
12144      DisplayLineBoth(pPreScriptUFT, '');
12145      DisplayLineBoth(pPreScriptUFT, 'Please gather dictionary statistics 24 hours prior to');
12146      DisplayLineBoth(pPreScriptUFT, 'upgrading the database.');
12147      DisplayLineBoth(pPreScriptUFT, 'To gather dictionary statistics execute the following command');
12148      DisplayLineBoth(pPreScriptUFT, 'while connected as SYSDBA:');
12149      DisplayLineBoth(pPreScriptUFT, '    EXECUTE dbms_stats.gather_dictionary_stats;');
12150      DisplayLineBoth(pPreScriptUFT, '');
12151      DisplayLineBoth(pPreScriptUFT, pActionSuggested);
12152      DisplayLineBoth(pPreScriptUFT, '');
12153      DisplayLine(pPreScriptUFT,'END;');
12154      DisplayBlankLine(pPreScriptUFT);  -- '/' is at end of block with IF stmt
12155    END IF;
12156  END dictionary_stats_recommend;
12157  
12158  
12159  --
12160  -- parameters_display()
12161  -- 1) depending on the input argument, this procedure queries for
12162  --    underscore/hidden parameters or event parameters used in the instance
12163  -- 2) if input is 1 : queries for and displays underscore/hidden parameters
12164  -- 3) if input is 2 : queries for and displays events
12165  --
12166  PROCEDURE parameters_display (param_type_to_display IN NUMBER)
12167  -- c_display_underscore_params = 1 <-- display underscore/hidden params
12168  -- c_display_events            = 2 <-- display events
12169  IS
12170    hidden_param_name   sys.v$parameter.name%TYPE;
12171    hidden_param_value  sys.v$parameter.value%TYPE;
12172    event_value         sys.v$parameter2.value%TYPE;
12173  
12174    rowcount         NUMBER;  -- # of rows fetched
12175    c_none_stmt      CONSTANT VARCHAR2(30) := 'NONE found';  -- none found
12176  BEGIN
12177  
12178    rowcount := 0;
12179  
12180    -- for each hidden/underscore parameter set, display it and its value
12181    -- note: _trace_events as a separate section have been removed since
12182    --       _trace_events will show up as part of underscore parameters anyway.
12183    -- note: use the ismodified criteria below to
12184    --       filter out underscore parameters set during 'alter session' when
12185    --       preupgrade tool is run
12186    IF (param_type_to_display = 1) THEN
12187      FOR i
12188      IN ( select name hidden_param_name, value hidden_param_value
12189           from SYS.V$PARAMETER
12190           where name LIKE '\_%' ESCAPE '\'
12191                 and ismodified != 'MODIFIED'
12192           order by name )
12193      LOOP
12194        IF pOutputDest = c_output_file AND pOutputType = c_output_text THEN
12195          -- write into preupgrade.log
12196          DisplayLine(pOutputUFT,
12197                      i.hidden_param_name || ' = ' || i.hidden_param_value);
12198        ELSE
12199          -- screen output
12200          dbms_output.put_line(i.hidden_param_name || ' = ' ||
12201                               i.hidden_param_value);
12202        END IF;
12203        rowcount := rowcount + 1;
12204      END LOOP;
12205  
12206      -- if no rows returned, then print "NONE found"
12207      IF (rowcount = 0) THEN
12208        dbms_output.put_line(c_none_stmt);
12209      END IF;
12210  
12211    -- for each event set, display its value
12212    ELSIF (param_type_to_display = 2) THEN
12213      FOR i
12214      IN ( select (translate(value,chr(13)||chr(10),' ')) event_value
12215           from sys.v$parameter2
12216           where  upper(name) ='EVENT' and  isdefault='FALSE' order by name )
12217      LOOP
12218        IF pOutputDest = c_output_file AND pOutputType = c_output_text THEN
12219          -- write to preupgrade.log
12220          DisplayLine(pOutputUFT, i.event_value);
12221        ELSE
12222          -- screen output
12223          dbms_output.put_line(i.event_value);
12224        END IF;
12225        rowcount := rowcount + 1;
12226      END LOOP;
12227  
12228      -- if no rows returned, then print "NONE found"
12229      IF (rowcount = 0) THEN
12230        dbms_output.put_line(c_none_stmt);
12231      END IF;
12232    END IF;
12233  
12234  END parameters_display;
12235  
12236  
12237  PROCEDURE hidden_params_recommend
12238  IS
12239    t_boolean BOOLEAN;
12240    t_status  NUMBER;
12241  BEGIN
12242    IF pOutputType = c_output_text THEN
12243      --
12244      -- If there are no hidden params set, no need to recommend review.
12245      --
12246      t_boolean := FALSE;
12247      BEGIN
12248         EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM sys.v$parameter WHERE name LIKE ''\_%'' ESCAPE ''\'' AND ismodified != ''MODIFIED'''
12249         INTO t_status;
12250         IF (t_status >= 1) THEN
12251           t_boolean := TRUE;
12252         END IF;
12253      EXCEPTION
12254          WHEN OTHERS THEN NULL;
12255      END;
12256      IF t_boolean THEN
12257        DisplayLine(pPreScriptUFT,'BEGIN');
12258        DisplayLineBoth(pPreScriptUFT, '');
12259        DisplayCenter(pPreScriptUFT,pStarHeader);
12260        DisplayCenter(pPreScriptUFT,CenterLine('*********** Hidden Parameters ***********'));
12261        DisplayCenter(pPreScriptUFT,pStarHeader);
12262        DisplayLineBoth(pPreScriptUFT, '');
12263        DisplayLineBoth(pPreScriptUFT, 'Please review and remove any unnecessary hidden/underscore parameters prior');
12264        DisplayLineBoth(pPreScriptUFT, 'to upgrading.  It is strongly recommended that these be removed before upgrade');
12265        DisplayLineBoth(pPreScriptUFT, 'unless your application vendors and/or Oracle Support state differently.');
12266        DisplayLineBoth(pPreScriptUFT, 'Changes will need to be made in the init.ora or spfile.');
12267        DisplayLineBoth(pPreScriptUFT, '');
12268  
12269        IF pOutputType = c_output_text THEN
12270          -- display parameters in TEXT to either screen or preupgrade.log
12271          parameters_display(1);
12272          DisplayLine(pOutputUFT, '');
12273          DisplayLine(pOutputUFT, pActionSuggested);
12274        END IF;
12275  
12276        DisplayLine(pPreScriptUFT,'END;');
12277        DisplayBlankLine(pPreScriptUFT);
12278  
12279        --
12280        -- Write to preupgrade_fixups.sql to display hidden parameters
12281        --
12282        IF pOutputFixupScripts THEN
12283          DisplayLine('');
12284          DisplayLine(pPreScriptUFT,'BEGIN');
12285          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line
12286            ('           ********    Existing Hidden Parameters   ********');!');
12287          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line ('');!');
12288          DisplayLine(pPreScriptUFT, 'dbms_preup.parameters_display(1);');
12289          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line ('');!');
12290          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line
12291            ('^^^ MANUAL ACTION SUGGESTED ^^^');!');
12292          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line ('');!');
12293          DisplayLine(pPreScriptUFT, 'END;');
12294          DisplayBlankLine(pPreScriptUFT);
12295        END IF;
12296      END IF; -- end of hidden_params_in_use
12297    END IF;
12298  END hidden_params_recommend;
12299  
12300  PROCEDURE underscore_events_recommend
12301  IS
12302    t_boolean BOOLEAN;
12303    t_status  NUMBER;
12304  BEGIN
12305  
12306    IF pOutputType = c_output_text THEN
12307      --
12308      -- underscore events that are set.
12309      --
12310      t_boolean := FALSE;
12311      BEGIN
12312        EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM sys.v$parameter2 WHERE (UPPER(name) = ''EVENT''
12313             OR UPPER(name)=''_TRACE_EVENTS'') AND isdefault=''FALSE'''
12314        INTO t_status;
12315        IF (t_status >= 1) THEN
12316          t_boolean := TRUE;
12317        END IF;
12318      EXCEPTION
12319        WHEN OTHERS THEN NULL;
12320      END;
12321  
12322      IF t_boolean THEN
12323        DisplayLine(pPreScriptUFT, 'BEGIN');
12324        DisplayLineBoth(pPreScriptUFT, '');
12325        DisplayCenter(pPreScriptUFT,pStarHeader);
12326        DisplayCenter(pPreScriptUFT,CenterLine('************ Existing Events ************'));
12327        DisplayCenter(pPreScriptUFT,pStarHeader);
12328        DisplayLineBoth(pPreScriptUFT, '');
12329        DisplayLineBoth(pPreScriptUFT, 'Please review and remove any unnecessary events prior to upgrading.');
12330        DisplayLineBoth(pPreScriptUFT, 'It is strongly recommended that these be removed before upgrade unless');
12331        DisplayLineBoth(pPreScriptUFT, 'your application vendors and/or Oracle Support state differently.');
12332        DisplayLineBoth(pPreScriptUFT, 'Changes will need to be made in the init.ora or spfile.');
12333        DisplayLineBoth(pPreScriptUFT, '');
12334  
12335        IF pOutputType = c_output_text THEN
12336          -- display parameters in TEXT to either screen or preupgrade.log
12337          parameters_display(2);
12338          DisplayLine(pOutputUFT, '');
12339          DisplayLine(pOutputUFT, pActionSuggested);
12340        END IF;
12341  
12342        DisplayLine(pPreScriptUFT, 'END;');
12343        DisplayBlankLine(pPreScriptUFT);
12344  
12345        --
12346        -- Write to preupgrade_fixups.sql to display events
12347        --
12348        IF pOutputFixupScripts THEN
12349          DisplayLine('');
12350  
12351          DisplayLine(pPreScriptUFT, 'BEGIN');
12352          DisplayLine(pPreScriptUFT,q'!dbms_output.put_line  ('            ********           Existing Events       ********');!');
12353          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line ('');!');
12354          DisplayLine(pPreScriptUFT, 'dbms_preup.parameters_display(2);');
12355          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line ('');!');
12356          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line
12357            ('^^^ MANUAL ACTION SUGGESTED ^^^');!');
12358          DisplayLine(pPreScriptUFT, q'!dbms_output.put_line ('');!');
12359          DisplayLine(pPreScriptUFT, 'END;');
12360          DisplayBlankLine(pPreScriptUFT);
12361        END IF;
12362      END IF; -- end of non_default_events
12363    END IF;
12364  END underscore_events_recommend;
12365  
12366  PROCEDURE audit_records_recommend
12367  IS
12368    t_boolean BOOLEAN;
12369    t_status  NUMBER;
12370  BEGIN
12371    IF pOutputType = c_output_text THEN
12372      t_boolean := FALSE;
12373      t_status := 0;
12374      -- There are three checks here - for various options of audit records.
12375      BEGIN
12376        EXECUTE IMMEDIATE 'SELECT count(*) FROM sys.aud$ WHERE dbid is null'
12377        INTO t_status;
12378        IF t_status > 250000 THEN
12379          t_boolean := TRUE;
12380        END IF;
12381      EXCEPTION
12382        WHEN OTHERS THEN NULL;
12383      END;
12384      BEGIN
12385        -- Standard Auditing, only when Oracle Label Security (OLS)
12386        -- and/or Database Vault (DV) is installed
12387        EXECUTE IMMEDIATE 'SELECT count(*) FROM system.aud$ WHERE dbid is null'
12388        INTO t_status;
12389        IF t_status > 250000 THEN
12390          t_boolean := TRUE;
12391      END IF;
12392      EXCEPTION
12393        WHEN OTHERS THEN NULL;
12394      END;
12395      BEGIN
12396        -- Fine Grained Auditing
12397        EXECUTE IMMEDIATE 'SELECT count(*) FROM sys.fga_log$ WHERE dbid is null'
12398        INTO t_status;
12399        IF t_status > 250000 THEN
12400          t_boolean := TRUE;
12401        END IF;
12402      EXCEPTION
12403        WHEN OTHERS THEN NULL;
12404      END;
12405  
12406      IF t_boolean THEN
12407        DisplayLine(pPreScriptUFT, 'BEGIN');
12408        DisplayLineBoth(pPreScriptUFT, '');
12409        DisplayCenter(pPreScriptUFT,pStarHeader);
12410        DisplayCenter(pPreScriptUFT,CenterLine('******** Audit Record Pre-Processing ********'));
12411        DisplayCenter(pPreScriptUFT,pStarHeader);
12412        DisplayLineBoth(pPreScriptUFT, '');
12413        DisplayLineBoth(pPreScriptUFT, 'The database contains a large number of Audit records which can slow down');
12414        DisplayLineBoth(pPreScriptUFT, 'an upgrade.  Please review My Oracle Support note number 1329590.1 ');
12415        DisplayLineBoth(pPreScriptUFT, 'for options on processing these records prior to the upgrade to save');
12416        DisplayLineBoth(pPreScriptUFT, 'upgrade down time');
12417        DisplayLineBoth(pPreScriptUFT, '');
12418        DisplayLineBoth(pPreScriptUFT, pActionSuggested);
12419        DisplayLineBoth(pPreScriptUFT, '');
12420        DisplayLine(pPreScriptUFT, 'END;');
12421        DisplayBlankLine(pPreScriptUFT);
12422      END IF;
12423    END IF;
12424  END audit_records_recommend;
12425  
12426  PROCEDURE fixed_objects_recommend
12427  IS
12428  BEGIN
12429    IF pOutputType = c_output_text THEN
12430      DisplayLine(pPostScriptUFT, 'BEGIN');
12431      DisplayCenter(pPostScriptUFT,pStarHeader);
12432      DisplayCenter(pPostScriptUFT,CenterLine('******** Fixed Object Statistics ********'));
12433      DisplayCenter(pPostScriptUFT,pStarHeader);
12434  
12435      DisplayLineBoth(pPostScriptUFT,'');
12436      DisplayLineBoth(pPostScriptUFT,'Please create stats on fixed objects two weeks');
12437      DisplayLineBoth(pPostScriptUFT,'after the upgrade using the command:');
12438      DisplayLineBoth(pPostScriptUFT,'   EXECUTE DBMS_STATS.GATHER_FIXED_OBJECTS_STATS;');
12439      DisplayLineBoth(pPostScriptUFT,'');
12440      DisplayLineBoth(pPostScriptUFT, pActionSuggested);
12441      DisplayLineBoth(pPostScriptUFT, '');
12442      DisplayLine(pPostScriptUFT, 'END;');
12443      DisplayBlankLine(pPostScriptUFT);
12444    END IF;
12445  END fixed_objects_recommend;
12446  
12447  
12448  -- if db is a noncdb, return TRUE
12449  -- if db is a cdb, return FALSE
12450  FUNCTION is_db_noncdb RETURN BOOLEAN
12451  IS
12452    b_isCdb   BOOLEAN := FALSE;
12453    s_isCdb   VARCHAR2(3) := 'NO';
12454    e_noColumnFound EXCEPTION;  -- ORA-00904: "...": invalid identifier
12455    PRAGMA exception_init(e_noColumnFound, -904);
12456  BEGIN
12457    begin
12458      execute immediate 'select cdb from v$database'
12459        into s_isCdb;
12460    exception
12461      WHEN e_noColumnFound THEN s_isCdb := 'NO'; -- ORA-00904: invalid identifier
12462    end;
12463  
12464    if (s_isCdb = 'YES') then
12465      return FALSE; -- is this db a non-cdb? no, this db is a cdb.
12466    else
12467      return TRUE;  -- is this db a non-cdb? yes, this db is a non-cdb.
12468    end if;
12469  
12470  END is_db_noncdb;
12471  
12472  
12473  -- if db is a cdb, return container name.
12474  -- if db is a noncdb, return container name (which is basically the db name).
12475  -- if db is pre-12.1, then it doesn't have a CON_NAME.  just return db name.
12476  -- note: name returned is in uppercase.
12477  FUNCTION get_con_name RETURN VARCHAR2
12478  IS
12479    conName   VARCHAR2(30) := '';
12480    e_noParamFound EXCEPTION;   -- ORA-02003: invalid USERENV parameter
12481    PRAGMA exception_init(e_noParamFound, -2003);
12482  BEGIN
12483  
12484    -- get container name
12485    begin
12486      execute immediate
12487        'select upper(SYS_CONTEXT(''USERENV'', ''CON_NAME'')) from sys.dual'
12488        into conName;
12489    exception
12490      WHEN e_noParamFound THEN conName := '';
12491    end;
12492  
12493    -- if container name is null, then this must be a pre-121 db.
12494    -- just get db name.
12495    if conName is NULL then
12496      execute immediate 'select upper(name) from sys.v$database' into conName;
12497    end if;
12498  
12499    return conName;
12500  END get_con_name;
12501  
12502  
12503  -- if db is a cdb, return container id.
12504  -- if db is a noncdb, return container id (which is 0).
12505  -- if db is pre-12.1, then it doesn't have a CON_ID.  just return 0.
12506  -- note: a noncdb in 12.1 has a con id of 0.
12507  FUNCTION get_con_id RETURN NUMBER
12508  IS
12509    conId   NUMBER := 0;
12510    e_noParamFound EXCEPTION;   -- ORA-02003: invalid USERENV parameter
12511    PRAGMA exception_init(e_noParamFound, -2003);
12512  BEGIN
12513    begin
12514      execute immediate
12515        'select SYS_CONTEXT(''USERENV'', ''CON_ID'') from sys.dual'
12516        into conId;
12517    exception
12518      WHEN e_noParamFound THEN conId := 0;
12519    end;
12520  
12521    return conId;
12522  END get_con_id;
12523  
12524  
12525  --
12526  -- add an entry to registry$log to indicate preupgrade tool will start to run
12527  --
12528  PROCEDURE begin_log_preupg_action
12529  IS
12530  PRAGMA AUTONOMOUS_TRANSACTION;
12531    sqlString varchar2(500); -- string to build sql stmt to execute
12532  BEGIN
12533    IF tracing_on_xxx THEN
12534      dbms_output.put_line('XXX in begin_log_preupg_action');
12535    END IF;
12536  
12537    -- only log upgrade entries into registry$log if db is opened for read write
12538    IF is_db_readonly = FALSE THEN
12539      IF tracing_on_xxx THEN
12540        dbms_output.put_line('XXX readOnlyMode is 0') ;
12541      END IF;
12542  
12543      BEGIN
12544        sqlString :=
12545           'insert into sys.registry$log (cid, namespace, operation, optime) ' ||
12546           '  values (''PREUPG_BGN'', ' ||
12547           '  SYS_CONTEXT(''REGISTRY$CTX'', ''NAMESPACE''), -1, SYSTIMESTAMP)';
12548        EXECUTE IMMEDIATE sqlString;
12549        COMMIT;
12550      END;
12551    END IF;
12552  END begin_log_preupg_action;
12553  
12554  
12555  --
12556  -- add an entry to registry$log to indicate preupgrade tool had been run
12557  --
12558  PROCEDURE end_log_preupg_action
12559  IS
12560  PRAGMA AUTONOMOUS_TRANSACTION;
12561    conId     NUMBER       := sys.dbms_preup.get_con_id;
12562    conName   VARCHAR2(30) := sys.dbms_preup.get_con_name;
12563    sqlString VARCHAR2(500);      -- string to build sql stmt to execute
12564  BEGIN
12565  
12566    IF tracing_on_xxx THEN
12567      dbms_output.put_line('XXX in end_log_preupg_action');
12568    END IF;
12569  
12570    -- only log upgrade entries into registry$log if db is opened for read write
12571    IF is_db_readonly = FALSE THEN
12572      IF tracing_on_xxx THEN
12573        dbms_output.put_line('XXX readOnlyMode is 0') ;
12574      END IF;
12575  
12576      BEGIN
12577        sqlString :=
12578          'insert into sys.registry$log (cid, namespace, operation, optime) ' ||
12579          '  values (''PREUPG_END'', ' ||
12580          '  SYS_CONTEXT(''REGISTRY$CTX'', ''NAMESPACE''), -1, SYSTIMESTAMP)';
12581        EXECUTE IMMEDIATE sqlString;
12582        COMMIT;
12583      END;
12584    END IF;
12585  END end_log_preupg_action;
12586  
12587  
12588  -- is db read only?
12589  -- return TRUE if db open mode is READ ONLY, else FALSE if READ WRITE
12590  FUNCTION is_db_readonly RETURN BOOLEAN
12591  IS
12592    b_retStat  BOOLEAN  := FALSE;  -- default is FALSE or db is NOT read only
12593    open_mode  VARCHAR2(80);       -- open mode string
12594  BEGIN
12595    EXECUTE IMMEDIATE 'SELECT open_mode FROM sys.v$database' INTO open_mode;
12596    IF SUBSTR(open_mode, 1, 9) = 'READ ONLY' THEN
12597      b_retStat := TRUE;
12598    END IF;
12599  
12600    return b_retStat;
12601  END is_db_readonly;
12602  
12603  
12604  -- is current container CDB$ROOT?
12605  -- if db is a cdb and current container connected to is root, return TRUE.
12606  -- else return FALSE.
12607  FUNCTION is_con_root RETURN BOOLEAN
12608  IS
12609    b_isCdb    BOOLEAN  := FALSE;
12610    b_retStat  BOOLEAN  := FALSE;
12611    conId      NUMBER;
12612  BEGIN
12613  
12614    IF sys.dbms_preup.is_db_noncdb = TRUE THEN  -- this db is a non-cdb
12615      b_retStat := FALSE;  -- no, it can't be the ROOT
12616    ELSE  -- this db is a cdb
12617      conId := sys.dbms_preup.get_con_id;  -- check con id
12618      IF (conId = 1) THEN  -- ROOT's con id is 1
12619        b_retStat := TRUE;  -- yes, current container is CDB$ROOT
12620      END IF;
12621    END IF;
12622  
12623    return b_retStat;
12624  END is_con_root;
12625  
12626  
12627  --
12628  -- write_pdb_file:
12629  -- append a pdb file to a main destination file
12630  -- note: this is done if a write lock file is created.
12631  --
12632  PROCEDURE write_pdb_file (locDirObj     IN VARCHAR2,
12633                            pdbFileName   IN VARCHAR2,
12634                            pdbFilePtr    IN OUT UTL_FILE.FILE_TYPE,
12635                            destFileName  IN VARCHAR2
12636                           )
12637  --   locDirObj VARCHAR2(512)           -- PREUPGRADE_DIR
12638  --   pdbFileName   VARCHAR2(512)       -- pdb file name to concat from
12639  --   pdbFilePtr    UTL_FILE.FILE_TYPE  -- pdb file pointer to concat from
12640  --   destFileName  VARCHAR2(512)       -- main destination file to write to
12641  IS
12642  destFilePtr UTL_FILE.FILE_TYPE;  -- destination file to concat to
12643  buf         VARCHAR2(15010);     -- read line buffer (c_max_lsz + 10)
12644  line_num    NUMBER := 0;         -- line number to the pdb file
12645  invalidFileRename  EXCEPTION;
12646  PRAGMA exception_init(invalidFileRename, -29292);
12647  BEGIN
12648    IF tracing_on_xxx THEN
12649      dbms_output.put_line('XXX in write_pdb_file');
12650      dbms_output.put_line('XXX pdbFileName is ' || pdbFileName);
12651      dbms_output.put_line('XXX destFileName is ' || destFileName);
12652    END IF;
12653  
12654    -- Do not open the destination dest files unless write lock file is created.
12655    -- Possible destination files if this db is a PDB : preupgrade.log,
12656    -- preupgrade_fixups.sql, and postupgrade_fixups.sql.
12657    destFilePtr := UTL_FILE.FOPEN(locDirObj, destFileName, 'A');
12658  
12659    -- close the pdb source file (currently opened for writes) so that it
12660    -- can be reopened for READ
12661    BEGIN
12662      UTL_FILE.FCLOSE(pdbFilePtr);
12663      pdbFilePtr := UTL_FILE.FOPEN(locDirObj, pdbFileName, 'R');
12664    EXCEPTION
12665      WHEN OTHERS THEN
12666        RAISE_APPLICATION_ERROR(-20000, 'Error: ' || SQLERRM);
12667    END;
12668  
12669    IF tracing_on_xxx THEN
12670      dbms_output.put_line('XXX open pdb file for read only ' ||  pdbFileName);
12671    END IF;
12672  
12673    -- for each line in the pdb file, append it to the final destination file
12674    line_num := 0;
12675    LOOP
12676      BEGIN
12677        UTL_FILE.GET_LINE(pdbFilePtr, buf);
12678        line_num := line_num + 1;
12679        UTL_FILE.PUT_LINE(destFilePtr, buf, false);
12680      EXCEPTION
12681      WHEN NO_DATA_FOUND THEN
12682        EXIT; -- if here, then have read past the end of the file
12683      WHEN OTHERS THEN
12684        RAISE_APPLICATION_ERROR(-20000, 'Error: ' || SQLERRM);
12685      END;
12686    END LOOP;
12687  
12688    IF tracing_on_xxx THEN
12689      dbms_output.put_line('XXX ' || line_num || ' lines copied from pdb file');
12690    END IF;
12691  
12692    -- clean up after concatenating pdb file to final destination file
12693    BEGIN
12694      -- after copying the pdb file into the main destination file, then
12695      -- close pdb file (source file)
12696      UTL_FILE.FCLOSE(pdbFilePtr);  -- close pdb file
12697  
12698      -- close final destination file
12699      UTL_FILE.FCLOSE(destFilePtr);
12700    EXCEPTION
12701      WHEN OTHERS THEN
12702        RAISE_APPLICATION_ERROR(-20000, 'Error: ' || SQLERRM);
12703    END;
12704  
12705    -- The pdb file was first created in the top level PREUPGRADE_DIR.
12706    -- After concatenating the pdb file into the main destination file, then let's
12707    -- move the pdb file to the pdbfiles subdirectory (under PREUPGRADE_DIR).
12708    IF pCreatedPdbDirObj = TRUE THEN
12709      BEGIN
12710        UTL_FILE.FRENAME(c_dir_obj, pdbFileName,
12711                         c_pdb_dir_obj, pdbFileName, TRUE);
12712        IF tracing_on_xxx THEN
12713          dbms_output.put_line('XXX moving pdb file ' || pdbFileName ||
12714                               ' to pdbfiles subdirectory');
12715        END IF;
12716      EXCEPTION
12717      WHEN invalidFileRename THEN NULL;
12718      WHEN OTHERS THEN
12719        RAISE_APPLICATION_ERROR(-20000, 'Error: ' || SQLERRM);
12720      END;
12721    END IF;  -- if pdb directory object exists
12722  
12723  END write_pdb_file;
12724  
12725  --
12726  -- get_write_lock:
12727  -- Returns TRUE if able to create an exclusive write lock file; else returns
12728  -- FALSE.
12729  -- Is only used for when concatenating a pdb file into a main destination
12730  -- file.
12731  --
12732  PROCEDURE  get_write_lock
12733  IS
12734  lockFilePtr UTL_FILE.FILE_TYPE;  -- lock file handle for exclusive write
12735  wr_loops    NUMBER := 0; -- # of times looping for write lock file to be freed
12736  fileExist   BOOLEAN := FALSE;  -- file exists T/F
12737  fileSz      NUMBER;  -- file size
12738  blkLen      NUMBER;  -- block length
12739  
12740  BEGIN
12741  
12742    IF tracing_on_xxx THEN
12743      dbms_output.put_line('XXX getting write lock file');
12744    END IF;
12745  
12746    -- loop until a lock file is created or until max # of looping have been hit,
12747    -- whichever comes first
12748    pGotWriteLock := FALSE;
12749    wr_loops := 0;
12750    WHILE (pGotWriteLock = FALSE AND wr_loops <= c_wrlock_max_waits)
12751    LOOP
12752      IF tracing_on_xxx THEN
12753        dbms_output.put_line('XXX write lock: wr_loops is ' || wr_loops);
12754      END IF;
12755  
12756      -- does the lock file for exclusive writes exist?
12757      UTL_FILE.FGETATTR(pOutputLocation, c_wrlock_fname, fileExist, fileSz,
12758                        blkLen);
12759  
12760      -- if the lock file does not exist yet => create the write lock file
12761      -- else if the lock file already exists => sleep and then try again
12762      IF (fileExist = FALSE) THEN
12763        BEGIN
12764          -- create write lock file
12765          lockFilePtr := UTL_FILE.FOPEN(pOutputLocation, c_wrlock_fname, 'W');
12766          UTL_FILE.FCLOSE(lockFilePtr);
12767          pGotWriteLock := TRUE;  -- got lock file
12768          IF tracing_on_xxx THEN
12769            dbms_output.put_line('XXX got write lock' );
12770          END IF;
12771        EXCEPTION
12772        WHEN OTHERS THEN
12773          pGotWriteLock := FALSE;
12774          RAISE_APPLICATION_ERROR(-20000, 'Error: ' || SQLERRM);
12775        END;
12776      END IF;
12777  
12778      IF pGotWriteLock = FALSE THEN
12779        -- sleep 1 sec per loop/wait for write lock
12780        dbms_lock.sleep(c_wrlock_sleep_secs);
12781        wr_loops := wr_loops + 1;
12782      END IF;
12783    END LOOP;
12784  
12785    -- If # of loops exceeded, then just give up trying to get the
12786    -- write lock.  Instead, just leave the output in the pdb *.<con_name>.* files
12787    -- output files and let user know.
12788    IF wr_loops > c_wrlock_max_waits THEN
12789      DisplayLinePL('');
12790      DisplayLinePL('====>> Note: Was not able to write output into log file ''' || c_output_fn || ''' in ' || pTextLogDir || '.');
12791      DisplayLinePL('The output from this run in ' || dbms_preup.get_con_name || ' will remain in ' || pOutputFName || '.');
12792      DisplayLinePL('Note: before running preupgrade tool, please make sure lock file ''' || c_wrlock_fname || ''' in ' || pTextLogDir || ' is removed.');
12793      DisplayLinePL('');
12794    END IF;
12795  
12796  END get_write_lock;
12797  
12798  
12799  --
12800  -- concat_pdb_file
12801  -- 1. create a write lock file
12802  -- 2. if a lock file is gotten, then call write_pdb_file to append pdb files
12803  -- (preupgrd.<con_name>.log, preupgrade_fixups.<con_name>.sql,
12804  -- postupgrade_fixups.<con_name>.sql) to the main destination files
12805  -- (preupgrd.log, preupgrade_fixups.log, postupgrade_fixups.log).
12806  --
12807  PROCEDURE  concat_pdb_file
12808  IS
12809  
12810  pdbFilePtr  UTL_FILE.FILE_TYPE;  -- pdb file to concat from
12811  destFilePtr UTL_FILE.FILE_TYPE;  -- final destination file to concat to
12812  e_userCancel EXCEPTION; -- ORA-01013: user requested cancel of current operation
12813  e_noOraConnect1 EXCEPTION; -- ORA-03113: end-of-file on communication channel
12814  e_noOraConnect2 EXCEPTION; -- ORA-03114: not connected to ORACLE
12815  PRAGMA exception_init(e_userCancel, -1013);
12816  PRAGMA exception_init(e_noOraConnect1, -3113);
12817  PRAGMA exception_init(e_noOraConnect2, -3114);
12818  
12819  BEGIN
12820  
12821    -- determine if if we are stay to concat or leave
12822    IF (pConcatToMainFile = FALSE) THEN
12823      -- nothing to concat into since the writes are already going directly
12824      -- to the final destination file
12825      -- and no write lock to get
12826  
12827      IF tracing_on_xxx THEN
12828        dbms_output.put_line('XXX pConcatToMainFile is FALSE');
12829      END IF;
12830  
12831      RETURN;  -- exit procedure
12832    ELSE
12833      IF tracing_on_xxx THEN
12834        dbms_output.put_line('XXX pConcatToMainFile is TRUE');
12835      END IF;
12836    END IF;  -- end of if pConcatToMainFile is TRUE
12837  
12838    -- this is the meat of concat-ing pdb files into main destination files
12839    BEGIN
12840      -- create write lock file
12841      get_write_lock;
12842  
12843      -- If we couldn't create the write lock file exclusively
12844      -- then just leave the output in the pdb *.<con_name>.* files
12845      -- and update the final destination variables.
12846      -- Else write from pdb files into main destinations files.
12847      --
12848      IF pGotWriteLock = FALSE THEN
12849        -- since we couldn't get the write lock, the final destination files are
12850        -- now the pdb files
12851        finalDestLogFn         := pOutputFName;
12852  
12853        IF (pOutputType = c_output_text) THEN
12854          -- preupgrade_fixups.sql and postupgrade_fixups.sql are only generated
12855          -- if file type is TEXT
12856          finalDestPreScriptFn   := pPreScriptFname;
12857          finalDestPostScriptFn  := pPostScriptFname;
12858        END IF;
12859  
12860      ELSIF pGotWriteLock = TRUE THEN
12861        -- if we are here, that means write lock file was created
12862        -- now write from pdb files to main destination files
12863  
12864        write_pdb_file(pOutputLocation, pOutputFName,
12865                           pOutputUFT, finalDestLogFn);
12866        IF (pOutputType = c_output_text) THEN
12867          -- preupgrade_fixups.sql and postupgrade_fixups.sql are only generated
12868          -- if file type is TEXT
12869          write_pdb_file(pOutputLocation, pPreScriptFname,
12870                         pPreScriptUFT, c_pre_script_fn);
12871          write_pdb_file(pOutputLocation, pPostScriptFname,
12872                         pPostScriptUFT, c_post_script_fn);
12873        END IF;
12874  
12875        -- clean up: remove lock file
12876        BEGIN
12877          UTL_FILE.FREMOVE(pOutputLocation, c_wrlock_fname);
12878          pGotWriteLock := FALSE;
12879          IF tracing_on_xxx THEN
12880            dbms_output.put_line('XXX removing write lock file');
12881            dbms_output.put_line('XXX pOutputLocation ' || pOutputLocation);
12882            dbms_output.put_line('XXX c_wrlock_fname ' || c_wrlock_fname);
12883          END IF;
12884        EXCEPTION
12885          WHEN OTHERS THEN
12886            dbms_output.put_line('');
12887            dbms_output.put_line(
12888              'Error when trying to remove write lock file.  ' ||
12889              'Please check that file ' || c_wrlock_fname || 'is not in ' ||
12890               pTextLogDir || ' before rerunning the preupgrade tool.');
12891            dbms_output.put_line('');
12892            RAISE_APPLICATION_ERROR(-20000, 'Error: ' || SQLERRM);
12893        END;
12894      END IF;  -- end if pGotWriteLock = TRUE
12895  
12896    EXCEPTION
12897      -- if for some reason preupgrade tool is killed or we are not
12898      -- connected to oracle, then we have to clean up the write lock
12899      -- file and move the pdb files to pdbfiles subdir before exiting
12900      WHEN e_userCancel OR e_noOraConnect1 OR e_noOraConnect2 THEN
12901        IF pGotWriteLock = TRUE THEN
12902          BEGIN
12903            UTL_FILE.FREMOVE(pOutputLocation, c_wrlock_fname);
12904          EXCEPTION WHEN OTHERS THEN NULL;
12905          END;
12906  
12907          BEGIN
12908            UTL_FILE.FRENAME(pOutputLocation, pOutputFName,
12909                             c_pdb_dir_obj, pOutputFName, TRUE);
12910          EXCEPTION WHEN OTHERS THEN NULL;
12911          END;
12912  
12913          BEGIN
12914            UTL_FILE.FRENAME(pOutputLocation, pPreScriptFname,
12915                             c_pdb_dir_obj, pPreScriptFname, TRUE);
12916          EXCEPTION WHEN OTHERS THEN NULL;
12917          END;
12918  
12919          BEGIN
12920            UTL_FILE.FRENAME(pOutputLocation, pPostScriptFname,
12921                             c_pdb_dir_obj, pPostScriptFname, TRUE);
12922          EXCEPTION WHEN OTHERS THEN NULL;
12923          END;
12924  
12925          pGotWriteLock := FALSE;
12926        ELSE                                    -- IF pGotWriteLock is FALSE
12927          BEGIN
12928            UTL_FILE.FREMOVE(pOutputLocation, pOutputFName);
12929          EXCEPTION WHEN OTHERS THEN NULL;
12930          END;
12931  
12932          BEGIN
12933            UTL_FILE.FREMOVE(pOutputLocation, pPreScriptFname);
12934          EXCEPTION WHEN OTHERS THEN NULL;
12935          END;
12936  
12937          BEGIN
12938            UTL_FILE.FREMOVE(pOutputLocation, pPostScriptFname);
12939          EXCEPTION WHEN OTHERS THEN NULL;
12940          END;
12941        END IF;
12942  
12943        RAISE_APPLICATION_ERROR(-20000,'Error: ' || SQLERRM);
12944    END;
12945  END concat_pdb_file;
12946  
12947  
12948  --
12949  -- end_preupgd:
12950  -- finishing steps to the preupgrade tool to be placed here
12951  --
12952  PROCEDURE end_preupgrd
12953  IS
12954  BEGIN
12955  
12956    IF tracing_on_xxx THEN
12957      dbms_output.put_line('XXX in end_preupgrd');
12958    END IF;
12959  
12960    --
12961    -- display a msg that the preupgrade checks are done
12962    --
12963    dbms_output.put_line('');
12964    dbms_output.put_line('***************************************************************************');
12965    dbms_output.put_line ('Pre-Upgrade Checks in ' || dbms_preup.get_con_name || ' Completed.');
12966    dbms_output.put_line('***************************************************************************');
12967    dbms_output.put_line('');
12968    dbms_output.put_line('***************************************************************************');
12969    DisplayLinePL('***************************************************************************');
12970  
12971    --
12972    -- if db is NOT opened in read only mode, then log in registry$log that
12973    -- preupgrade tool has been run
12974    --
12975    IF is_db_readonly = FALSE
12976    THEN
12977      end_log_preupg_action;
12978    END IF;
12979  
12980    IF pCreatedPdbDirObj THEN
12981      -- drop pdbfiles dir obj
12982      BEGIN
12983        EXECUTE IMMEDIATE 'DROP DIRECTORY :1' USING c_pdb_dir_obj;
12984        pCreatedPdbDirObj := FALSE;
12985        IF tracing_on_xxx THEN
12986          dbms_output.put_line('XXX PDB_PREUPGRADE_DIR dropped');
12987        END IF;
12988      EXCEPTION
12989        WHEN OTHERS THEN NULL;
12990      END;
12991  
12992      IF pGotWriteLock = TRUE THEN
12993        UTL_FILE.FREMOVE(c_dir_obj, c_wrlock_fname);
12994        pGotWriteLock := FALSE;
12995      END IF;
12996    END IF;  -- if pdb directory object exists
12997  
12998  END end_preupgrd;
12999  
13000  END dbms_preup;
13001  /

Package body created.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling olap/admin/bug20558005.sql on ' || SYSTIMESTAMP FROM dual;
Calling olap/admin/bug20558005.sql on 01-AUG-16 05.01.24.623703 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: ORA-04043
IGNORABLE ERRORS: ORA-04043
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('olap/admin/bug20558005.sql') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/nothing.sql

1 row selected.

SQL> @@&sql_script
SQL> Rem $Header: rdbms/admin/nothing.sql /st_rdbms_12.1/1 2014/06/03 11:24:49 aketkar Exp $
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/nothing.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/nothing.sql
SQL> Rem SQL_PHASE: NOTHING
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: NONE
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling rdbms/admin/bug19587324.sql on ' || SYSTIMESTAMP FROM dual;
Calling rdbms/admin/bug19587324.sql on 01-AUG-16 05.01.24.668708 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: NONE
IGNORABLE ERRORS: NONE
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('rdbms/admin/bug19587324.sql') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/bug19587324.sql

1 row selected.

SQL> @@&sql_script
SQL> Rem
SQL> Rem $Header: rdbms/admin/bug19587324.sql /st_rdbms_12.1.0.2.0dbpsu/1 2015/08/19 11:17:01 dvoss Exp $
SQL> Rem
SQL> Rem bug19587324.sql
SQL> Rem
SQL> Rem Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      bug19587324.sql - Additional install/rollback action for bug 19587324
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script recompiles a package body which is invalidated during
SQL> Rem      the installation or rollback of bug fix 19587324.
SQL> Rem
SQL> Rem      When installing or rolling back prvtlmd.plb in the context of this
SQL> Rem      fix, this SQL script should be run AFTER prvtlmd.plb is loaded to
SQL> Rem      recompile DBMS_LOGMNR_SESSION which may become invalid in certain
SQL> Rem      configurations.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/bug19587324.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/bug19587324.sql
SQL> Rem    SQL_PHASE: PATCH
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    dvoss       08/11/15 - Created
SQL> Rem
SQL> 
SQL> SET ECHO ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> alter package dbms_logmnr_session compile body;

Package body altered.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Calling rdbms/admin/bug18909599.sql on ' || SYSTIMESTAMP FROM dual;
Calling rdbms/admin/bug18909599.sql on 01-AUG-16 05.01.25.032359 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> PROMPT IGNORABLE ERRORS: NONE
IGNORABLE ERRORS: NONE
SQL> 
SQL> SELECT dbms_sqlpatch.install_file('rdbms/admin/bug18909599.sql') AS install_file
  2    FROM dual;

INSTALL_FILE
--------------------------------------------------------------------------------
?/rdbms/admin/bug18909599.sql

1 row selected.

SQL> @@&sql_script
SQL> Rem
SQL> Rem $Header: rdbms/admin/bug18909599.sql /st_rdbms_12.1.0.2.0dbpsu/2 2015/02/11 12:39:31 czechar Exp $
SQL> Rem
SQL> Rem bug18909599.sql
SQL> Rem
SQL> Rem Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      bug18909599.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/bug18909599.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/bug18909599.sql
SQL> Rem    SQL_PHASE: PATCH
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    czechar     02/11/15 - Fix SQL file metadata
SQL> Rem    dkoppar     02/03/15 - backport of 18909599
SQL> Rem    dkoppar     02/03/15 - Created
SQL> Rem
SQL> 
SQL> SET ECHO ON
SQL> SET FEEDBACK 1
SQL> SET NUMWIDTH 10
SQL> SET LINESIZE 80
SQL> SET TRIMSPOOL ON
SQL> SET TAB OFF
SQL> SET PAGESIZE 100
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> INSERT INTO sys.ku_noexp_tab ( obj_type, schema, name ) VALUES
  2   ('DIRECTORY', NULL, 'OPATCH_TEMP_DIR')
  3  /

1 row created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/1 2013/03/13 13:08:33 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> BEGIN dbms_sqlpatch.patch_finalize; END;
  2  /

PL/SQL procedure successfully completed.

SQL> 
SQL> SET PAGESIZE 0
SQL> SELECT 'Finished apply for patch 21359755/19194568 on' ||
  2         SYSTIMESTAMP FROM dual;
Finished apply for patch 21359755/19194568 on01-AUG-16 05.01.25.144096 PM +00:00

1 row selected.

SQL> SET PAGESIZE 10
SQL> 
SQL> SPOOL off
SQL> 
SQL> 
END_RUNNING
--------------------------------------------------------------------------------
==== @/u01/app/12.1.0.2/grid/sqlpatch/21359755/19194568/21359755_apply.sql ##Dat
abase Patch Set Update : 12.1.0.2.5 (21359755)## #/u01/app/grid/cfgtoollogs/sqlp
atch/21359755/19194568/# #NB# #PSU# Container:ODIE_C Id:3 16-08-01 05:01:25 Proc
:1 ====


1 row selected.

SQL> 
END_RUNNING
--------------------------------------------------------------------------------
==== @/u01/app/12.1.0.2/grid/sqlpatch/21359755/19194568/21359755_apply.sql ##Dat
abase Patch Set Update : 12.1.0.2.5 (21359755)## #/u01/app/grid/cfgtoollogs/sqlp
atch/21359755/19194568/# #NB# #PSU# Container:ODIE_C Id:3 16-08-01 05:01:25 Proc
:1 ====


1 row selected.

SQL> SQL> 
SQL>   2  
Session altered.

SQL> SQL> 
SQL> ========== PROCESS ENDED ==========
SQL> Disconnected from Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production
With the Partitioning, Automatic Storage Management and Advanced Analytics options
